I0621 14:00:20.874528   31957 log.go:80] found username for access token
I0621 14:00:22.504519   31957 log.go:80] found username for access token
I0621 14:00:22.776165   31957 log.go:80] Explicitly ignoring and discarding error: no git repository found from /mnt/c/Projects/pulumi-trigger
I0621 14:00:23.041700   31957 log.go:80] found username for access token
I0621 14:00:23.041767   31957 log.go:80] Stack sandbox being updated to version 66
I0621 14:00:23.697018   31957 log.go:80] *** Starting Update(preview=true) ***
I0621 14:00:23.698188   31957 log.go:80] gatherPluginsFromProgram(): gathering plugins from language host
I0621 14:00:23.713888   31957 log.go:80] GetPluginPath(language, go, <nil>): found on $PATH /home/gb73800/.pulumi/bin/pulumi-language-go
I0621 14:00:23.714283   31957 log.go:80] Launching plugin 'go' from '/home/gb73800/.pulumi/bin/pulumi-language-go' with args: -root=/mnt/c/Projects/pulumi-trigger,127.0.0.1:61743
I0621 14:00:24.776373   31957 log.go:80] langhost[go].GetPluginInfo() executing
I0621 14:00:24.779568   31957 log.go:80] langhost[go].GetRequiredPlugins(proj=pulumi-trigger,pwd=/mnt/c/Projects/pulumi-trigger,program=.) executing
I0621 14:00:24.780893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:24.780720   31997 log.go:80] GetRequiredPlugins: Determining pulumi packages
<{%reset%}>)
I0621 14:00:24.794866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:24.794768   31997 log.go:80] program go found in $PATH
<{%reset%}>)
I0621 14:00:26.633836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.633672   31997 log.go:80] GetRequiredPlugins: Found plugin name: aws, version: v5.41.0
<{%reset%}>)
I0621 14:00:26.641698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.640903   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pulumi/pulumi/sdk/v3, version: v3.69.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.643278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.642692   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/Microsoft/go-winio, version: v0.6.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.643822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.643624   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/ProtonMail/go-crypto, version: v0.0.0-20230518184743-7afd39499903, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.644656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.644527   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/acomagu/bufpipe, version: v1.0.4, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.646957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.645508   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/aead/chacha20, version: v0.0.0-20180709150244-8b13a72661da, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.647048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.646395   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/agext/levenshtein, version: v1.2.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.647792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.647314   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/apparentlymart/go-textseg/v13, version: v13.0.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.648323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.648227   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/blang/semver, version: v3.5.1+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.650206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.649253   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/cheggaaa/pb, version: v1.0.29, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.650286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.650230   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/cloudflare/circl, version: v1.3.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.651556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.651150   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/djherbis/times, version: v1.5.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.652168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.652099   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/emirpasic/gods, version: v1.18.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.653168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.652987   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/gcfg, version: v1.5.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.654198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.653983   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/go-billy/v5, version: v5.4.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.655370   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.655093   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/go-git/v5, version: v5.6.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.658533   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.656086   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/gogo/protobuf, version: v1.3.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.660041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.657140   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/golang/glog, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.660132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.658117   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/golang/protobuf, version: v1.5.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.662641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.662416   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/grpc-ecosystem/grpc-opentracing, version: v0.0.0-20180507213350-8e809c8a8645, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.665061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.664276   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/errwrap, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.667610   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.666411   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/go-multierror, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.667692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.667468   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/hcl/v2, version: v2.16.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.669127   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.668425   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/imdario/mergo, version: v0.3.15, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.670575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.669822   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/inconshreveable/mousetrap, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.677281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.676041   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/jbenet/go-context, version: v0.0.0-20150711004518-d14ea06fba99, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.678078   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.677764   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/kevinburke/ssh_config, version: v1.2.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.682513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.682121   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mattn/go-runewidth, version: v0.0.14, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.684243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.683621   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mitchellh/go-ps, version: v1.0.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.684739   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.684591   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mitchellh/go-wordwrap, version: v1.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.687079   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.685571   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/opentracing/basictracer-go, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.691531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.688542   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/opentracing/opentracing-go, version: v1.2.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.691696   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.689557   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pjbgf/sha1cd, version: v0.3.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.695976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.694424   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pkg/errors, version: v0.9.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.698455   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.697267   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pkg/term, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.700427   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.699907   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/rivo/uniseg, version: v0.4.4, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.701840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.700905   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/rogpeppe/go-internal, version: v1.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.703798   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.701935   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/sabhiram/go-gitignore, version: v0.0.0-20210923224102-525f6e181f06, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.703887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.702934   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/santhosh-tekuri/jsonschema/v5, version: v5.3.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.704005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.703923   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/sergi/go-diff, version: v1.3.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.707036   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.704796   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/skeema/knownhosts, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.707200   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.705752   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/cast, version: v1.4.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.707268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.706741   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/cobra, version: v1.7.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.710167   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.707752   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/pflag, version: v1.0.5, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.715861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.708753   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/texttheater/golang-levenshtein, version: v1.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.719004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.709650   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/tweekmonster/luser, version: v0.0.0-20161003172636-3fa38070dbd7, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.720377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.711106   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/uber/jaeger-client-go, version: v2.30.0+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.720762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.712137   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/uber/jaeger-lib, version: v2.4.1+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.722299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.713066   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/xanzy/ssh-agent, version: v0.3.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.714978   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/zclconf/go-cty, version: v1.13.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.716485   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: go.uber.org/atomic, version: v1.11.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.722919   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/crypto, version: v0.9.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.723921   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/mod, version: v0.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.725582   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/net, version: v0.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.728804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.726962   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/sys, version: v0.8.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.744449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.730540   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/term, version: v0.8.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.744552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.737903   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/text, version: v0.9.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.761418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.755984   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/tools, version: v0.9.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.761507   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.757001   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/genproto, version: v0.0.0-20230410155749-daa745c078e1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.762039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.758047   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/grpc, version: v1.55.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.762100   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.759068   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/protobuf, version: v1.30.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.762146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.760094   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: gopkg.in/warnings.v0, version: v0.1.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.762196   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.762155   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: gopkg.in/yaml.v3, version: v3.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.763543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.763234   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: lukechampine.com/frand, version: v1.4.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.765663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.765467   31997 log.go:80] GetRequiredPlugins: Ignoring dependency: sourcegraph.com/sourcegraph/appdash, version: v0.0.0-20211028080628-e2786a622600, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:00:26.766956   31957 log.go:80] langhost[go].GetRequiredPlugins(proj=pulumi-trigger,pwd=/mnt/c/Projects/pulumi-trigger,program=.) success: #versions=1
I0621 14:00:26.767035   31957 log.go:80] gatherPluginsFromProgram(): plugin go <nil> () is required by language host
I0621 14:00:26.767078   31957 log.go:80] gatherPluginsFromProgram(): plugin aws 5.41.0 () is required by language host
I0621 14:00:26.767127   31957 log.go:80] gatherPluginsFromSnapshot(): gathering plugins from snapshot
I0621 14:00:26.767188   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox", not a provider
I0621 14:00:26.767240   31957 log.go:80] gatherPluginsFromSnapshot(): plugin aws 5.41.0 is required by first-class provider "urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default"
I0621 14:00:26.767275   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy", not a provider
I0621 14:00:26.767336   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole", not a provider
I0621 14:00:26.767375   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo", not a provider
I0621 14:00:26.767408   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild", not a provider
I0621 14:00:26.767441   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy", not a provider
I0621 14:00:26.767472   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole", not a provider
I0621 14:00:26.767534   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule", not a provider
I0621 14:00:26.767602   31957 log.go:80] ensurePluginsAreInstalled(): beginning
I0621 14:00:26.791848   31957 log.go:80] GetPluginPath(language, go, <nil>): found on $PATH /home/gb73800/.pulumi/bin/pulumi-language-go
I0621 14:00:26.791925   31957 log.go:80] ensurePluginsAreInstalled(): plugin go <nil> already installed
I0621 14:00:26.845615   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:00:26.845738   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:00:26.845828   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:00:26.845912   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:00:26.846029   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:00:26.846119   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:00:26.846153   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:00:26.846203   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:00:26.846234   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:00:26.846265   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:00:26.846404   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:00:26.846466   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:00:26.846498   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:00:26.846529   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:00:26.846555   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:00:26.846581   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:00:26.846609   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:00:26.846644   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:00:26.846680   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:00:26.846715   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:00:26.846750   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:00:26.846779   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:00:26.846815   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:00:26.846853   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:00:26.849807   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:00:26.849879   31957 log.go:80] ensurePluginsAreInstalled(): plugin aws 5.41.0 already installed
I0621 14:00:26.849912   31957 log.go:80] ensurePluginsAreInstalled(): completed
I0621 14:00:26.850000   31957 log.go:80] computeDefaultProviderPlugins(): considering go
I0621 14:00:26.850039   31957 log.go:80] computeDefaultProviderPlugins(): skipping go, not a resource provider
I0621 14:00:26.850078   31957 log.go:80] computeDefaultProviderPlugins(): considering aws-5.41.0
I0621 14:00:26.850111   31957 log.go:80] computeDefaultProviderPlugins(): plugin aws-5.41.0 selected for package aws (first seen)
I0621 14:00:26.850142   31957 log.go:72] computeDefaultProviderPlugins(): summary of default plugins:
I0621 14:00:26.850182   31957 log.go:80]   aws             = 5.41.0
I0621 14:00:26.851268   31957 log.go:80] deploymentExecutor.Execute(...): waiting for incoming events
I0621 14:00:26.851447   31957 log.go:80] langhost[go].Run(pwd=/mnt/c/Projects/pulumi-trigger,program=.,#args=0,proj=pulumi-trigger,stack=sandbox,#config=2,dryrun=true) executing
I0621 14:00:26.851866   31957 log.go:80] StepExecutor worker(-2): worker coming online
I0621 14:00:26.851914   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:00:26.856332   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.855764   31997 log.go:80] No prebuilt executable specified, attempting invocation via compilation
<{%reset%}>)
I0621 14:00:26.916276   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.915069   31997 log.go:80] program go found in $PATH
<{%reset%}>)
I0621 14:00:26.916433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:26.915115   31997 log.go:80] Attempting to build go program in . with: /usr/local/go/bin/go build -o /tmp/pulumi-go.749525176
<{%reset%}>)
I0621 14:00:56.551308   31957 log.go:80] ResourceMonitor.SupportsFeature(id: resourceReferences) = true
I0621 14:00:56.552331   31957 log.go:80] ResourceMonitor.SupportsFeature(id: outputValues) = true
I0621 14:00:56.552904   31957 log.go:80] ResourceMonitor.SupportsFeature(id: deletedWith) = true
I0621 14:00:56.553532   31957 log.go:80] ResourceMonitor.SupportsFeature(id: aliasSpecs) = true
I0621 14:00:56.555184   31957 log.go:80] ResourceMonitor.RegisterResource received: t=pulumi:pulumi:Stack, name=pulumi-trigger-sandbox, custom=false, #props=0, parent=, protect=false, provider=, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:00:56.555256   31957 log.go:80] EvalSourceIterator produced a registration: t=pulumi:pulumi:Stack,name=pulumi-trigger-sandbox,#props=0
I0621 14:00:56.555281   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:00:56.555301   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:00:56.555384   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox' after diff (same) (inputs=map[])
I0621 14:00:56.555418   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:00:56.555445   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:00:56.555473   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:00:56.555500   31957 log.go:80] StepExecutor worker(0): launching oneshot worker
I0621 14:00:56.555612   31957 log.go:80] StepExecutor worker(0): applying step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox (preview true)
I0621 14:00:56.555657   31957 log.go:80] StepExecutor worker(0): step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox retired
I0621 14:00:56.555682   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:00:56.555699   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=pulumi:pulumi:Stack, urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=0
I0621 14:00:56.557163   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:00:56.557204   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:00:56.557263   31957 log.go:80] handling default provider request for package aws
I0621 14:00:56.557321   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:00:56.557350   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:00:56.557379   31957 log.go:80] newRegisterDefaultProviderEvent(aws): no version specified, falling back to default version
I0621 14:00:56.557424   31957 log.go:80] newRegisterDefaultProviderEvent(aws): default version hit on version 5.41.0
I0621 14:00:56.557454   31957 log.go:80] newRegisterDefaultProviderEvent(aws): no pluginDownloadURL specified, falling back to default pluginDownloadURL
I0621 14:00:56.557480   31957 log.go:80] newRegisterDefaultProviderEvent(aws): default pluginDownloadURL miss, sending empty string to engine
I0621 14:00:56.557584   31957 log.go:80] waiting for default provider for package aws
I0621 14:00:56.557614   31957 log.go:80] EvalSourceIterator produced a registration: t=pulumi:providers:aws,name=default,#props=2
I0621 14:00:56.557757   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:00:56.557796   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:00:56.557865   31957 log.go:80] ProviderRegistry.Check(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:00:56.582058   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:00:56.582114   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:00:56.582148   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:00:56.582164   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:00:56.582185   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:00:56.582210   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:00:56.582234   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:00:56.582256   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:00:56.582281   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:00:56.582297   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:00:56.582312   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:00:56.582332   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:00:56.582348   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:00:56.582362   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:00:56.582375   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:00:56.582394   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:00:56.582409   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:00:56.582458   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:00:56.582479   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:00:56.582505   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:00:56.582522   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:00:56.582536   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:00:56.582550   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:00:56.582566   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:00:56.583266   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:00:56.583327   31957 log.go:80] Launching plugin 'aws (resource)' from '/home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws' with args: 127.0.0.1:61743
I0621 14:00:59.162685   31957 log.go:80] Provider[aws, 0xc0005b5450].GetPluginInfo() executing
I0621 14:00:59.165709   31957 log.go:80] Provider[aws, 0xc0005b5450].GetPluginInfo() success (#version=5.41.0) success
I0621 14:00:59.165830   31957 log.go:80] Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:00:59.165980   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: region={eu-west-1}
I0621 14:00:59.166015   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: version={5.41.0}
I0621 14:00:59.166075   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
I0621 14:00:59.166133   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
I0621 14:00:59.179703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.179559   32283 provider.go:302] tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing
<{%reset%}>)
I0621 14:00:59.182102   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.181943   32283 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:00:59.182201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182001   32283 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:00:59.182284   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182033   32283 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:00:59.182340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182053   32283 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:00:59.182581   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182507   32283 schema.go:492] Created Terraform input: region = eu-west-1
<{%reset%}>)
I0621 14:00:59.182986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182931   32283 schema.go:671] Created Terraform input: skip_metadata_api_check = true (from Pulumi schema)
<{%reset%}>)
I0621 14:00:59.183035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182969   32283 schema.go:671] Created Terraform input: skip_region_validation = true (from Pulumi schema)
<{%reset%}>)
I0621 14:00:59.183067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.182988   32283 schema.go:671] Created Terraform input: skip_credentials_validation = false (from Pulumi schema)
<{%reset%}>)
I0621 14:00:59.183356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.183299   32283 schema.go:502] Terraform input region = "eu-west-1"
<{%reset%}>)
I0621 14:00:59.183417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.183322   32283 schema.go:502] Terraform input skip_metadata_api_check = true
<{%reset%}>)
I0621 14:00:59.183456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.183331   32283 schema.go:502] Terraform input skip_region_validation = true
<{%reset%}>)
I0621 14:00:59.183515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.183338   32283 schema.go:502] Terraform input skip_credentials_validation = false
<{%reset%}>)
I0621 14:00:59.183561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.183347   32283 schema.go:502] Terraform input __defaults = []interface {}{"skipCredentialsValidation", "skipMetadataApiCheck", "skipRegionValidation"}
<{%reset%}>)
I0621 14:00:59.921594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.921474   32283 log.go:75] Marshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:00:59.921664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:00:59.921513   32283 log.go:75] Marshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:00:59.922842   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).inputs]: region={eu-west-1}
I0621 14:00:59.922889   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).inputs]: version={5.41.0}
I0621 14:00:59.922927   31957 log.go:80] Provider[aws, 0xc0005b5450].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) success: inputs=#2 failures=#0
I0621 14:00:59.922949   31957 log.go:80] setProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::04da6b54-80e4-46f7-96ec-b56ff0331ba9)
I0621 14:00:59.922982   31957 log.go:80] ProviderRegistry.Diff(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default,c83b66f5-de02-42d0-a6eb-d3dd96164177): executing (#olds=2,#news=2)
I0621 14:00:59.923004   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::04da6b54-80e4-46f7-96ec-b56ff0331ba9)
I0621 14:00:59.923026   31957 log.go:80] Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:00:59.923047   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: region={eu-west-1}
I0621 14:00:59.923063   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: version={5.41.0}
I0621 14:00:59.923080   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
I0621 14:00:59.923098   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
I0621 14:00:59.924630   31957 log.go:80] Provider[aws, 0xc0005b5450].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) unimplemented rpc: returning DiffUnknown with no replaces
I0621 14:00:59.924682   31957 log.go:80] ProviderRegistry.Diff(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default,c83b66f5-de02-42d0-a6eb-d3dd96164177): executed (1, []resource.PropertyKey(nil))
I0621 14:00:59.924716   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default' after diff (same) (inputs=map[region:{eu-west-1} version:{5.41.0}])
I0621 14:00:59.924738   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:00:59.924766   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:00:59.924786   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:00:59.924802   31957 log.go:80] StepExecutor worker(1): launching oneshot worker
I0621 14:00:59.924831   31957 log.go:80] StepExecutor worker(1): applying step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default (preview true)
I0621 14:00:59.924851   31957 log.go:80] Same(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:00:59.924893   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:00:59.941673   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:00:59.941740   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:00:59.941776   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:00:59.941795   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:00:59.941810   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:00:59.941825   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:00:59.941839   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:00:59.941853   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:00:59.941869   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:00:59.941883   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:00:59.941897   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:00:59.941912   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:00:59.941926   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:00:59.941941   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:00:59.941955   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:00:59.941969   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:00:59.941984   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:00:59.941999   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:00:59.942013   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:00:59.942028   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:00:59.942042   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:00:59.942057   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:00:59.942072   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:00:59.942086   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:00:59.942134   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:00:59.942179   31957 log.go:80] Launching plugin 'aws (resource)' from '/home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws' with args: 127.0.0.1:61743
I0621 14:01:00.548885   31957 log.go:80] Provider[aws, 0xc001aa63c0].GetPluginInfo() executing
I0621 14:01:00.549702   31957 log.go:80] Provider[aws, 0xc001aa63c0].GetPluginInfo() success (#version=5.41.0) success
I0621 14:01:00.549766   31957 log.go:80] Provider[aws, 0xc001aa63c0].Configure() executing (#vars=2)
I0621 14:01:00.549806   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Configure().inputs]: region={eu-west-1}
I0621 14:01:00.549836   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Configure().inputs]: version={5.41.0}
I0621 14:01:00.549865   31957 log.go:80] loaded provider urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177
I0621 14:01:00.549883   31957 log.go:80] setProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:00.549926   31957 log.go:80] StepExecutor worker(1): step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default retired
I0621 14:01:00.549969   31957 log.go:80] registered default provider for package aws: urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:01:00.550003   31957 log.go:80] handling default provider request for package aws
I0621 14:01:00.550034   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:00.550050   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: defaultBranch={main}
I0621 14:01:00.550091   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryName={my-repo-2}
I0621 14:01:00.550138   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:codecommit/repository:Repository, name=my-repo, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:00.550167   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:codecommit/repository:Repository,name=my-repo,#props=2
I0621 14:01:00.550187   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:00.550202   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:00.550229   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:00.550258   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) executing (#olds=3,#news=2)
I0621 14:01:00.550059   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:00.550296   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: description={Policy to allow git pull}
I0621 14:01:00.550313   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: name={GitPullPolicy2}
I0621 14:01:00.550328   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: path={/}
I0621 14:01:00.550344   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.550385   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/policy:Policy, name=git-policy, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:00.550429   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/policy:Policy,name=git-policy,#props=4
I0621 14:01:00.553555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553425   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Configure().args]: region={eu-west-1}
<{%reset%}>)
I0621 14:01:00.553642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553460   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Configure().args]: version={5.41.0}
<{%reset%}>)
I0621 14:01:00.553695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553518   32316 schema.go:492] Created Terraform input: region = eu-west-1
<{%reset%}>)
I0621 14:01:00.553742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553540   32316 schema.go:671] Created Terraform input: skip_region_validation = true (from Pulumi schema)
<{%reset%}>)
I0621 14:01:00.553773   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553556   32316 schema.go:671] Created Terraform input: skip_credentials_validation = false (from Pulumi schema)
<{%reset%}>)
I0621 14:01:00.553799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553568   32316 schema.go:671] Created Terraform input: skip_metadata_api_check = true (from Pulumi schema)
<{%reset%}>)
I0621 14:01:00.553826   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553586   32316 schema.go:502] Terraform input region = "eu-west-1"
<{%reset%}>)
I0621 14:01:00.553869   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553595   32316 schema.go:502] Terraform input skip_region_validation = true
<{%reset%}>)
I0621 14:01:00.553905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553602   32316 schema.go:502] Terraform input skip_credentials_validation = false
<{%reset%}>)
I0621 14:01:00.553930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553608   32316 schema.go:502] Terraform input skip_metadata_api_check = true
<{%reset%}>)
I0621 14:01:00.553964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.553614   32316 schema.go:502] Terraform input __defaults = []interface {}{"skipCredentialsValidation", "skipMetadataApiCheck", "skipRegionValidation"}
<{%reset%}>)
I0621 14:01:00.956276   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: __defaults={[]}
I0621 14:01:00.956346   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: defaultBranch={main}
I0621 14:01:00.956380   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryName={my-repo-2}
I0621 14:01:00.956412   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: defaultBranch={main}
I0621 14:01:00.956445   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: repositoryName={my-repo-2}
I0621 14:01:00.957821   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957744   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:01:00.957882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957783   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.957915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957800   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.957934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957816   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.957954   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957826   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.957986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957843   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.958012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957864   32316 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:01:00.958038   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957888   32316 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:01:00.958059   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957905   32316 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.958077   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957913   32316 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:01:00.958094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957920   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:00.958111   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957979   32316 schema.go:881] Terraform output repositoryName = {my-repo-2}
<{%reset%}>)
I0621 14:01:00.958130   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.957993   32316 schema.go:881] Terraform output defaultBranch = {main}
<{%reset%}>)
I0621 14:01:00.958150   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.958000   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:00.958169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.958015   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.958190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.958032   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.958211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.958041   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.958557   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: __defaults={[]}
I0621 14:01:00.958610   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: defaultBranch={main}
I0621 14:01:00.958639   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: repositoryName={my-repo-2}
I0621 14:01:00.958680   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) success: inputs=#3 failures=#0
I0621 14:01:00.958729   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2): executing (#olds=10,#news=3)
I0621 14:01:00.958767   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:01:00.958808   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.958845   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.958875   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: defaultBranch={}
I0621 14:01:00.958908   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: description={}
I0621 14:01:00.958936   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: id={my-repo-2}
I0621 14:01:00.958962   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:01:00.958988   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: repositoryName={my-repo-2}
I0621 14:01:00.959014   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: tags={map[]}
I0621 14:01:00.959046   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: tagsAll={map[]}
I0621 14:01:00.959074   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: __defaults={[]}
I0621 14:01:00.959100   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: defaultBranch={main}
I0621 14:01:00.959125   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: repositoryName={my-repo-2}
I0621 14:01:00.959750   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959681   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:01:00.959800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959709   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:01:00.959833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959724   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.959868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959734   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.959907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959751   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={}
<{%reset%}>)
I0621 14:01:00.959940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959759   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: description={}
<{%reset%}>)
I0621 14:01:00.959995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959767   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: id={my-repo-2}
<{%reset%}>)
I0621 14:01:00.960028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959777   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:01:00.960065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959793   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.960098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959810   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:00.960128   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959820   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:00.960159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959841   32316 schema.go:492] Created Terraform input: arn = arn:aws:codecommit:eu-west-1:103429827345:my-repo-2
<{%reset%}>)
I0621 14:01:00.960185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959854   32316 schema.go:492] Created Terraform input: clone_url_http = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:00.960221   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959875   32316 schema.go:492] Created Terraform input: default_branch = 
<{%reset%}>)
I0621 14:01:00.960246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959887   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:00.960274   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959898   32316 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:01:00.960300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959906   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:00.960343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959927   32316 schema.go:492] Created Terraform input: clone_url_ssh = ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:00.960372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959942   32316 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:01:00.960399   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959968   32316 schema.go:492] Created Terraform input: id = my-repo-2
<{%reset%}>)
I0621 14:01:00.960422   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.959990   32316 schema.go:492] Created Terraform input: repository_id = 3b554ab5-e4e5-44c5-b190-3a222971c3e6
<{%reset%}>)
I0621 14:01:00.960571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960049   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.960605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960069   32316 schema.go:502] Terraform input clone_url_ssh = "ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:00.960634   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960079   32316 schema.go:502] Terraform input arn = "arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:00.960659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960086   32316 schema.go:502] Terraform input clone_url_http = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:00.960686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960097   32316 schema.go:502] Terraform input default_branch = ""
<{%reset%}>)
I0621 14:01:00.960710   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960103   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.960737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960110   32316 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.960762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960117   32316 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:01:00.960808   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960127   32316 schema.go:502] Terraform input id = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.960837   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960136   32316 schema.go:502] Terraform input repository_id = "3b554ab5-e4e5-44c5-b190-3a222971c3e6"
<{%reset%}>)
I0621 14:01:00.960866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960205   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.960898   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960214   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.960928   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960222   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.960951   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960240   32316 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:01:00.960979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960249   32316 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:01:00.961003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960261   32316 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:01:00.961030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.960269   32316 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.978181   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2) success: changes=2 #replaces=[] #stables=[repositoryName] delbefrepl=false, diffs=#[defaultBranch], detaileddiff=map[defaultBranch:kind:UPDATE]
I0621 14:01:00.978261   31957 log.go:80] Planner decided to update 'urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo' (oldprops=map[__defaults:{[]} defaultBranch:{main} repositoryName:{my-repo-2}] inputs=map[__defaults:{[]} defaultBranch:{main} repositoryName:{my-repo-2}])
I0621 14:01:00.978295   31957 log.go:80] Checking step update for urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:01:00.978325   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:00.978341   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:00.978373   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:00.978390   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:00.978458   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:00.978483   31957 log.go:80] StepExecutor worker(2): launching oneshot worker
I0621 14:01:00.978554   31957 log.go:80] StepExecutor worker(2): applying step update on urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo (preview true)
I0621 14:01:00.978575   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:00.978604   31957 log.go:80] Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) executing (#olds=10,#news=3)
I0621 14:01:00.978629   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:01:00.978648   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.978665   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.978680   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: defaultBranch={}
I0621 14:01:00.978695   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: description={}
I0621 14:01:00.978709   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: id={my-repo-2}
I0621 14:01:00.978724   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:01:00.978739   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryName={my-repo-2}
I0621 14:01:00.978755   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: tags={map[]}
I0621 14:01:00.978774   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: tagsAll={map[]}
I0621 14:01:00.978792   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: __defaults={[]}
I0621 14:01:00.978812   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: defaultBranch={main}
I0621 14:01:00.978832   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: repositoryName={my-repo-2}
I0621 14:01:00.978404   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy) executing (#olds=5,#news=4)
I0621 14:01:00.979098   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: __defaults={[]}
I0621 14:01:00.979146   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: description={Policy to allow git pull}
I0621 14:01:00.979260   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: name={GitPullPolicy2}
I0621 14:01:00.979293   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: path={/}
I0621 14:01:00.979322   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.979355   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: description={Policy to allow git pull}
I0621 14:01:00.979381   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: name={GitPullPolicy2}
I0621 14:01:00.979433   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: path={/}
I0621 14:01:00.979469   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.980162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980075   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:01:00.980250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980120   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.980292   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980201   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.980329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980229   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.980358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980259   32316 provider.go:1001] tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:01:00.980390   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980261   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:01:00.980462   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980282   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:01:00.980495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980298   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.980526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980287   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.980553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980311   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.980586   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980335   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={}
<{%reset%}>)
I0621 14:01:00.980614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980338   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.980653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980355   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: description={}
<{%reset%}>)
I0621 14:01:00.980688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980366   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.980721   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980374   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: id={my-repo-2}
<{%reset%}>)
I0621 14:01:00.980749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980393   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:01:00.980800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980406   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.980857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980426   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:00.980894   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980442   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:00.980934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980481   32316 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:01:00.981044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980384   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:01:00.981079   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980526   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:00.981112   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980553   32316 schema.go:492] Created Terraform input: arn = arn:aws:codecommit:eu-west-1:103429827345:my-repo-2
<{%reset%}>)
I0621 14:01:00.981137   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980601   32316 schema.go:492] Created Terraform input: clone_url_ssh = ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:00.981181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980618   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.981214   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980628   32316 schema.go:492] Created Terraform input: id = my-repo-2
<{%reset%}>)
I0621 14:01:00.981250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980646   32316 schema.go:492] Created Terraform input: repository_id = 3b554ab5-e4e5-44c5-b190-3a222971c3e6
<{%reset%}>)
I0621 14:01:00.981275   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980649   32316 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:01:00.981414   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980698   32316 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:01:00.981476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980719   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:00.981587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980739   32316 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:01:00.981681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980746   32316 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:00.981722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980774   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:00.981753   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980780   32316 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:01:00.981790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980805   32316 schema.go:492] Created Terraform input: clone_url_http = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:00.981842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980809   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:00.981930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980838   32316 schema.go:492] Created Terraform input: default_branch = 
<{%reset%}>)
I0621 14:01:00.981971   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980843   32316 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:00.982043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980851   32316 schema.go:502] Terraform input repository_id = "3b554ab5-e4e5-44c5-b190-3a222971c3e6"
<{%reset%}>)
I0621 14:01:00.982101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980859   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:00.982129   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980863   32316 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.982153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980872   32316 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:01:00.982169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980877   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.982187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980889   32316 schema.go:502] Terraform input default_branch = ""
<{%reset%}>)
I0621 14:01:00.982202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980899   32316 schema.go:502] Terraform input id = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.982238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980909   32316 schema.go:502] Terraform input clone_url_http = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:00.982317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980919   32316 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:01:00.982344   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980933   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.982373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980958   32316 schema.go:502] Terraform input arn = "arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:00.982395   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.980974   32316 schema.go:502] Terraform input clone_url_ssh = "ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:00.982420   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981098   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.982440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981123   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.982480   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981131   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.982501   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981144   32316 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:01:00.982517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981152   32316 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:01:00.982534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981159   32316 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:01:00.982554   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.981166   32316 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:01:00.983349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983252   32316 schema.go:881] Terraform output repositoryId = {3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:01:00.983401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983277   32316 schema.go:881] Terraform output cloneUrlSsh = {ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.983439   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983286   32316 schema.go:881] Terraform output id = {my-repo-2}
<{%reset%}>)
I0621 14:01:00.983469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983292   32316 schema.go:881] Terraform output tags = {map[]}
<{%reset%}>)
I0621 14:01:00.983496   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983301   32316 schema.go:881] Terraform output defaultBranch = {main}
<{%reset%}>)
I0621 14:01:00.983525   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983307   32316 schema.go:881] Terraform output cloneUrlHttp = {https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.983544   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983313   32316 schema.go:881] Terraform output repositoryName = {my-repo-2}
<{%reset%}>)
I0621 14:01:00.983561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983319   32316 schema.go:881] Terraform output arn = {arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:01:00.983577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983329   32316 schema.go:881] Terraform output tagsAll = {map[]}
<{%reset%}>)
I0621 14:01:00.983609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983335   32316 schema.go:881] Terraform output description = {}
<{%reset%}>)
I0621 14:01:00.983628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983357   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:01:00.983647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983366   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.983665   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983377   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:00.983685   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983394   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: defaultBranch={main}
<{%reset%}>)
I0621 14:01:00.983744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983402   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: description={}
<{%reset%}>)
I0621 14:01:00.983845   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983408   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: id={my-repo-2}
<{%reset%}>)
I0621 14:01:00.983959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983415   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:01:00.984009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983428   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:01:00.984076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983437   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: tags={map[]}
<{%reset%}>)
I0621 14:01:00.984092   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:01:00.984154   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.984172   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.984189   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: defaultBranch={main}
I0621 14:01:00.984203   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: description={}
I0621 14:01:00.984217   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: id={my-repo-2}
I0621 14:01:00.984234   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:01:00.984260   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: repositoryName={my-repo-2}
I0621 14:01:00.984307   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: tags={map[]}
I0621 14:01:00.984338   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: tagsAll={map[]}
I0621 14:01:00.984371   31957 log.go:80] Provider[aws, 0xc001aa63c0].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) success; #outs=10
I0621 14:01:00.984128   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983446   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:00.984391   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: __defaults={[]}
I0621 14:01:00.984490   31957 log.go:80] StepExecutor worker(2): step update on urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo retired
I0621 14:01:00.984496   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: description={Policy to allow git pull}
I0621 14:01:00.984569   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: name={GitPullPolicy2}
I0621 14:01:00.984595   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: path={/}
I0621 14:01:00.984610   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.984626   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy) success: inputs=#5 failures=#0
I0621 14:01:00.984663   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2): executing (#olds=10,#news=5)
I0621 14:01:00.984689   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:01:00.984709   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: description={Policy to allow git pull}
I0621 14:01:00.984724   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:01:00.984740   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: name={GitPullPolicy2}
I0621 14:01:00.984757   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: namePrefix={}
I0621 14:01:00.984771   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: path={/}
I0621 14:01:00.984787   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.984802   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: policyId={ANPARQFHF5MIXBMIUNZQX}
I0621 14:01:00.984825   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: tags={map[]}
I0621 14:01:00.984849   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: tagsAll={map[]}
I0621 14:01:00.984871   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: __defaults={[]}
I0621 14:01:00.984890   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: description={Policy to allow git pull}
I0621 14:01:00.984908   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: name={GitPullPolicy2}
I0621 14:01:00.984934   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: path={/}
I0621 14:01:00.984955   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.984470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983930   32316 schema.go:881] Terraform output name = {GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.985115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983955   32316 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:01:00.985145   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983966   32316 schema.go:881] Terraform output policy = {{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.985169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983977   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:00.985192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.983992   32316 schema.go:881] Terraform output description = {Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.985218   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.984009   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.985252   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.984022   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.985282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.984033   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.985308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.984042   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: path={/}
<{%reset%}>)
I0621 14:01:00.985335   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.984052   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.984535   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:01:00.985386   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:codecommit/repository:Repository, urn=urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo, #outs=10
I0621 14:01:00.985407   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:01:00.985425   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.985447   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:00.985472   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: defaultBranch={main}
I0621 14:01:00.985502   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: description={}
I0621 14:01:00.985539   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: id={my-repo-2}
I0621 14:01:00.985567   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:01:00.985638   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryName={my-repo-2}
I0621 14:01:00.985700   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: tags={map[]}
I0621 14:01:00.985745   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: tagsAll={map[]}
I0621 14:01:00.985945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985738   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:01:00.985996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985784   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.986124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985826   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.986163   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985839   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.986254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985866   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.986303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985881   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: namePrefix={}
<{%reset%}>)
I0621 14:01:00.986442   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985913   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:01:00.986516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985930   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.986553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985943   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policyId={ANPARQFHF5MIXBMIUNZQX}
<{%reset%}>)
I0621 14:01:00.986588   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.985983   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:00.986619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986001   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:00.986654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986031   32316 schema.go:492] Created Terraform input: policy_id = ANPARQFHF5MIXBMIUNZQX
<{%reset%}>)
I0621 14:01:00.986750   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986056   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:00.986840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986080   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:00.986882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986103   32316 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:policy/GitPullPolicy2
<{%reset%}>)
I0621 14:01:00.986910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986124   32316 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:01:00.986962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986146   32316 schema.go:492] Created Terraform input: id = arn:aws:iam::103429827345:policy/GitPullPolicy2
<{%reset%}>)
I0621 14:01:00.986997   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986158   32316 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:01:00.987033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986204   32316 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:00.987064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986248   32316 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:01:00.987092   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986281   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:00.987121   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986304   32316 schema.go:502] Terraform input policy_id = "ANPARQFHF5MIXBMIUNZQX"
<{%reset%}>)
I0621 14:01:00.987149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986318   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.987180   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986333   32316 schema.go:502] Terraform input id = "arn:aws:iam::103429827345:policy/GitPullPolicy2"
<{%reset%}>)
I0621 14:01:00.987206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986346   32316 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:01:00.987246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986357   32316 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:00.987309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986372   32316 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:01:00.987372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986383   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.987424   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986397   32316 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:policy/GitPullPolicy2"
<{%reset%}>)
I0621 14:01:00.987461   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986410   32316 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:01:00.987502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986426   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:00.987541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986510   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:00.987571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986526   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:01:00.987601   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986548   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:01:00.987629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986578   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:01:00.987661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986590   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.987681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986614   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:00.987700   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986639   32316 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:00.987718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986656   32316 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:01:00.987737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986665   32316 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:01:00.987752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986686   32316 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:00.987771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986705   32316 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:01:00.987791   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986718   32316 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:01:00.987813   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.986734   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:00.989079   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2) success: changes=1 #replaces=[] #stables=[description path name namePrefix] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:00.989193   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy' after diff (same) (inputs=map[__defaults:{[]} description:{Policy to allow git pull} name:{GitPullPolicy2} path:{/} policy:{{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}])
I0621 14:01:00.989232   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:01:00.989263   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:00.989306   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:00.989332   31957 log.go:80] StepExecutor worker(3): launching oneshot worker
I0621 14:01:00.989446   31957 log.go:80] StepExecutor worker(3): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy (preview true)
I0621 14:01:00.989523   31957 log.go:80] StepExecutor worker(3): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy retired
I0621 14:01:00.989559   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:01:00.989589   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/policy:Policy, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy, #outs=10
I0621 14:01:00.989622   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:01:00.989646   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: description={Policy to allow git pull}
I0621 14:01:00.989667   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:01:00.989688   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: name={GitPullPolicy2}
I0621 14:01:00.989712   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: namePrefix={}
I0621 14:01:00.989733   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: path={/}
I0621 14:01:00.989757   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:01:00.989778   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policyId={ANPARQFHF5MIXBMIUNZQX}
I0621 14:01:00.989802   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: tags={map[]}
I0621 14:01:00.989842   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: tagsAll={map[]}
I0621 14:01:00.990795   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:00.990852   31957 log.go:80] handling default provider request for package aws
I0621 14:01:00.990877   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:00.990894   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:00.990936   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:01:00.990965   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:01:00.991002   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/role:Role, name=codeBuildRole, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:00.991026   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/role:Role,name=codeBuildRole,#props=2
I0621 14:01:00.991044   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:00.991059   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:00.991084   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:00.991111   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole) executing (#olds=7,#news=2)
I0621 14:01:00.991136   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:00.991156   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:01:00.991173   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: forceDetachPolicies={false}
I0621 14:01:00.991201   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:01:00.991240   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: maxSessionDuration={3600}
I0621 14:01:00.991259   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: name={codeBuildRole-615d8ed}
I0621 14:01:00.991275   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: path={/}
I0621 14:01:00.991294   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).news]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:01:00.991314   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:01:00.992060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.991959   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:01:00.992840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992722   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:00.992906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992760   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:00.992945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.992970   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.992996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.993019   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.993052   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.993077   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.993105   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.993127   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.993155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:00.993181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:00.993214   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:00.993245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992778   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:00.993294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992798   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:01:00.993322   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992841   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:00.993351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992856   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.993476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992868   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:01:00.993519   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992891   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:00.993548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.993580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.993605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.993644   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.993687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.993749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.993782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.993809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.993833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:00.993861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:00.993885   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:00.993919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.992910   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:01:00.993949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993249   32316 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:01:00.993975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.993999   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.994026   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.994050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.994079   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.994105   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.994133   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.994157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.994183   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:00.994210   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:00.994241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:00.994290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993393   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeCommitFullAccess arn:aws:iam::103429827345:policy/GitPullPolicy2]
<{%reset%}>)
I0621 14:01:00.994323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993439   32316 schema.go:671] Created Terraform input: name = codeBuildRole-615d8ed (from old default)
<{%reset%}>)
I0621 14:01:00.994372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993465   32316 schema.go:756] Created Terraform input: force_detach_policies = false (from old default)
<{%reset%}>)
I0621 14:01:00.994412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993490   32316 schema.go:756] Created Terraform input: max_session_duration = 3600 (from old default)
<{%reset%}>)
I0621 14:01:00.994449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993509   32316 schema.go:756] Created Terraform input: path = / (from old default)
<{%reset%}>)
I0621 14:01:00.994482   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993536   32316 schema.go:502] Terraform input __defaults = []interface {}{"forceDetachPolicies", "maxSessionDuration", "name", "path"}
<{%reset%}>)
I0621 14:01:00.994507   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993556   32316 schema.go:502] Terraform input assume_role_policy = "{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\"sts:AssumeRole\"],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"Service\": [\"codebuild.amazonaws.com\"]\n\t\t\t}\n\t\t}\n\t]\n}"
<{%reset%}>)
I0621 14:01:00.994552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993574   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2"}
<{%reset%}>)
I0621 14:01:00.994580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993594   32316 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:00.994614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993606   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:00.994639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993616   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:00.994664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.993629   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:00.994688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994191   32316 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:01:00.994720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994214   32316 schema.go:881] Terraform output __defaults = {[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:00.994749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994231   32316 schema.go:881] Terraform output assumeRolePolicy = {{
<{%reset%}>)
I0621 14:01:00.994776   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.994799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.994830   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.994857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.994887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.994910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.994938   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.994961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.994996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:00.995026   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:00.995064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:00.995094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994243   32316 schema.go:881] Terraform output managedPolicyArns = {[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:01:00.995125   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994258   32316 schema.go:881] Terraform output name = {codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.995162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994268   32316 schema.go:881] Terraform output forceDetachPolicies = {false}
<{%reset%}>)
I0621 14:01:00.995193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994279   32316 schema.go:881] Terraform output maxSessionDuration = {3600}
<{%reset%}>)
I0621 14:01:00.995223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994307   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:00.995268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994323   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:00.995296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.995325   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.995196   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:00.995393   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:01:00.995423   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: forceDetachPolicies={false}
I0621 14:01:00.995464   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:01:00.995493   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: maxSessionDuration={3600}
I0621 14:01:00.995518   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: name={codeBuildRole-615d8ed}
I0621 14:01:00.995540   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: path={/}
I0621 14:01:00.995577   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole) success: inputs=#7 failures=#0
I0621 14:01:00.995352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.995625   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed): executing (#olds=16,#news=7)
I0621 14:01:00.995647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.995679   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:00.995714   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
I0621 14:01:00.995747   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: createDate={2023-06-21T12:44:17Z}
I0621 14:01:00.995773   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: description={}
I0621 14:01:00.995798   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: forceDetachPolicies={false}
I0621 14:01:00.995821   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: id={codeBuildRole-615d8ed}
I0621 14:01:00.995849   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: inlinePolicies={[]}
I0621 14:01:00.995882   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
I0621 14:01:00.995913   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: maxSessionDuration={3600}
I0621 14:01:00.995942   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: name={codeBuildRole-615d8ed}
I0621 14:01:00.995967   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: namePrefix={}
I0621 14:01:00.995990   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: path={/}
I0621 14:01:00.996028   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:01:00.996057   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: lastUsedDate={}
I0621 14:01:00.996080   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: region={}
I0621 14:01:00.996107   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: tags={map[]}
I0621 14:01:00.996136   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: tagsAll={map[]}
I0621 14:01:00.996166   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
I0621 14:01:00.996200   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:00.996233   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:01:00.995685   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.996314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.996348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.996372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.996402   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:00.996432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:00.996458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:00.996488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994347   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:00.996558   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994394   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:01:00.996588   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994415   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:00.996607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994432   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.996630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.994466   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: path={/}
<{%reset%}>)
I0621 14:01:00.996263   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: forceDetachPolicies={false}
I0621 14:01:00.996681   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:01:00.996702   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: maxSessionDuration={3600}
I0621 14:01:00.996722   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: name={codeBuildRole-615d8ed}
I0621 14:01:00.996740   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: path={/}
I0621 14:01:00.997504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997450   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:01:00.997685   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997504   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.997737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997548   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:00.997775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997632   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: createDate={2023-06-21T12:44:17Z}
<{%reset%}>)
I0621 14:01:00.997795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997703   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: description={}
<{%reset%}>)
I0621 14:01:00.997823   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997722   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:00.997843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997752   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: id={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.997867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997769   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: inlinePolicies={[]}
<{%reset%}>)
I0621 14:01:00.997886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997797   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
<{%reset%}>)
I0621 14:01:00.997907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997815   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:00.997940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997857   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:00.997960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997883   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: namePrefix={}
<{%reset%}>)
I0621 14:01:00.997980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997898   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:01:00.998003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997916   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: lastUsedDate={}
<{%reset%}>)
I0621 14:01:00.998024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997931   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: region={}
<{%reset%}>)
I0621 14:01:00.998051   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997978   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
<{%reset%}>)
I0621 14:01:00.998098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.997997   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:00.998147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998012   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:00.998185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998024   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
<{%reset%}>)
I0621 14:01:00.998220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998176   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::103429827345:policy/GitPullPolicy2 arn:aws:iam::aws:policy/AWSCodeCommitFullAccess]
<{%reset%}>)
I0621 14:01:00.998253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998214   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:00.998285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998235   32316 schema.go:492] Created Terraform input: unique_id = AROARQFHF5MIT5ZGBFXCO
<{%reset%}>)
I0621 14:01:00.998319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998258   32316 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:01:00.998347   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998276   32316 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:01:00.998379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998312   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:00.998412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998333   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:00.998447   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998375   32316 schema.go:492] Created Terraform input: id = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:00.998475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998425   32316 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:01:00.998503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998465   32316 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:01:00.998543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998524   32316 schema.go:492] Created Terraform input: last_used_date = 
<{%reset%}>)
I0621 14:01:00.998576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998543   32316 schema.go:492] Created Terraform input: region = 
<{%reset%}>)
I0621 14:01:00.998595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998559   32316 schema.go:502] Terraform input region = ""
<{%reset%}>)
I0621 14:01:00.998616   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998571   32316 schema.go:502] Terraform input last_used_date = ""
<{%reset%}>)
I0621 14:01:00.998635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998582   32316 schema.go:492] Created Terraform input: role_last_used = [map[last_used_date: region:]]
<{%reset%}>)
I0621 14:01:00.998672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998617   32316 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:00.998857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998661   32316 schema.go:492] Created Terraform input: assume_role_policy = {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:00.998935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998686   32316 schema.go:492] Created Terraform input: name = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:00.998975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998793   32316 schema.go:492] Created Terraform input: create_date = 2023-06-21T12:44:17Z
<{%reset%}>)
I0621 14:01:00.999015   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998823   32316 schema.go:492] Created Terraform input: inline_policy = []
<{%reset%}>)
I0621 14:01:00.999043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998839   32316 schema.go:502] Terraform input unique_id = "AROARQFHF5MIT5ZGBFXCO"
<{%reset%}>)
I0621 14:01:00.999070   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998851   32316 schema.go:502] Terraform input id = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:00.999096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998860   32316 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:01:00.999133   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998869   32316 schema.go:502] Terraform input assume_role_policy = "{\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"codebuild.amazonaws.com\"]}}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:00.999155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998883   32316 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:00.999178   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998893   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess"}
<{%reset%}>)
I0621 14:01:00.999194   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998913   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.999215   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998950   32316 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:00.999246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998969   32316 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:01:00.999267   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.998982   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:00.999306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999012   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:00.999349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999024   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:00.999383   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999035   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:00.999414   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999045   32316 schema.go:502] Terraform input create_date = "2023-06-21T12:44:17Z"
<{%reset%}>)
I0621 14:01:00.999447   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999056   32316 schema.go:502] Terraform input role_last_used = []interface {}{map[string]interface {}{"last_used_date":"", "region":""}}
<{%reset%}>)
I0621 14:01:00.999478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999076   32316 schema.go:502] Terraform input inline_policy = []interface {}(nil)
<{%reset%}>)
I0621 14:01:00.999513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999262   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:00.999555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999281   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:00.999590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:00.999620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:00.999653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:00.999697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:00.999728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:00.999756   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:00.999788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:00.999936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:00.999986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.000022   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:01.000050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.000087   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999319   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:01.000138   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999395   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:01:01.000177   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999442   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:01.000211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999464   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.000258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999478   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: path={/}
<{%reset%}>)
I0621 14:01:01.000293   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999521   32316 schema.go:492] Created Terraform input: name = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:01.000358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999561   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.000389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999590   32316 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:01:01.000418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.000449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:01:01.000493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:01:01.000523   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:01:01.000557   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.000583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:01:01.000611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:01:01.000640   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:01:01.000670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.000697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:01:01.000727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.000758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999629   32316 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.000797   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999669   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeCommitFullAccess arn:aws:iam::103429827345:policy/GitPullPolicy2]
<{%reset%}>)
I0621 14:01:01.000830   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999720   32316 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.000864   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999735   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.000899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999747   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2"}
<{%reset%}>)
I0621 14:01:01.000934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999780   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.000961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999793   32316 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:01.000991   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999804   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.001053   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:00.999816   32316 schema.go:502] Terraform input assume_role_policy = "{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\"sts:AssumeRole\"],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"Service\": [\"codebuild.amazonaws.com\"]\n\t\t\t}\n\t\t}\n\t]\n}"
<{%reset%}>)
I0621 14:01:01.010322   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed) success: changes=1 #replaces=[] #stables=[name namePrefix path] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:01.010562   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole' after diff (same) (inputs=map[__defaults:{[{forceDetachPolicies} {maxSessionDuration} {name} {path}]} assumeRolePolicy:{{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}} forceDetachPolicies:{false} managedPolicyArns:{[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]} maxSessionDuration:{3600} name:{codeBuildRole-615d8ed} path:{/}])
I0621 14:01:01.010624   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:01:01.010673   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.010703   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.010738   31957 log.go:80] StepExecutor worker(4): launching oneshot worker
I0621 14:01:01.010901   31957 log.go:80] StepExecutor worker(4): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole (preview true)
I0621 14:01:01.011096   31957 log.go:80] StepExecutor worker(4): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole retired
I0621 14:01:01.011151   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:01:01.011214   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/role:Role, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole, #outs=16
I0621 14:01:01.011275   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.011359   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
I0621 14:01:01.011425   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: createDate={2023-06-21T12:44:17Z}
I0621 14:01:01.011452   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: description={}
I0621 14:01:01.011476   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: forceDetachPolicies={false}
I0621 14:01:01.011499   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: id={codeBuildRole-615d8ed}
I0621 14:01:01.011520   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: inlinePolicies={[]}
I0621 14:01:01.011541   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
I0621 14:01:01.011572   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: maxSessionDuration={3600}
I0621 14:01:01.011603   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: name={codeBuildRole-615d8ed}
I0621 14:01:01.011626   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: namePrefix={}
I0621 14:01:01.011646   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: path={/}
I0621 14:01:01.011672   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:01:01.011695   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: lastUsedDate={}
I0621 14:01:01.011714   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: region={}
I0621 14:01:01.011732   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: tags={map[]}
I0621 14:01:01.011789   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: tagsAll={map[]}
I0621 14:01:01.011954   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
I0621 14:01:01.014112   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:01.014193   31957 log.go:80] handling default provider request for package aws
I0621 14:01:01.014267   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:01.014319   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:01.014372   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_ARTIFACTS}
I0621 14:01:01.014415   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifacts={map[type:{NO_ARTIFACTS}]}
I0621 14:01:01.014440   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeEnabled={true}
I0621 14:01:01.014469   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.014499   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.014527   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={LINUX_CONTAINER}
I0621 14:01:01.014566   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
I0621 14:01:01.014589   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={my-codebuild}
I0621 14:01:01.014614   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.014641   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.014701   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.014740   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.014777   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={CODECOMMIT}
I0621 14:01:01.014861   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: source={map[buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:01:01.014904   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:01:01.014935   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.015022   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:codebuild/project:Project, name=my-codebuild, custom=true, #props=8, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:01.015084   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:codebuild/project:Project,name=my-codebuild,#props=8
I0621 14:01:01.015108   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.015125   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:01.015155   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.015191   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild) executing (#olds=11,#news=8)
I0621 14:01:01.015222   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:01:01.015253   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:01:01.015278   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:01:01.015303   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: encryptionDisabled={false}
I0621 14:01:01.015330   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: overrideArtifactName={false}
I0621 14:01:01.015360   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={NO_ARTIFACTS}
I0621 14:01:01.015391   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: badgeEnabled={true}
I0621 14:01:01.015420   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: buildTimeout={60}
I0621 14:01:01.015455   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:01:01.015475   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:01:01.015491   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.015508   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.015523   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: imagePullCredentialsType={CODEBUILD}
I0621 14:01:01.015538   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: privilegedMode={false}
I0621 14:01:01.015554   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={LINUX_CONTAINER}
I0621 14:01:01.015586   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: name={my-codebuild}
I0621 14:01:01.015606   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.015624   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: queuedTimeout={480}
I0621 14:01:01.015643   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.015698   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:01:01.015791   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[]}
I0621 14:01:01.015835   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.015853   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.015870   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={CODECOMMIT}
I0621 14:01:01.015889   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:01:01.015908   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:01:01.015939   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[]}
I0621 14:01:01.015979   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: artifacts={map[type:{NO_ARTIFACTS}]}
I0621 14:01:01.015999   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={NO_ARTIFACTS}
I0621 14:01:01.016014   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: badgeEnabled={true}
I0621 14:01:01.016036   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
I0621 14:01:01.016053   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.016069   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.016085   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={LINUX_CONTAINER}
I0621 14:01:01.016100   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: name={my-codebuild}
I0621 14:01:01.016116   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.016132   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.016169   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: source={map[buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:01:01.016212   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.016234   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.016251   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={CODECOMMIT}
I0621 14:01:01.016268   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.016284   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: ManagedBy={Pulumi}
I0621 14:01:01.017149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.016962   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project) executing
<{%reset%}>)
I0621 14:01:01.017225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017002   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:01:01.017260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017017   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:01:01.017287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017038   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:01:01.017321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017054   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:01:01.017352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017067   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.017388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017098   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.017426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017135   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeEnabled={true}
<{%reset%}>)
I0621 14:01:01.017458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017176   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildTimeout={60}
<{%reset%}>)
I0621 14:01:01.017489   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017199   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:01:01.017558   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017222   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.017599   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017236   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.017657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017249   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:01:01.017698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017262   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: privilegedMode={false}
<{%reset%}>)
I0621 14:01:01.017732   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017274   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.017762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017305   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.017793   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017318   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={my-codebuild}
<{%reset%}>)
I0621 14:01:01.017833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017331   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.017875   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017343   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: queuedTimeout={480}
<{%reset%}>)
I0621 14:01:01.017944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017354   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.018017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017370   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.018255   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017386   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:01:01.018309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.018360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.018415   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.018505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.018659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.018820   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.018870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.018897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.018930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.018955   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.018987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.019030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.019066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.019094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.019125   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.019151   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.019181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.019237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.019280   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.019306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.019334   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.019360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.019454   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.019551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.019611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.019642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.019671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.019699   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.019814   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.019863   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.019896   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.019924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.019952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.019982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.020034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.020095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.020123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.020151   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.020175   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.020206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.020224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.020243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.020260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.020281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.020301   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.020322   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.020340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.020361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.020381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.020400   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.020468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.020516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.020541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.020567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.020587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.020607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.020626   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.020644   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.020661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.020682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017417   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.020714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017441   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.020792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017479   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.020824   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.020845   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.020861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.020880   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.020901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.020964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.020997   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.021024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.021057   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.021087   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.021122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.021152   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.021184   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.021212   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.021253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.021299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.021363   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.021434   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.021465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.021496   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.021522   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.021550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.021575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.021605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.021630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.021660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.021685   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.021713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.021737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.021764   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.021848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.022040   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.022148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.022254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.022286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.022316   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.022344   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.022374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.022401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.022431   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.022451   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:01:01.022520   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:01:01.022549   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: encryptionDisabled={false}
I0621 14:01:01.022575   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: overrideArtifactName={false}
I0621 14:01:01.022621   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={NO_ARTIFACTS}
I0621 14:01:01.022755   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:01:01.022456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.022804   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: badgeEnabled={true}
I0621 14:01:01.022901   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: buildTimeout={60}
I0621 14:01:01.022937   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:01:01.022955   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.022971   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.022987   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: imagePullCredentialsType={CODEBUILD}
I0621 14:01:01.023002   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: privilegedMode={false}
I0621 14:01:01.023019   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={LINUX_CONTAINER}
I0621 14:01:01.023052   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:01:01.023070   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: name={my-codebuild}
I0621 14:01:01.023086   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.023106   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: queuedTimeout={480}
I0621 14:01:01.023122   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.023143   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[]}
I0621 14:01:01.023171   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.023258   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.023339   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={CODECOMMIT}
I0621 14:01:01.022857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.023584   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:01:01.023610   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.023667   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.023709   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.023740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.023771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.023804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.023878   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.023937   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.023994   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.023625   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: ManagedBy={Pulumi}
I0621 14:01:01.024090   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[]}
I0621 14:01:01.024154   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:01:01.024188   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild) success: inputs=#11 failures=#0
I0621 14:01:01.024250   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild): executing (#olds=28,#news=11)
I0621 14:01:01.024290   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.024327   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
I0621 14:01:01.024351   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: artifactIdentifier={}
I0621 14:01:01.024367   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: bucketOwnerAccess={}
I0621 14:01:01.024384   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionDisabled={false}
I0621 14:01:01.024403   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:01:01.024420   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: name={}
I0621 14:01:01.024442   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: namespaceType={}
I0621 14:01:01.024491   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: overrideArtifactName={false}
I0621 14:01:01.024521   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: packaging={}
I0621 14:01:01.024585   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: path={}
I0621 14:01:01.024620   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={NO_ARTIFACTS}
I0621 14:01:01.024041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.024687   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: badgeEnabled={true}
I0621 14:01:01.024811   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
I0621 14:01:01.024835   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildBatchConfig={<nil>}
I0621 14:01:01.024854   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildTimeout={60}
I0621 14:01:01.024877   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
I0621 14:01:01.024896   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:01:01.024913   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: modes={[]}
I0621 14:01:01.024929   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={NO_CACHE}
I0621 14:01:01.024946   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: concurrentBuildLimit={0}
I0621 14:01:01.024962   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: description={}
I0621 14:01:01.024985   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
I0621 14:01:01.025028   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} registryCredential:{<nil>} type:{LINUX_CONTAINER}]}
I0621 14:01:01.025052   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: certificate={}
I0621 14:01:01.025068   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.025085   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: environmentVariables={[]}
I0621 14:01:01.025101   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.025118   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: imagePullCredentialsType={CODEBUILD}
I0621 14:01:01.025133   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: privilegedMode={false}
I0621 14:01:01.025147   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: registryCredential={<nil>}
I0621 14:01:01.025164   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={LINUX_CONTAINER}
I0621 14:01:01.025188   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: fileSystemLocations={[]}
I0621 14:01:01.024753   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.025268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.025306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.025333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.025215   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.025426   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
I0621 14:01:01.025486   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
I0621 14:01:01.025531   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: groupName={}
I0621 14:01:01.025554   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: status={ENABLED}
I0621 14:01:01.025571   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: streamName={}
I0621 14:01:01.025592   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
I0621 14:01:01.025611   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: bucketOwnerAccess={}
I0621 14:01:01.025626   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionDisabled={false}
I0621 14:01:01.025641   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:01:01.025658   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: status={DISABLED}
I0621 14:01:01.025678   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: name={my-codebuild}
I0621 14:01:01.025693   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.025711   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
I0621 14:01:01.025877   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: queuedTimeout={480}
I0621 14:01:01.025902   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: resourceAccessRole={}
I0621 14:01:01.025919   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondaryArtifacts={[]}
I0621 14:01:01.025935   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondarySourceVersions={[]}
I0621 14:01:01.025965   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondarySources={[]}
I0621 14:01:01.025983   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.026023   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: source={map[auth:{<nil>} buildStatusConfig:{<nil>} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} gitCloneDepth:{0} gitSubmodulesConfig:{<nil>} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
I0621 14:01:01.026053   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: auth={<nil>}
I0621 14:01:01.026071   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildStatusConfig={<nil>}
I0621 14:01:01.026095   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.026113   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: gitCloneDepth={0}
I0621 14:01:01.026130   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: gitSubmodulesConfig={<nil>}
I0621 14:01:01.026146   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: insecureSsl={false}
I0621 14:01:01.026162   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.026178   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: reportBuildStatus={false}
I0621 14:01:01.026193   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={CODECOMMIT}
I0621 14:01:01.026211   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: sourceVersion={}
I0621 14:01:01.026228   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.026244   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:01:01.026263   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: tagsAll={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.026288   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:01:01.026352   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: vpcConfig={<nil>}
I0621 14:01:01.025365   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.026386   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:01:01.026471   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:01:01.026493   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:01:01.026509   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: encryptionDisabled={false}
I0621 14:01:01.026526   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: overrideArtifactName={false}
I0621 14:01:01.026543   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={NO_ARTIFACTS}
I0621 14:01:01.026558   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: badgeEnabled={true}
I0621 14:01:01.026576   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: buildTimeout={60}
I0621 14:01:01.026600   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:01:01.026618   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:01:01.026635   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.026654   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.026671   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: imagePullCredentialsType={CODEBUILD}
I0621 14:01:01.026686   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: privilegedMode={false}
I0621 14:01:01.026700   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={LINUX_CONTAINER}
I0621 14:01:01.026717   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: name={my-codebuild}
I0621 14:01:01.026735   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.026751   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: queuedTimeout={480}
I0621 14:01:01.026767   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.026798   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:01:01.026820   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[]}
I0621 14:01:01.026867   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.026912   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.026931   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={CODECOMMIT}
I0621 14:01:01.026954   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:01:01.026972   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: ManagedBy={Pulumi}
I0621 14:01:01.026987   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[]}
I0621 14:01:01.026424   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.027349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.027378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017510   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.027396   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017533   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.027481   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017554   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:01:01.027514   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017571   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.027541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017587   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: artifacts={map[type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.027559   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017598   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: badgeEnabled={true}
<{%reset%}>)
I0621 14:01:01.027595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017610   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.027622   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017622   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.027643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017633   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.027664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017675   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.027684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017692   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: name={my-codebuild}
<{%reset%}>)
I0621 14:01:01.027701   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017707   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.027723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017720   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.027744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017757   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:01:01.027776   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.027796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.027813   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.027830   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.027848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.027864   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.027882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.027902   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.027924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.027940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.027981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.028032   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.028067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.028100   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.028134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.028153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.028173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.028192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.028211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.028229   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.028247   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.028262   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.028280   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.028298   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.028317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.028334   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.028353   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.028370   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.028389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.028405   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.028424   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.028439   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.028459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.028476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.028495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.028595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.028630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.028652   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.028667   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.028686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.028705   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.028734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.028754   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.028773   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.028796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.028815   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.028836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.028860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.028881   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.028897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.028916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.028933   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.028952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.028968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.028990   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.029006   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.029025   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.029041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.029059   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.029076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017775   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.029286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017787   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.029360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017824   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: source={map[buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.029421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.029479   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.029509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.029548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.029575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.029604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.029623   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.029639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.029658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.029674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.029692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.029708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.029726   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.029743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.029760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.029782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.029868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.029924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.029990   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.030035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.030058   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.030074   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.030092   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.030113   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.030138   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.030159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.030176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.030193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.030208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.030226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.030244   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.030263   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.030278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.030297   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.030316   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.030366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.030401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.030435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.030480   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.030504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.030524   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.030541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.030560   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.030578   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.030598   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.030617   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.030637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.030656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.030688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.030716   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.030742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.030759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.030777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.030794   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.030813   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.030829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.030850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.030867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.030917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.030989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017849   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.031027   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.017867   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: tags={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:01:01.031058   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018055   32316 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:01:01.031084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.031115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.031143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.031174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.031199   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.031226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.031255   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.031282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.031312   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.031339   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.031367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.031395   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.031428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.031462   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.031497   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.031548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.031581   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.031612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.031645   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.031675   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.031708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.031734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.031765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.031799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.031839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.031879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.031908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.031945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.031982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.032019   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.032048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.032074   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.032103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.032135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.032164   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.032189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.032218   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.032243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.032272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.032299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.032329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.032352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.032382   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.032411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.032446   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.032475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.032506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.032539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.032570   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.032604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.032630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.032688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.032718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.032750   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.032780   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.032813   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.032842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.032870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.032898   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018093   32316 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:01.032930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018154   32316 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:01:01.032958   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018198   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:01.033027   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018216   32316 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:01:01.033099   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018333   32316 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:01.033131   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018352   32316 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:01:01.033159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018404   32316 schema.go:492] Created Terraform input: source = [map[__defaults:[] buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:01:01.033190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.033217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.033245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.033271   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.033305   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.033331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.033358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.033385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.033415   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.033444   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.033475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.033502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.033531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.033557   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.033587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.033617   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.033672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.033724   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.033748   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.033765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.033783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.033799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.033818   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.033834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.033852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.033873   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.033973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.033996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.034015   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.034031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.034049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.034065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.034082   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.034098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.034116   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.034132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.034153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.034178   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.034208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.034233   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.034259   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.034277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.034296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.034314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.034333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.034351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.034371   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.034388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.034408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.034427   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.034448   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.034463   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.034481   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.034503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.034542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.034569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.034589   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.034606   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.034629   31957 log.go:80] eventSink::Infoerr(<{%reset%}> location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 type:CODECOMMIT]]
<{%reset%}>)
I0621 14:01:01.034655   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018460   32316 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:01:01.034683   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018483   32316 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:01:01.034728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018496   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:01.034758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018509   32316 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi __defaults:[]]
<{%reset%}>)
I0621 14:01:01.034788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018718   32316 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:01:01.034814   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018792   32316 schema.go:756] Created Terraform input: override_artifact_name = false (from old default)
<{%reset%}>)
I0621 14:01:01.034857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018820   32316 schema.go:756] Created Terraform input: encryption_disabled = false (from old default)
<{%reset%}>)
I0621 14:01:01.034885   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018842   32316 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:01:01.034915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018855   32316 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:01:01.034942   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018867   32316 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.034969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018891   32316 schema.go:502] Terraform input __defaults = []interface {}{"encryptionDisabled", "overrideArtifactName"}
<{%reset%}>)
I0621 14:01:01.035001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.018912   32316 schema.go:492] Created Terraform input: artifacts = [map[__defaults:[encryptionDisabled overrideArtifactName] encryption_disabled:false override_artifact_name:false type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:01:01.035029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019217   32316 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:01:01.035062   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019369   32316 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:01:01.035089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019390   32316 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:01:01.035117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019421   32316 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:01:01.035143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019455   32316 schema.go:756] Created Terraform input: image_pull_credentials_type = CODEBUILD (from old default)
<{%reset%}>)
I0621 14:01:01.035207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019472   32316 schema.go:756] Created Terraform input: privileged_mode = false (from old default)
<{%reset%}>)
I0621 14:01:01.035247   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019487   32316 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:01:01.035295   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019501   32316 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:01:01.035330   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019511   32316 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:01:01.035361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019524   32316 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:01:01.035379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019536   32316 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:01:01.035398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019548   32316 schema.go:502] Terraform input __defaults = []interface {}{"imagePullCredentialsType", "privilegedMode"}
<{%reset%}>)
I0621 14:01:01.035418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019566   32316 schema.go:492] Created Terraform input: environment = [map[__defaults:[imagePullCredentialsType privilegedMode] compute_type:BUILD_GENERAL1_SMALL image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:01:01.035438   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019594   32316 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:01:01.035505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019668   32316 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:01:01.035531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019720   32316 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:01.035548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019772   32316 schema.go:756] Created Terraform input: queued_timeout = 480 (from old default)
<{%reset%}>)
I0621 14:01:01.035567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019829   32316 schema.go:756] Created Terraform input: build_timeout = 60 (from old default)
<{%reset%}>)
I0621 14:01:01.035584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019850   32316 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:01.035602   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019865   32316 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:01:01.035618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019877   32316 schema.go:502] Terraform input __defaults = []interface {}{"buildTimeout", "queuedTimeout"}
<{%reset%}>)
I0621 14:01:01.035670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.019893   32316 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"__defaults":[]interface {}{}, "buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:01:01.035720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020018   32316 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"__defaults":[]interface {}{"imagePullCredentialsType", "privilegedMode"}, "compute_type":"BUILD_GENERAL1_SMALL", "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:01:01.035762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020073   32316 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:01:01.035796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020086   32316 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:01:01.035833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020096   32316 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:01:01.035925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020107   32316 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi", "__defaults":[]interface {}{}}
<{%reset%}>)
I0621 14:01:01.036000   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020124   32316 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"__defaults":[]interface {}{"encryptionDisabled", "overrideArtifactName"}, "encryption_disabled":false, "override_artifact_name":false, "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:01:01.036042   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020146   32316 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:01:01.036078   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020480   32316 schema.go:881] Terraform output ManagedBy = {Pulumi}
<{%reset%}>)
I0621 14:01:01.036108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020500   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:01.036143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020524   32316 schema.go:881] Terraform output type = {NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.036174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020532   32316 schema.go:881] Terraform output overrideArtifactName = {false}
<{%reset%}>)
I0621 14:01:01.036207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020538   32316 schema.go:881] Terraform output encryptionDisabled = {false}
<{%reset%}>)
I0621 14:01:01.036237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020545   32316 schema.go:881] Terraform output __defaults = {[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:01:01.036269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020569   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:01.036297   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020577   32316 schema.go:881] Terraform output buildspec = {# buildspec.yml
<{%reset%}>)
I0621 14:01:01.036327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.036355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.036384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.036413   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.036450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.036482   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.036510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.036537   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.036564   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.036586   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.036605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.036626   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.036643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.036661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.036677   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.036695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.036713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.036731   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.036749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.036771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.036798   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.036822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.036840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.036875   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.036890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.036913   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.036930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.036949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.036964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.036989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.037020   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.037050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.037075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.037101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.037119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.037136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.037152   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.037186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.037202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.037220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.037236   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.037254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.037271   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.037291   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.037321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.037385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.037428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.037448   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.037475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.037513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.037551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.037594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.037624   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.037654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.037682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.037712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.037757   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.037822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.037973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.038036   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020607   32316 schema.go:881] Terraform output location = {https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.038097   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020623   32316 schema.go:881] Terraform output type = {CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.038254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020651   32316 schema.go:881] Terraform output computeType = {BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.038329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020659   32316 schema.go:881] Terraform output imagePullCredentialsType = {CODEBUILD}
<{%reset%}>)
I0621 14:01:01.038361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020673   32316 schema.go:881] Terraform output privilegedMode = {false}
<{%reset%}>)
I0621 14:01:01.038394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020681   32316 schema.go:881] Terraform output __defaults = {[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:01:01.038422   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020688   32316 schema.go:881] Terraform output image = {aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.038476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020695   32316 schema.go:881] Terraform output type = {LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.038538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020714   32316 schema.go:881] Terraform output buildTimeout = {60}
<{%reset%}>)
I0621 14:01:01.038598   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020734   32316 schema.go:881] Terraform output artifacts = {map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.038620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020776   32316 schema.go:881] Terraform output badgeEnabled = {true}
<{%reset%}>)
I0621 14:01:01.038650   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020786   32316 schema.go:881] Terraform output serviceRole = {arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.038672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020806   32316 schema.go:881] Terraform output __defaults = {[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:01:01.038697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020820   32316 schema.go:881] Terraform output source = {map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.038744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.038787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.038815   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.038852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.038888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.038918   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.038944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.038963   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.039004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.039023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.039040   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.039076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.039093   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.039111   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.039128   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.039145   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.039162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.039182   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.039198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.039217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.039233   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.039250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.039265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.039286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.039328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.039362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.039388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.039405   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.039423   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.039438   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.039457   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.039473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.039493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.039516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.039537   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.039553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.039573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.039588   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.039609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.039637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.039670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.039688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.039707   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.039724   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.039745   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.039762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.039781   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.039799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.039833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.039874   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.039910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.039945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.039974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.040004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.040033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.040061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.040090   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.040123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.040152   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.040191   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020864   32316 schema.go:881] Terraform output environment = {map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.040227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020913   32316 schema.go:881] Terraform output name = {my-codebuild}
<{%reset%}>)
I0621 14:01:01.040264   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020926   32316 schema.go:881] Terraform output queuedTimeout = {480}
<{%reset%}>)
I0621 14:01:01.040293   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020938   32316 schema.go:881] Terraform output projectVisibility = {PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.040328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.020950   32316 schema.go:881] Terraform output tags = {map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:01:01.040358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021036   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:01:01.040395   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021077   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.040432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021100   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:01:01.040466   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021124   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:01:01.040499   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021139   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:01:01.040530   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021159   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.040564   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021175   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: badgeEnabled={true}
<{%reset%}>)
I0621 14:01:01.040594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021193   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: buildTimeout={60}
<{%reset%}>)
I0621 14:01:01.040639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021218   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.040674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021258   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:01:01.040712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021300   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.040741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021320   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.040777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021333   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:01:01.040809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021363   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: privilegedMode={false}
<{%reset%}>)
I0621 14:01:01.040844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021381   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.040875   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021413   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: name={my-codebuild}
<{%reset%}>)
I0621 14:01:01.040912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021427   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.040945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021459   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: queuedTimeout={480}
<{%reset%}>)
I0621 14:01:01.041004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021474   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.041054   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021520   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.041077   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.041095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.041121   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.041142   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.041162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.041178   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.041195   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.041211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.041229   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.041250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.041268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.041285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.041310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.041333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.041362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.041386   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.041416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.041441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.041469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.041492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.041527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.041572   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.041602   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.041627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.041655   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.041700   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.041734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.041761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.041789   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.041816   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.041845   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.041870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.041896   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.041921   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.041949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.041973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.042001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.042031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.042072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.042109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.042138   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.042162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.042189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.042220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.042247   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.042269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.042286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.042306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.042323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.042341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.042358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.042376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.042391   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.042409   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.042427   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.042446   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.042462   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.042481   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.042497   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.042517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021579   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.042539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021597   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:01:01.042561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.042577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.042597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.042618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.042667   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.042729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.042765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.042800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.042828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.042862   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.042891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.042920   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.042949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.042981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.043009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.043039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.043068   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.043115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.043150   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.043198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.043227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.043256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.043282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.043315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.043343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.043373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.043398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.043450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.043477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.043506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.043535   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.043563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.043603   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.043662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.043702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.043749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.043791   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.043825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.043853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.043883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.043911   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.043967   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.044030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.044066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.044095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.044128   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.044155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.044189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.044221   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.044260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.044341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.044401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.044440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.044512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.044587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.044626   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.044656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.044692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.044723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.044754   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021611   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.044784   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021622   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.044817   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021638   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:01:01.044844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021653   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.044867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.021664   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.044893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027874   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project) executing
<{%reset%}>)
I0621 14:01:01.044917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027912   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.044951   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027933   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifactIdentifier={}
<{%reset%}>)
I0621 14:01:01.045004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027945   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: bucketOwnerAccess={}
<{%reset%}>)
I0621 14:01:01.045032   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027954   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:01:01.045060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027962   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:01:01.045081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027973   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={}
<{%reset%}>)
I0621 14:01:01.045098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027982   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: namespaceType={}
<{%reset%}>)
I0621 14:01:01.045192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.027994   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:01:01.045219   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028059   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: packaging={}
<{%reset%}>)
I0621 14:01:01.045238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028074   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: path={}
<{%reset%}>)
I0621 14:01:01.045276   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028106   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.045307   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028162   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.045329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028172   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeEnabled={true}
<{%reset%}>)
I0621 14:01:01.045348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028183   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
<{%reset%}>)
I0621 14:01:01.045369   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028191   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildBatchConfig={<nil>}
<{%reset%}>)
I0621 14:01:01.045387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028225   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildBatchConfig is null
<{%reset%}>)
I0621 14:01:01.045407   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028235   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildTimeout={60}
<{%reset%}>)
I0621 14:01:01.045425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028244   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:01:01.045442   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028259   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: modes={[]}
<{%reset%}>)
I0621 14:01:01.045463   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028267   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_CACHE}
<{%reset%}>)
I0621 14:01:01.045497   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028292   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
<{%reset%}>)
I0621 14:01:01.045528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028301   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: concurrentBuildLimit={0}
<{%reset%}>)
I0621 14:01:01.045556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028309   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: description={}
<{%reset%}>)
I0621 14:01:01.045576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028316   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
<{%reset%}>)
I0621 14:01:01.045595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028327   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: certificate={}
<{%reset%}>)
I0621 14:01:01.045627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028335   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.045647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028349   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environmentVariables={[]}
<{%reset%}>)
I0621 14:01:01.045666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028358   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.045684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028370   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:01:01.045704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028383   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: privilegedMode={false}
<{%reset%}>)
I0621 14:01:01.045722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028395   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: registryCredential={<nil>}
<{%reset%}>)
I0621 14:01:01.045741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028404   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: registryCredential is null
<{%reset%}>)
I0621 14:01:01.045761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028411   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.045783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028428   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.045801   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028437   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: fileSystemLocations={[]}
<{%reset%}>)
I0621 14:01:01.045821   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028444   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.045846   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028464   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: groupName={}
<{%reset%}>)
I0621 14:01:01.045867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028473   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: status={ENABLED}
<{%reset%}>)
I0621 14:01:01.045883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028481   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: streamName={}
<{%reset%}>)
I0621 14:01:01.045905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028492   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
<{%reset%}>)
I0621 14:01:01.045925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028501   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: bucketOwnerAccess={}
<{%reset%}>)
I0621 14:01:01.045946   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028509   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:01:01.045963   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028524   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:01:01.045986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028536   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: status={DISABLED}
<{%reset%}>)
I0621 14:01:01.046006   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028572   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
<{%reset%}>)
I0621 14:01:01.046031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028625   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
<{%reset%}>)
I0621 14:01:01.046090   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028643   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={my-codebuild}
<{%reset%}>)
I0621 14:01:01.046125   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028678   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.046188   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028716   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
<{%reset%}>)
I0621 14:01:01.046216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028741   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: queuedTimeout={480}
<{%reset%}>)
I0621 14:01:01.046235   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028755   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: resourceAccessRole={}
<{%reset%}>)
I0621 14:01:01.046253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028776   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondaryArtifacts={[]}
<{%reset%}>)
I0621 14:01:01.046277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028792   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondarySourceVersions={[]}
<{%reset%}>)
I0621 14:01:01.046296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028801   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondarySources={[]}
<{%reset%}>)
I0621 14:01:01.046316   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028809   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.046337   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028820   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: auth={<nil>}
<{%reset%}>)
I0621 14:01:01.046359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028827   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: auth is null
<{%reset%}>)
I0621 14:01:01.046380   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028833   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildStatusConfig={<nil>}
<{%reset%}>)
I0621 14:01:01.046400   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028840   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildStatusConfig is null
<{%reset%}>)
I0621 14:01:01.046419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028855   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:01:01.046436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.046456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.046473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.046493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.046509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.046527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.046543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.046561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.046577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.046609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.046646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.046667   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.046684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.046703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.046721   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.046739   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.046755   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.046775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.046792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.046811   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.046825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.046843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.046859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.046880   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.046897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.046918   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.046936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.046954   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.046969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.046987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.047003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.047022   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.047037   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.047056   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.047073   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.047089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.047105   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.047124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.047150   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.047189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.047218   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.047244   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.047270   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.047300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.047323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.047341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.047359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.047376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.047401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.047419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.047437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.047456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.047475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.047492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.047511   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.047528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.047545   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.047562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.047580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.047597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028867   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitCloneDepth={0}
<{%reset%}>)
I0621 14:01:01.047620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028874   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitSubmodulesConfig={<nil>}
<{%reset%}>)
I0621 14:01:01.047638   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028880   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitSubmodulesConfig is null
<{%reset%}>)
I0621 14:01:01.047657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028892   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: insecureSsl={false}
<{%reset%}>)
I0621 14:01:01.047675   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028900   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.047709   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028907   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: reportBuildStatus={false}
<{%reset%}>)
I0621 14:01:01.047758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028914   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.047797   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028937   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: source={map[buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.047815   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.047834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.047849   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.047870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.047888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.047907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.047925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.047943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.047960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.047977   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.047994   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.048013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.048030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.048047   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.048065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.048084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.048101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.048118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.048137   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.048155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.048171   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.048187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.048204   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.048222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.048239   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.048258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.048274   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.048292   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.048307   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.048325   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.048340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.048359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.048374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.048392   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.048408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.048426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.048441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.048465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.048484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.048504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.048521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.048540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.048558   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.048576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.048595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.048614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.048631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.048649   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.048666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.048686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.048722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.048757   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.048783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.048802   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.048822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.048839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.048858   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.048876   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.048894   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} gitCloneDepth:{0} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.048912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028947   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: sourceVersion={}
<{%reset%}>)
I0621 14:01:01.048931   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.028956   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.048952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030739   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tags={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:01:01.048974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030759   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.048993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030770   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tagsAll={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:01:01.049013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030778   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: vpcConfig={<nil>}
<{%reset%}>)
I0621 14:01:01.049031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030784   32316 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: vpcConfig is null
<{%reset%}>)
I0621 14:01:01.049050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030845   32316 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.049067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030882   32316 schema.go:492] Created Terraform input: artifact_identifier = 
<{%reset%}>)
I0621 14:01:01.049090   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030919   32316 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.049107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030941   32316 schema.go:492] Created Terraform input: name = 
<{%reset%}>)
I0621 14:01:01.049126   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030952   32316 schema.go:492] Created Terraform input: packaging = 
<{%reset%}>)
I0621 14:01:01.049149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030969   32316 schema.go:492] Created Terraform input: bucket_owner_access = 
<{%reset%}>)
I0621 14:01:01.049169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.030999   32316 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:01:01.049184   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031037   32316 schema.go:492] Created Terraform input: namespace_type = 
<{%reset%}>)
I0621 14:01:01.049203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031057   32316 schema.go:492] Created Terraform input: override_artifact_name = false
<{%reset%}>)
I0621 14:01:01.049220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031076   32316 schema.go:492] Created Terraform input: path = 
<{%reset%}>)
I0621 14:01:01.049239   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031088   32316 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:01:01.049256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031179   32316 schema.go:502] Terraform input namespace_type = ""
<{%reset%}>)
I0621 14:01:01.049277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031198   32316 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:01:01.049296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031206   32316 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.049317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031213   32316 schema.go:502] Terraform input name = ""
<{%reset%}>)
I0621 14:01:01.049333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031219   32316 schema.go:502] Terraform input packaging = ""
<{%reset%}>)
I0621 14:01:01.049352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031231   32316 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:01:01.049368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031238   32316 schema.go:502] Terraform input artifact_identifier = ""
<{%reset%}>)
I0621 14:01:01.049387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031245   32316 schema.go:502] Terraform input bucket_owner_access = ""
<{%reset%}>)
I0621 14:01:01.049403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031251   32316 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:01:01.049423   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031257   32316 schema.go:502] Terraform input path = ""
<{%reset%}>)
I0621 14:01:01.049441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031265   32316 schema.go:492] Created Terraform input: artifacts = [map[artifact_identifier: bucket_owner_access: encryption_disabled:false location: name: namespace_type: override_artifact_name:false packaging: path: type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:01:01.049459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031327   32316 schema.go:492] Created Terraform input: file_system_locations = []
<{%reset%}>)
I0621 14:01:01.049476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031374   32316 schema.go:492] Created Terraform input: id = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.049495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031415   32316 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:01:01.049513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031431   32316 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:01:01.049530   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031442   32316 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:01:01.049561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.031479   32316 schema.go:492] Created Terraform input: badge_url = https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main
<{%reset%}>)
I0621 14:01:01.049584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032775   32316 schema.go:492] Created Terraform input: build_timeout = 60
<{%reset%}>)
I0621 14:01:01.049601   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032830   32316 schema.go:492] Created Terraform input: concurrent_build_limit = 0
<{%reset%}>)
I0621 14:01:01.049620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032848   32316 schema.go:492] Created Terraform input: resource_access_role = 
<{%reset%}>)
I0621 14:01:01.049635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032878   32316 schema.go:492] Created Terraform input: secondary_artifacts = []
<{%reset%}>)
I0621 14:01:01.049654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032912   32316 schema.go:492] Created Terraform input: secondary_source_version = []
<{%reset%}>)
I0621 14:01:01.049671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032945   32316 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:01:01.049697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.049741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.049766   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.049783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.049800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.049816   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.049835   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.049852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.049869   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.049886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.049905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.049922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.049941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.049956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.049976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.049991   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.050011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.050028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.050047   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.050064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.050080   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.050096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.050115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.050132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.050149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.050166   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.050190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.050207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.050223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.050241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.050258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.050274   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.050292   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.050309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.050328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.050350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.050372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.050387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.050405   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.050422   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.050440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.050455   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.050474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.050491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.050511   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.050527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.050547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.050564   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.050584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.050601   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.050622   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.050639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.050657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.050674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.050700   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.050732   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.050760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.050785   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.050817   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032964   32316 schema.go:492] Created Terraform input: git_clone_depth = 0
<{%reset%}>)
I0621 14:01:01.050836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.032977   32316 schema.go:492] Created Terraform input: insecure_ssl = false
<{%reset%}>)
I0621 14:01:01.050860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033005   32316 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:01.050879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033134   32316 schema.go:492] Created Terraform input: report_build_status = false
<{%reset%}>)
I0621 14:01:01.050898   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033154   32316 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:01:01.050915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033167   32316 schema.go:502] Terraform input git_clone_depth = 0
<{%reset%}>)
I0621 14:01:01.050934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033175   32316 schema.go:502] Terraform input insecure_ssl = false
<{%reset%}>)
I0621 14:01:01.050950   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033181   32316 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:01.050969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033189   32316 schema.go:502] Terraform input report_build_status = false
<{%reset%}>)
I0621 14:01:01.050984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033196   32316 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:01:01.051020   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033202   32316 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:01:01.051049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.033276   32316 schema.go:492] Created Terraform input: source = [map[buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:01:01.051068   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.051085   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.051103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.051119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.051136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.051152   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.051169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.051185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.051202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.051220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.051239   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.051256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.051273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.051289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.051308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.051324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.051343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.051360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.051382   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.051398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.051417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.051432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.051451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.051467   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.051487   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.051504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.051527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.051546   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.051563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.051579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.051597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.051614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.051630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.051646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.051664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.051682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.051707   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.051738   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.051757   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.051776   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.051792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.051811   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.051828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.051847   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.051865   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.051884   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.051901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.051918   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.051936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.051955   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.051973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.051992   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.052010   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.052029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.052136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.052160   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.052179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.052199   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.052215   31957 log.go:80] eventSink::Infoerr(<{%reset%}> git_clone_depth:0 insecure_ssl:false location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 report_build_status:false type:CODECOMMIT]]
<{%reset%}>)
I0621 14:01:01.052235   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.034973   32316 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:01:01.052251   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035000   32316 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:01:01.052272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035018   32316 schema.go:492] Created Terraform input: tags_all = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:01:01.052289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035155   32316 schema.go:492] Created Terraform input: modes = []
<{%reset%}>)
I0621 14:01:01.052308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035195   32316 schema.go:492] Created Terraform input: type = NO_CACHE
<{%reset%}>)
I0621 14:01:01.052323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035222   32316 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:01:01.052345   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035237   32316 schema.go:502] Terraform input type = "NO_CACHE"
<{%reset%}>)
I0621 14:01:01.052361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035254   32316 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:01:01.052381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035274   32316 schema.go:502] Terraform input modes = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.052398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035306   32316 schema.go:492] Created Terraform input: cache = [map[location: modes:[] type:NO_CACHE]]
<{%reset%}>)
I0621 14:01:01.052416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035332   32316 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:01:01.052433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035708   32316 schema.go:492] Created Terraform input: encryption_key = arn:aws:kms:eu-west-1:103429827345:alias/aws/s3
<{%reset%}>)
I0621 14:01:01.052451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035755   32316 schema.go:492] Created Terraform input: certificate = 
<{%reset%}>)
I0621 14:01:01.052470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035779   32316 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:01:01.052488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035848   32316 schema.go:492] Created Terraform input: environment_variable = []
<{%reset%}>)
I0621 14:01:01.052505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035866   32316 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:01:01.052529   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035891   32316 schema.go:492] Created Terraform input: image_pull_credentials_type = CODEBUILD
<{%reset%}>)
I0621 14:01:01.052546   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035910   32316 schema.go:492] Created Terraform input: privileged_mode = false
<{%reset%}>)
I0621 14:01:01.052567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.035938   32316 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:01:01.052587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036007   32316 schema.go:502] Terraform input certificate = ""
<{%reset%}>)
I0621 14:01:01.052607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036023   32316 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:01:01.052623   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036036   32316 schema.go:502] Terraform input environment_variable = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.052642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036050   32316 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:01:01.052659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036063   32316 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:01:01.052678   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036086   32316 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:01:01.052693   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036099   32316 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:01:01.052735   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036113   32316 schema.go:492] Created Terraform input: environment = [map[certificate: compute_type:BUILD_GENERAL1_SMALL environment_variable:[] image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:01:01.052759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036144   32316 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:01:01.052777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036179   32316 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:01:01.052801   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036216   32316 schema.go:492] Created Terraform input: public_project_alias = eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9
<{%reset%}>)
I0621 14:01:01.052820   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036250   32316 schema.go:492] Created Terraform input: queued_timeout = 480
<{%reset%}>)
I0621 14:01:01.052838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036324   32316 schema.go:492] Created Terraform input: secondary_sources = []
<{%reset%}>)
I0621 14:01:01.052855   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036365   32316 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:01.052874   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036450   32316 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:01:01.052890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036509   32316 schema.go:492] Created Terraform input: status = DISABLED
<{%reset%}>)
I0621 14:01:01.052909   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036544   32316 schema.go:492] Created Terraform input: bucket_owner_access = 
<{%reset%}>)
I0621 14:01:01.052925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036605   32316 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.052943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036628   32316 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:01:01.052965   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036641   32316 schema.go:502] Terraform input bucket_owner_access = ""
<{%reset%}>)
I0621 14:01:01.052986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036653   32316 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.053003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036663   32316 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:01:01.053022   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036673   32316 schema.go:502] Terraform input status = "DISABLED"
<{%reset%}>)
I0621 14:01:01.053039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036686   32316 schema.go:492] Created Terraform input: s3_logs = [map[bucket_owner_access: encryption_disabled:false location: status:DISABLED]]
<{%reset%}>)
I0621 14:01:01.053058   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036743   32316 schema.go:492] Created Terraform input: stream_name = 
<{%reset%}>)
I0621 14:01:01.053074   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036760   32316 schema.go:492] Created Terraform input: group_name = 
<{%reset%}>)
I0621 14:01:01.053095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036773   32316 schema.go:492] Created Terraform input: status = ENABLED
<{%reset%}>)
I0621 14:01:01.053111   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036783   32316 schema.go:502] Terraform input stream_name = ""
<{%reset%}>)
I0621 14:01:01.053128   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036793   32316 schema.go:502] Terraform input group_name = ""
<{%reset%}>)
I0621 14:01:01.053145   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036803   32316 schema.go:502] Terraform input status = "ENABLED"
<{%reset%}>)
I0621 14:01:01.053163   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036813   32316 schema.go:492] Created Terraform input: cloudwatch_logs = [map[group_name: status:ENABLED stream_name:]]
<{%reset%}>)
I0621 14:01:01.053183   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036830   32316 schema.go:502] Terraform input s3_logs = []interface {}{map[string]interface {}{"bucket_owner_access":"", "encryption_disabled":false, "location":"", "status":"DISABLED"}}
<{%reset%}>)
I0621 14:01:01.053201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036882   32316 schema.go:502] Terraform input cloudwatch_logs = []interface {}{map[string]interface {}{"group_name":"", "status":"ENABLED", "stream_name":""}}
<{%reset%}>)
I0621 14:01:01.053225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036900   32316 schema.go:492] Created Terraform input: logs_config = [map[cloudwatch_logs:[map[group_name: status:ENABLED stream_name:]] s3_logs:[map[bucket_owner_access: encryption_disabled:false location: status:DISABLED]]]]
<{%reset%}>)
I0621 14:01:01.053247   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036956   32316 schema.go:492] Created Terraform input: source_version = 
<{%reset%}>)
I0621 14:01:01.053265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.036970   32316 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"artifact_identifier":"", "bucket_owner_access":"", "encryption_disabled":false, "location":"", "name":"", "namespace_type":"", "override_artifact_name":false, "packaging":"", "path":"", "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:01:01.053285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037010   32316 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:01:01.053304   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037049   32316 schema.go:502] Terraform input badge_url = "https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main"
<{%reset%}>)
I0621 14:01:01.053326   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037071   32316 schema.go:502] Terraform input concurrent_build_limit = 0
<{%reset%}>)
I0621 14:01:01.053344   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037084   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:01:01.053364   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037100   32316 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:01:01.053383   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037111   32316 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:01:01.053402   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037123   32316 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:01:01.053419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037134   32316 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.053437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037186   32316 schema.go:502] Terraform input file_system_locations = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.053454   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037199   32316 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:01:01.053476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037208   32316 schema.go:502] Terraform input public_project_alias = "eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9"
<{%reset%}>)
I0621 14:01:01.053494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037236   32316 schema.go:502] Terraform input id = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.053513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037250   32316 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:01:01.053530   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037260   32316 schema.go:502] Terraform input resource_access_role = ""
<{%reset%}>)
I0621 14:01:01.053550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037270   32316 schema.go:502] Terraform input secondary_artifacts = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.053567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.037978   32316 schema.go:502] Terraform input secondary_source_version = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.053587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038033   32316 schema.go:502] Terraform input cache = []interface {}{map[string]interface {}{"location":"", "modes":[]interface {}(nil), "type":"NO_CACHE"}}
<{%reset%}>)
I0621 14:01:01.053605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038201   32316 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:01:01.053626   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038220   32316 schema.go:502] Terraform input secondary_sources = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.053644   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038231   32316 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:01.053663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038245   32316 schema.go:502] Terraform input logs_config = []interface {}{map[string]interface {}{"cloudwatch_logs":[]interface {}{map[string]interface {}{"group_name":"", "status":"ENABLED", "stream_name":""}}, "s3_logs":[]interface {}{map[string]interface {}{"bucket_owner_access":"", "encryption_disabled":false, "location":"", "status":"DISABLED"}}}}
<{%reset%}>)
I0621 14:01:01.053684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038285   32316 schema.go:502] Terraform input source_version = ""
<{%reset%}>)
I0621 14:01:01.053759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.038302   32316 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "git_clone_depth":0, "insecure_ssl":false, "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "report_build_status":false, "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:01:01.053824   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.039909   32316 schema.go:502] Terraform input encryption_key = "arn:aws:kms:eu-west-1:103429827345:alias/aws/s3"
<{%reset%}>)
I0621 14:01:01.053851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.039937   32316 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"certificate":"", "compute_type":"BUILD_GENERAL1_SMALL", "environment_variable":[]interface {}(nil), "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:01:01.053886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.040873   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:01:01.053909   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.040906   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:01:01.053929   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.040922   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:01:01.053964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.040936   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:01:01.053985   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.040948   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:01:01.054003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041015   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:01:01.054023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041036   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: badgeEnabled={true}
<{%reset%}>)
I0621 14:01:01.054041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041054   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildTimeout={60}
<{%reset%}>)
I0621 14:01:01.054060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041070   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:01:01.054078   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041079   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:01:01.054098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041086   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:01:01.054117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041093   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:01:01.054142   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041101   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: privilegedMode={false}
<{%reset%}>)
I0621 14:01:01.054161   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041108   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:01:01.054190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041124   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:01:01.054214   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041145   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: name={my-codebuild}
<{%reset%}>)
I0621 14:01:01.054234   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041153   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:01:01.054252   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041161   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: queuedTimeout={480}
<{%reset%}>)
I0621 14:01:01.054290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041168   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:01:01.054310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041184   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.054328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041208   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:01:01.054348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.054367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.054384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.054401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.054417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.054435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.054452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.054470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.054489   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.054510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.054526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.054548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.054565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.054584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.054600   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.054619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.054636   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.054655   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.054672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.054690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.054728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.054758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.054782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.054802   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.054818   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.054838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.054854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.054874   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.054890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.054908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.054923   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.054941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.054957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.054976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.054991   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.055012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.055030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.055048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.055064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.055084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.055110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.055132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.055157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.055197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.055229   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.055261   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.055280   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.055300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.055318   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.055337   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.055354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.055378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.055405   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.055450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.055481   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.055503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.055519   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.055538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.055554   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.055574   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041730   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:01:01.055592   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041752   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:01:01.055611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.041821   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:01:01.055630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.055651   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.055666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.055685   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.055710   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.055728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.055745   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.055762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.055780   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.055796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.055816   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.055832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.055850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.055867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.055884   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.055900   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.055930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.055948   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.055969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.055985   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.056001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.056017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.056035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.056052   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.056071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.056088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.056105   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.056121   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.056139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.056155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.056172   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.056187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.056205   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.056222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.056243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.056261   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.056279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.056295   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.056312   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.056329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.056348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.056363   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.056381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.056398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.056418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.056435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.056466   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.056483   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.056502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.056519   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.056539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.056555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.056574   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.056591   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.056611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.056629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.056657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.056674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.056700   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:01:01.056736   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044106   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:01:01.056770   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044156   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.056793   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044191   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:01:01.056812   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044207   32316 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:01:01.056829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044358   32316 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:01:01.056848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044509   32316 schema.go:492] Created Terraform input: queued_timeout = 480
<{%reset%}>)
I0621 14:01:01.056865   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044563   32316 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:01:01.056883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044578   32316 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:01:01.056899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044589   32316 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:01:01.056918   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044649   32316 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.056934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044680   32316 schema.go:492] Created Terraform input: override_artifact_name = false
<{%reset%}>)
I0621 14:01:01.056952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044704   32316 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:01:01.056970   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044714   32316 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:01:01.056989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044723   32316 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:01:01.057005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044732   32316 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:01:01.057024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044754   32316 schema.go:492] Created Terraform input: artifacts = [map[encryption_disabled:false override_artifact_name:false type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:01:01.057042   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044797   32316 schema.go:492] Created Terraform input: build_timeout = 60
<{%reset%}>)
I0621 14:01:01.057061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.044850   32316 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:01:01.057079   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.057098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.057112   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.057131   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.057146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.057168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.057185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.057203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.057219   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.057237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.057253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.057272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.057289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.057306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.057322   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.057341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.057358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.057376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.057393   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.057411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.057426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.057443   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.057459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.057478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.057494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.057512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.057529   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.057553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.057580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.057605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.057621   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.057650   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.057668   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.057687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.057723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.057749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.057770   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.057786   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.057804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.057822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.057843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.057861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.057886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.057905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.057930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.057952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.057979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.058010   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.058040   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.058067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.058096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.058121   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.058149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.058174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.058217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.058241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.058272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.058299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.058336   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045088   32316 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:01:01.058368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045124   32316 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:01:01.058425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045139   32316 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:01:01.058473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045508   32316 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:01:01.058509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045533   32316 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:01:01.058538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045546   32316 schema.go:492] Created Terraform input: source = [map[buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:01:01.058568   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:01:01.058595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:01:01.058625   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:01:01.058654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:01:01.058683   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:01:01.058713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:01:01.058740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:01:01.058765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.058795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:01:01.058822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:01:01.058851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:01:01.058879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:01:01.058910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:01:01.058943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:01:01.058980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:01:01.059006   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.059039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.059066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:01:01.059098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:01:01.059127   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.059159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:01:01.059185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.059213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.059241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.059273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:01:01.059303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.059333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.059361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:01:01.059394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:01:01.059421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:01:01.059453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:01:01.059473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.059491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.059508   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:01:01.059526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:01:01.059542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:01:01.059560   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.059576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:01:01.059594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:01:01.059611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:01:01.059883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:01:01.059925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:01:01.059959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:01:01.059991   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:01:01.060062   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.060107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:01:01.060137   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.060216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.060306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:01:01.060356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:01:01.060391   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:01:01.060425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:01:01.060454   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:01:01.060492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:01:01.060528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:01:01.060561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:01:01.060625   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:01:01.060753   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:01:01.060812   31957 log.go:80] eventSink::Infoerr(<{%reset%}> location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 type:CODECOMMIT]]
<{%reset%}>)
I0621 14:01:01.060868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045903   32316 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:01:01.060984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045964   32316 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:01:01.061030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.045993   32316 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:01:01.061067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046007   32316 schema.go:492] Created Terraform input: image_pull_credentials_type = CODEBUILD
<{%reset%}>)
I0621 14:01:01.061108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046017   32316 schema.go:492] Created Terraform input: privileged_mode = false
<{%reset%}>)
I0621 14:01:01.061211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046024   32316 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:01:01.061283   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046035   32316 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:01:01.061345   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046046   32316 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:01:01.061419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046060   32316 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:01:01.061456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046078   32316 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:01:01.061483   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046086   32316 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:01:01.061504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046101   32316 schema.go:492] Created Terraform input: environment = [map[compute_type:BUILD_GENERAL1_SMALL image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:01:01.061539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046140   32316 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:01:01.061569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046181   32316 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:01:01.061594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046202   32316 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:01:01.061656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046214   32316 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:01:01.061743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046225   32316 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:01:01.061805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046236   32316 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:01:01.061839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046253   32316 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"compute_type":"BUILD_GENERAL1_SMALL", "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:01:01.061864   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046280   32316 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"encryption_disabled":false, "override_artifact_name":false, "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:01:01.061883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046299   32316 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:01:01.061925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046310   32316 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:01:01.061961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.046663   32316 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:01:01.065554   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild) success: changes=1 #replaces=[] #stables=[name] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:01.065775   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild' after diff (same) (inputs=map[__defaults:{[{buildTimeout} {queuedTimeout}]} artifacts:{map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]} badgeEnabled:{true} buildTimeout:{60} environment:{map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]} name:{my-codebuild} projectVisibility:{PUBLIC_READ} queuedTimeout:{480} serviceRole:{arn:aws:iam::103429827345:role/codeBuildRole-615d8ed} source:{map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]} tags:{map[ManagedBy:{Pulumi} __defaults:{[]}]}])
I0621 14:01:01.065840   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:01:01.065886   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.065915   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.065944   31957 log.go:80] StepExecutor worker(5): launching oneshot worker
I0621 14:01:01.066124   31957 log.go:80] StepExecutor worker(5): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild (preview true)
I0621 14:01:01.066336   31957 log.go:80] StepExecutor worker(5): step same on urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild retired
I0621 14:01:01.066379   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:01:01.066411   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:codebuild/project:Project, urn=urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild, #outs=28
I0621 14:01:01.066441   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.066475   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
I0621 14:01:01.066495   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifactIdentifier={}
I0621 14:01:01.066511   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: bucketOwnerAccess={}
I0621 14:01:01.066527   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionDisabled={false}
I0621 14:01:01.066541   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:01:01.066557   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={}
I0621 14:01:01.066572   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: namespaceType={}
I0621 14:01:01.066587   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: overrideArtifactName={false}
I0621 14:01:01.066602   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: packaging={}
I0621 14:01:01.066618   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: path={}
I0621 14:01:01.066636   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_ARTIFACTS}
I0621 14:01:01.066652   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeEnabled={true}
I0621 14:01:01.066683   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
I0621 14:01:01.066704   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildBatchConfig={<nil>}
I0621 14:01:01.066723   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildTimeout={60}
I0621 14:01:01.066745   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
I0621 14:01:01.066762   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:01:01.066785   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: modes={[]}
I0621 14:01:01.066803   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_CACHE}
I0621 14:01:01.066819   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: concurrentBuildLimit={0}
I0621 14:01:01.066835   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: description={}
I0621 14:01:01.066853   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
I0621 14:01:01.066878   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} registryCredential:{<nil>} type:{LINUX_CONTAINER}]}
I0621 14:01:01.066898   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: certificate={}
I0621 14:01:01.066915   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:01:01.066930   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environmentVariables={[]}
I0621 14:01:01.066946   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:01:01.066961   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: imagePullCredentialsType={CODEBUILD}
I0621 14:01:01.066977   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: privilegedMode={false}
I0621 14:01:01.066993   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: registryCredential={<nil>}
I0621 14:01:01.067007   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={LINUX_CONTAINER}
I0621 14:01:01.067024   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: fileSystemLocations={[]}
I0621 14:01:01.067039   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.067067   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
I0621 14:01:01.067088   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
I0621 14:01:01.067105   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: groupName={}
I0621 14:01:01.067121   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: status={ENABLED}
I0621 14:01:01.067136   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: streamName={}
I0621 14:01:01.067158   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
I0621 14:01:01.067176   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: bucketOwnerAccess={}
I0621 14:01:01.067192   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionDisabled={false}
I0621 14:01:01.067208   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:01:01.067236   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: status={DISABLED}
I0621 14:01:01.067266   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={my-codebuild}
I0621 14:01:01.067286   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: projectVisibility={PUBLIC_READ}
I0621 14:01:01.067303   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
I0621 14:01:01.067319   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: queuedTimeout={480}
I0621 14:01:01.067335   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: resourceAccessRole={}
I0621 14:01:01.067351   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondaryArtifacts={[]}
I0621 14:01:01.067367   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondarySourceVersions={[]}
I0621 14:01:01.067382   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondarySources={[]}
I0621 14:01:01.067397   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:01:01.067435   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: source={map[auth:{<nil>} buildStatusConfig:{<nil>} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} gitCloneDepth:{0} gitSubmodulesConfig:{<nil>} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
I0621 14:01:01.067459   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: auth={<nil>}
I0621 14:01:01.067476   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildStatusConfig={<nil>}
I0621 14:01:01.067502   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:01:01.067523   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: gitCloneDepth={0}
I0621 14:01:01.067543   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: gitSubmodulesConfig={<nil>}
I0621 14:01:01.067559   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: insecureSsl={false}
I0621 14:01:01.067575   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:01:01.067592   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: reportBuildStatus={false}
I0621 14:01:01.067615   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={CODECOMMIT}
I0621 14:01:01.067638   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: sourceVersion={}
I0621 14:01:01.067659   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.067676   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:01:01.067695   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tagsAll={map[ManagedBy:{Pulumi}]}
I0621 14:01:01.067711   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:01:01.067731   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: vpcConfig={<nil>}
I0621 14:01:01.069137   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:01.069218   31957 log.go:80] handling default provider request for package aws
I0621 14:01:01.069269   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:01.069210   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResourceOutputs(urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox)]: codebuildProjectName={my-codebuild}
I0621 14:01:01.069350   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResourceOutputs(urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox)]: repositoryName={my-repo-2}
I0621 14:01:01.069378   31957 log.go:80] ResourceMonitor.RegisterResourceOutputs received: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=2
I0621 14:01:01.069401   31957 log.go:80] EvalSourceIterator produced a completion: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox,#outs=2
I0621 14:01:01.069421   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.069441   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received register resource outputs
I0621 14:01:01.069462   31957 log.go:80] StepExecutor worker(-1): registered resource outputs urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox: old=#2, new=#2
I0621 14:01:01.069501   31957 log.go:80] ResourceMonitor.RegisterResourceOutputs operation finished: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=2
I0621 14:01:01.069299   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:01.069574   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.069598   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.069614   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: path={/}
I0621 14:01:01.069631   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:01:01.069670   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/policy:Policy, name=cwe-policy, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:01.069697   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/policy:Policy,name=cwe-policy,#props=4
I0621 14:01:01.069718   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.069733   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:01.069762   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.069794   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy) executing (#olds=5,#news=4)
I0621 14:01:01.069818   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: __defaults={[]}
I0621 14:01:01.069836   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.069855   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.069874   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: path={/}
I0621 14:01:01.069892   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:01:01.069911   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.069926   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.069943   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: path={/}
I0621 14:01:01.069963   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:01:01.070534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070483   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:01:01.070696   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070521   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.070763   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070551   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.070808   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070578   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.070865   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070679   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:01:01.070904   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070705   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policy={{
<{%reset%}>)
I0621 14:01:01.070941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.070976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.071005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.071036   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.071064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.071107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.071140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.071173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.071222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.071254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.071294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.071354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.071393   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:01:01.071427   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070725   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.071484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070745   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.071517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070761   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:01:01.071549   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070775   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: policy={{
<{%reset%}>)
I0621 14:01:01.071576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.071605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.071633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.071662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.071689   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.071717   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.071732   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: __defaults={[]}
I0621 14:01:01.071769   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.071800   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.071832   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: path={/}
I0621 14:01:01.071855   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:01:01.071875   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy) success: inputs=#5 failures=#0
I0621 14:01:01.071907   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2): executing (#olds=10,#news=5)
I0621 14:01:01.071933   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.071952   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.071969   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.071986   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.072002   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: namePrefix={}
I0621 14:01:01.072019   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: path={/}
I0621 14:01:01.072038   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
I0621 14:01:01.072055   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: policyId={ANPARQFHF5MIRDHDGFWK6}
I0621 14:01:01.072073   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: tags={map[]}
I0621 14:01:01.072093   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: tagsAll={map[]}
I0621 14:01:01.072125   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: __defaults={[]}
I0621 14:01:01.072156   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.072174   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.072191   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: path={/}
I0621 14:01:01.071743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.072255   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:01:01.072281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.072312   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.072334   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.072350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.072369   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.072385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:01:01.072421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070823   32316 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:01:01.072449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070840   32316 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:01:01.072475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070857   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.072498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070880   32316 schema.go:492] Created Terraform input: policy = {
<{%reset%}>)
I0621 14:01:01.072523   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.072541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.072560   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.072577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.072596   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.072618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.072641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.072658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.072678   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.072695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.072714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.072730   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.072748   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }
<{%reset%}>)
I0621 14:01:01.072765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070908   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:01.072785   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070924   32316 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:01:01.072804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070940   32316 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:01:01.072825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070953   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.072845   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.070965   32316 schema.go:502] Terraform input policy = "{\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"codebuild:StartBuild\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"\n                ]\n            }\n        ]\n    }"
<{%reset%}>)
I0621 14:01:01.072865   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071155   32316 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:01:01.072883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071185   32316 schema.go:881] Terraform output policy = {{
<{%reset%}>)
I0621 14:01:01.072902   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.072919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.072938   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.072954   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.072973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.072990   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.073007   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.073024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.073043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.073060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.073078   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.073095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.073115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:01:01.073132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071239   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:01.073157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071289   32316 schema.go:881] Terraform output description = {Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.073176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071351   32316 schema.go:881] Terraform output name = {CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.073213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071371   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.073261   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071381   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.073290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071434   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.073319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071455   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: path={/}
<{%reset%}>)
I0621 14:01:01.073349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.071472   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: policy={{
<{%reset%}>)
I0621 14:01:01.073373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.073389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.073408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.073425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.073444   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.073461   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.073479   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.073495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.073517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.073536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.073568   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.073622   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.073651   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:01:01.073690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072715   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:01:01.073725   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072748   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.073759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072764   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.073908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072779   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.073956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072792   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.073988   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072809   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: namePrefix={}
<{%reset%}>)
I0621 14:01:01.074033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072825   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:01:01.074124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072837   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:01.074162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072852   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policyId={ANPARQFHF5MIRDHDGFWK6}
<{%reset%}>)
I0621 14:01:01.074194   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072871   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:01.074236   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072888   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:01.074279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072922   32316 schema.go:492] Created Terraform input: id = arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:01:01.074318   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072941   32316 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:01:01.074387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072956   32316 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:01:01.074414   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.072979   32316 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:01.074436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073000   32316 schema.go:492] Created Terraform input: policy_id = ANPARQFHF5MIRDHDGFWK6
<{%reset%}>)
I0621 14:01:01.074469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073025   32316 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:01:01.074494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073042   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.074518   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073074   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:01.074536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073103   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:01.074564   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073121   32316 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:01:01.074582   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073138   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.074602   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073149   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.074639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073164   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.074671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073175   32316 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:01:01.074701   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073187   32316 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codebuild:StartBuild\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"]}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:01.074733   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073209   32316 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:01:01.074763   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073237   32316 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:01:01.074795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073251   32316 schema.go:502] Terraform input id = "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:01:01.074829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073262   32316 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:01:01.074859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073338   32316 schema.go:502] Terraform input policy_id = "ANPARQFHF5MIRDHDGFWK6"
<{%reset%}>)
I0621 14:01:01.074893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073444   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.074929   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073476   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:01:01.074953   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073505   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:01:01.074974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073526   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:01:01.075009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073555   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: policy={{
<{%reset%}>)
I0621 14:01:01.075041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.075067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.075104   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.075132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.075212   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.075251   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.075615   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.075674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.075727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.075758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.075798   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.075854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.075888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:01:01.075961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073573   32316 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:01:01.076009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073611   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.076055   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073643   32316 schema.go:492] Created Terraform input: policy = {
<{%reset%}>)
I0621 14:01:01.076087   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.076122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:01:01.076146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:01:01.076192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.076243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:01:01.076281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:01:01.076310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:01:01.076339   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:01:01.076431   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.076502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:01:01.076569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:01:01.076672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:01:01.076728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }
<{%reset%}>)
I0621 14:01:01.076769   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073664   32316 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:01:01.076806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073698   32316 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:01:01.076844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073717   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.076887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073733   32316 schema.go:502] Terraform input policy = "{\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"codebuild:StartBuild\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"\n                ]\n            }\n        ]\n    }"
<{%reset%}>)
I0621 14:01:01.076960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.073757   32316 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:01:01.077436   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2) success: changes=1 #replaces=[] #stables=[name namePrefix description path] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:01.077516   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy' after diff (same) (inputs=map[__defaults:{[]} description:{Policy to allow CodeBuild to be invoked by Cloudwatch Events.} name:{CodeBuild-Invoke-Role-For-Cloudwatch-Events2} path:{/} policy:{{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}])
I0621 14:01:01.077557   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:01:01.077620   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.077704   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.077744   31957 log.go:80] StepExecutor worker(6): launching oneshot worker
I0621 14:01:01.077847   31957 log.go:80] StepExecutor worker(6): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy (preview true)
I0621 14:01:01.077913   31957 log.go:80] StepExecutor worker(6): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy retired
I0621 14:01:01.077939   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:01:01.077992   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/policy:Policy, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy, #outs=10
I0621 14:01:01.078023   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.078061   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:01:01.078077   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.078092   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:01:01.078138   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: namePrefix={}
I0621 14:01:01.078160   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: path={/}
I0621 14:01:01.078184   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
I0621 14:01:01.078200   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policyId={ANPARQFHF5MIRDHDGFWK6}
I0621 14:01:01.078224   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: tags={map[]}
I0621 14:01:01.078254   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: tagsAll={map[]}
I0621 14:01:01.079301   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:01.079382   31957 log.go:80] handling default provider request for package aws
I0621 14:01:01.079435   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:01.079464   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:01.079545   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:01:01.079597   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.079654   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/role:Role, name=cloudWatchRole, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:01.079702   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/role:Role,name=cloudWatchRole,#props=2
I0621 14:01:01.079738   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.079772   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:01.079811   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.079849   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole) executing (#olds=7,#news=2)
I0621 14:01:01.079879   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:01.079902   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:01:01.079925   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: forceDetachPolicies={false}
I0621 14:01:01.079956   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.079985   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: maxSessionDuration={3600}
I0621 14:01:01.080003   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: name={cloudWatchRole-4edbdf2}
I0621 14:01:01.080020   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: path={/}
I0621 14:01:01.080040   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).news]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:01:01.080058   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.080705   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080594   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:01:01.080804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080686   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:01.080936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080708   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:01.080981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.081012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.081043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.081067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.081089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.081111   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.081140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.081165   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.081197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.081228   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.081256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.081327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080732   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:01.081370   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080752   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.081401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080771   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:01.081448   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080805   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.081474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080857   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:01:01.081498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080909   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:01.081518   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.081543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.081563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.081585   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.081601   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.081621   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.081638   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.081658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.081674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.081694   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.081711   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.081757   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080932   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.081819   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.080972   32316 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:01:01.081901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.081962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.082028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.082106   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.082171   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.082294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.082342   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.082375   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.082411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.082430   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.082450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.082477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081033   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:01:01.082504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081057   32316 schema.go:671] Created Terraform input: name = cloudWatchRole-4edbdf2 (from old default)
<{%reset%}>)
I0621 14:01:01.082535   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081071   32316 schema.go:756] Created Terraform input: path = / (from old default)
<{%reset%}>)
I0621 14:01:01.082575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081084   32316 schema.go:756] Created Terraform input: force_detach_policies = false (from old default)
<{%reset%}>)
I0621 14:01:01.082627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081095   32316 schema.go:756] Created Terraform input: max_session_duration = 3600 (from old default)
<{%reset%}>)
I0621 14:01:01.082683   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081107   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.082740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081116   32316 schema.go:502] Terraform input __defaults = []interface {}{"forceDetachPolicies", "maxSessionDuration", "name", "path"}
<{%reset%}>)
I0621 14:01:01.082783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081129   32316 schema.go:502] Terraform input assume_role_policy = "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"events.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}"
<{%reset%}>)
I0621 14:01:01.082822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081161   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:01:01.082859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081181   32316 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.082892   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081194   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.082914   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:01.082962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081202   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.082988   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:01:01.083023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081535   32316 schema.go:881] Terraform output __defaults = {[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:01.083034   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: forceDetachPolicies={false}
I0621 14:01:01.083135   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.083170   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: maxSessionDuration={3600}
I0621 14:01:01.083195   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: name={cloudWatchRole-4edbdf2}
I0621 14:01:01.083229   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: path={/}
I0621 14:01:01.083256   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole) success: inputs=#7 failures=#0
I0621 14:01:01.083273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081567   32316 schema.go:881] Terraform output assumeRolePolicy = {{
<{%reset%}>)
I0621 14:01:01.083332   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2): executing (#olds=16,#news=7)
I0621 14:01:01.083362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.083402   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.083415   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.083468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.083501   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.083528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.083555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.083584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.083613   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.083641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.083433   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
I0621 14:01:01.083677   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.083692   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: createDate={2023-06-21T12:44:38Z}
I0621 14:01:01.083709   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.083718   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: description={}
I0621 14:01:01.083751   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081600   32316 schema.go:881] Terraform output managedPolicyArns = {[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.083773   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: forceDetachPolicies={false}
I0621 14:01:01.083795   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: id={cloudWatchRole-4edbdf2}
I0621 14:01:01.083813   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: inlinePolicies={[]}
I0621 14:01:01.083833   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.083881   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: maxSessionDuration={3600}
I0621 14:01:01.083901   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: name={cloudWatchRole-4edbdf2}
I0621 14:01:01.083918   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: namePrefix={}
I0621 14:01:01.083934   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: path={/}
I0621 14:01:01.083958   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:01:01.083977   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: lastUsedDate={}
I0621 14:01:01.083993   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: region={}
I0621 14:01:01.084012   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: tags={map[]}
I0621 14:01:01.084033   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: tagsAll={map[]}
I0621 14:01:01.084050   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: uniqueId={AROARQFHF5MIS3HNFHGDU}
I0621 14:01:01.084073   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:01:01.084092   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:01:01.084113   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: forceDetachPolicies={false}
I0621 14:01:01.084135   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.084152   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: maxSessionDuration={3600}
I0621 14:01:01.084169   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: name={cloudWatchRole-4edbdf2}
I0621 14:01:01.084185   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: path={/}
I0621 14:01:01.083782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081621   32316 schema.go:881] Terraform output name = {cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.084269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081635   32316 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:01:01.084306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081647   32316 schema.go:881] Terraform output forceDetachPolicies = {false}
<{%reset%}>)
I0621 14:01:01.084332   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081656   32316 schema.go:881] Terraform output maxSessionDuration = {3600}
<{%reset%}>)
I0621 14:01:01.084362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081696   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:01.084390   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081711   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:01.084420   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.084447   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.084472   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.084498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.084523   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.084551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.084577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.084610   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.084637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.084658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.084674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.084699   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081720   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:01.084721   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081730   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.084752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081740   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:01.084780   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081749   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.084817   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.081756   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: path={/}
<{%reset%}>)
I0621 14:01:01.084862   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084816   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:01:01.084915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084854   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.084972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084887   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:01:01.085007   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084903   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: createDate={2023-06-21T12:44:38Z}
<{%reset%}>)
I0621 14:01:01.085027   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084918   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: description={}
<{%reset%}>)
I0621 14:01:01.085049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084930   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:01.085069   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084944   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: id={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.085090   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084959   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: inlinePolicies={[]}
<{%reset%}>)
I0621 14:01:01.085114   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.084986   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.085137   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085012   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:01.085158   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085037   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.085179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085051   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: namePrefix={}
<{%reset%}>)
I0621 14:01:01.085200   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085062   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:01:01.085230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085076   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: lastUsedDate={}
<{%reset%}>)
I0621 14:01:01.085260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085088   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: region={}
<{%reset%}>)
I0621 14:01:01.085294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085117   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
<{%reset%}>)
I0621 14:01:01.085317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085132   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:01.085334   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085148   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:01.085355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085171   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: uniqueId={AROARQFHF5MIS3HNFHGDU}
<{%reset%}>)
I0621 14:01:01.085373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085215   32316 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:01:01.085394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085273   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.085416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085311   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:01.085436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085327   32316 schema.go:492] Created Terraform input: unique_id = AROARQFHF5MIS3HNFHGDU
<{%reset%}>)
I0621 14:01:01.085454   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085344   32316 schema.go:492] Created Terraform input: create_date = 2023-06-21T12:44:38Z
<{%reset%}>)
I0621 14:01:01.085476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085400   32316 schema.go:492] Created Terraform input: id = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.085500   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085412   32316 schema.go:492] Created Terraform input: name = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.085522   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085444   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:01:01.085541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085474   32316 schema.go:492] Created Terraform input: assume_role_policy = {"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:01:01.085565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085511   32316 schema.go:492] Created Terraform input: region = 
<{%reset%}>)
I0621 14:01:01.085583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085524   32316 schema.go:492] Created Terraform input: last_used_date = 
<{%reset%}>)
I0621 14:01:01.085604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085536   32316 schema.go:502] Terraform input region = ""
<{%reset%}>)
I0621 14:01:01.085620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085546   32316 schema.go:502] Terraform input last_used_date = ""
<{%reset%}>)
I0621 14:01:01.085644   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085556   32316 schema.go:492] Created Terraform input: role_last_used = [map[last_used_date: region:]]
<{%reset%}>)
I0621 14:01:01.085662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085581   32316 schema.go:492] Created Terraform input: inline_policy = []
<{%reset%}>)
I0621 14:01:01.085684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085622   32316 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.085704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085664   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:01.085725   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085685   32316 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.085746   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085700   32316 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:01:01.085767   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085721   32316 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.085787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085732   32316 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.085810   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085745   32316 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:01:01.085830   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085767   32316 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:01:01.085853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085779   32316 schema.go:502] Terraform input unique_id = "AROARQFHF5MIS3HNFHGDU"
<{%reset%}>)
I0621 14:01:01.085871   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085791   32316 schema.go:502] Terraform input create_date = "2023-06-21T12:44:38Z"
<{%reset%}>)
I0621 14:01:01.085897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085802   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:01:01.085917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085820   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.085939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085832   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.085957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085843   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.085976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085854   32316 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.085995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085866   32316 schema.go:502] Terraform input assume_role_policy = "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:01:01.086015   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085881   32316 schema.go:502] Terraform input id = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.086037   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085892   32316 schema.go:502] Terraform input role_last_used = []interface {}{map[string]interface {}{"last_used_date":"", "region":""}}
<{%reset%}>)
I0621 14:01:01.086057   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085908   32316 schema.go:502] Terraform input inline_policy = []interface {}(nil)
<{%reset%}>)
I0621 14:01:01.086076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085920   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.086097   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.085932   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.086148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086125   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:01:01.086184   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086164   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:01:01.086202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.086231   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.086258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.086279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.086296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.086314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.086331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.086351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.086368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.086386   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.086403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:01:01.086429   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086188   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:01:01.086452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086221   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:01:01.086474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086239   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:01:01.086493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086265   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.086513   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086277   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: path={/}
<{%reset%}>)
I0621 14:01:01.086532   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086301   32316 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:01:01.086552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086344   32316 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.086572   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086356   32316 schema.go:492] Created Terraform input: name = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.086592   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086407   32316 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:01:01.086616   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086424   32316 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:01:01.086635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:01:01.086652   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:01:01.086670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:01:01.086687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:01:01.086704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:01:01.086722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:01:01.086743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:01:01.086760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:01:01.086778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:01:01.086796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:01:01.086814   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:01:01.086831   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086459   32316 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.086850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086473   32316 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:01:01.086870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086485   32316 schema.go:502] Terraform input assume_role_policy = "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"events.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}"
<{%reset%}>)
I0621 14:01:01.086969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086506   32316 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:01:01.086999   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086518   32316 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:01:01.087020   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086536   32316 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:01:01.087038   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.086548   32316 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.092302   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2) success: changes=1 #replaces=[] #stables=[name namePrefix path] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:01.092395   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole' after diff (same) (inputs=map[__defaults:{[{forceDetachPolicies} {maxSessionDuration} {name} {path}]} assumeRolePolicy:{{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}} forceDetachPolicies:{false} managedPolicyArns:{[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]} maxSessionDuration:{3600} name:{cloudWatchRole-4edbdf2} path:{/}])
I0621 14:01:01.092431   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:01:01.092473   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.092507   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.092529   31957 log.go:80] StepExecutor worker(7): launching oneshot worker
I0621 14:01:01.092638   31957 log.go:80] StepExecutor worker(7): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole (preview true)
I0621 14:01:01.092718   31957 log.go:80] StepExecutor worker(7): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole retired
I0621 14:01:01.092749   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:01:01.092773   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/role:Role, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole, #outs=16
I0621 14:01:01.092797   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.092817   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
I0621 14:01:01.092833   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: createDate={2023-06-21T12:44:38Z}
I0621 14:01:01.092850   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: description={}
I0621 14:01:01.092866   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: forceDetachPolicies={false}
I0621 14:01:01.092887   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: id={cloudWatchRole-4edbdf2}
I0621 14:01:01.092907   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: inlinePolicies={[]}
I0621 14:01:01.092927   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:01:01.092945   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: maxSessionDuration={3600}
I0621 14:01:01.092963   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: name={cloudWatchRole-4edbdf2}
I0621 14:01:01.092978   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: namePrefix={}
I0621 14:01:01.092994   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: path={/}
I0621 14:01:01.093016   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:01:01.093034   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: lastUsedDate={}
I0621 14:01:01.093051   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: region={}
I0621 14:01:01.093068   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: tags={map[]}
I0621 14:01:01.093088   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: tagsAll={map[]}
I0621 14:01:01.093106   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: uniqueId={AROARQFHF5MIS3HNFHGDU}
I0621 14:01:01.094035   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:01.094100   31957 log.go:80] handling default provider request for package aws
I0621 14:01:01.094131   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:01.094172   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:01.094231   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.094263   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:01:01.094282   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.094298   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.094341   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:cloudwatch/eventRule:EventRule, name=pull-request-event-rule, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:01.094380   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:cloudwatch/eventRule:EventRule,name=pull-request-event-rule,#props=4
I0621 14:01:01.094409   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.094426   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:01.094459   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.094493   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule) executing (#olds=7,#news=4)
I0621 14:01:01.094563   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:01:01.094606   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.094639   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: eventBusName={default}
I0621 14:01:01.094669   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:01:01.094697   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: isEnabled={true}
I0621 14:01:01.094727   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.094758   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.094790   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.094818   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:01:01.094848   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.094877   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.095833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.095759   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule) executing
<{%reset%}>)
I0621 14:01:01.095960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.095903   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:01:01.096048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.095933   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.096126   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096018   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.096169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096038   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventPattern={{
<{%reset%}>)
I0621 14:01:01.096197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.096265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.096305   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.096328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.096355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.096376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.096402   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.096467   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.096500   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.096528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.096556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.096585   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.096613   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.096669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.096734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.096806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.096852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:01:01.096912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096053   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: isEnabled={true}
<{%reset%}>)
I0621 14:01:01.096965   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096069   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.097009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096083   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.097055   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096100   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.097102   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096113   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventPattern={{
<{%reset%}>)
I0621 14:01:01.097162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.097202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.097230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.097294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.097316   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097332   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.097351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.097368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.097416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.097436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.097452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.097474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.097491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.097510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.097526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:01:01.097548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096126   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.097567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096138   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.097603   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096193   32316 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:01:01.097627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096211   32316 schema.go:492] Created Terraform input: event_pattern = {
<{%reset%}>)
I0621 14:01:01.097647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.097671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.097731   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.097795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.097812   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.097872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.097890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.097908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.097926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.097944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.097975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.097994   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.098013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.098029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.098047   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}
<{%reset%}>)
I0621 14:01:01.098065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096228   32316 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.098085   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096267   32316 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.098103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096317   32316 schema.go:756] Created Terraform input: event_bus_name = default (from old default)
<{%reset%}>)
I0621 14:01:01.098123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096339   32316 schema.go:756] Created Terraform input: is_enabled = true (from old default)
<{%reset%}>)
I0621 14:01:01.098140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096357   32316 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:01:01.098174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096371   32316 schema.go:502] Terraform input event_pattern = "{\n\t\t\"source\": [\n\t\t  \"aws.codecommit\"\n\t\t],\n\t\t\"detail-type\": [\n\t\t  \"CodeCommit Pull Request State Change\"\n\t\t],\n\t\t\"resources\": [\n\t\t\t\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"\n\t\t],\n\t\t\"detail\": {\n\t\t\t\"event\": [\n\t\t\t\t\"pullRequestCreated\",\n\t\t\t\t\"pullRequestUpdated\",\n\t\t\t\t\"pullRequestSourceBranchUpdated\"\n\t\t\t]\n\t\t}\n\t}"
<{%reset%}>)
I0621 14:01:01.098196   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096447   32316 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.098227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096466   32316 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.098281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096478   32316 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:01:01.098319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096488   32316 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:01:01.098359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096499   32316 schema.go:502] Terraform input __defaults = []interface {}{"eventBusName", "isEnabled"}
<{%reset%}>)
I0621 14:01:01.098388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096732   32316 schema.go:881] Terraform output __defaults = {[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:01:01.098410   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:01:01.098455   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.098420   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096810   32316 schema.go:881] Terraform output description = {Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.098510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096833   32316 schema.go:881] Terraform output eventPattern = {{
<{%reset%}>)
I0621 14:01:01.098547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.098570   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.098593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.098619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.098476   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: eventBusName={default}
I0621 14:01:01.098711   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:01:01.098740   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: isEnabled={true}
I0621 14:01:01.098764   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.098787   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.098814   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule) success: inputs=#7 failures=#0
I0621 14:01:01.098866   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule): executing (#olds=12,#news=7)
I0621 14:01:01.098909   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
I0621 14:01:01.098943   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.098968   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: eventBusName={default}
I0621 14:01:01.098998   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
I0621 14:01:01.099021   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: id={pull-request-Codebuild-event-rule}
I0621 14:01:01.099046   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: isEnabled={true}
I0621 14:01:01.099070   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.099094   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: namePrefix={}
I0621 14:01:01.099118   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.099144   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: scheduleExpression={}
I0621 14:01:01.099172   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: tags={map[]}
I0621 14:01:01.099198   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: tagsAll={map[]}
I0621 14:01:01.098673   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.099238   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:01:01.099387   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.099429   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: eventBusName={default}
I0621 14:01:01.099482   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:01:01.099511   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: isEnabled={true}
I0621 14:01:01.099536   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.099561   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.099332   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.099910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.099950   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.099979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.100014   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.100044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.100086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.100123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.100154   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.100179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.100208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.100242   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:01:01.100273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096848   32316 schema.go:881] Terraform output name = {pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.100307   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096862   32316 schema.go:881] Terraform output roleArn = {arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.100339   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096874   32316 schema.go:881] Terraform output eventBusName = {default}
<{%reset%}>)
I0621 14:01:01.100367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096886   32316 schema.go:881] Terraform output isEnabled = {true}
<{%reset%}>)
I0621 14:01:01.100408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096911   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:01:01.100445   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096945   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.100482   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096962   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.100519   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.096987   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: eventPattern={{
<{%reset%}>)
I0621 14:01:01.100546   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.100580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.100607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.100635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.100662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.100691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.100735   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.100767   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.100794   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.100826   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.100854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.100922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.100989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.101034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.101076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.101117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.101157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:01:01.101209   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.097004   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: isEnabled={true}
<{%reset%}>)
I0621 14:01:01.101254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.097019   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.101302   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.097031   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.101348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100127   32316 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule) executing
<{%reset%}>)
I0621 14:01:01.101410   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100163   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.101451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100175   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.101538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100184   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.101654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100192   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
<{%reset%}>)
I0621 14:01:01.101765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100201   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: id={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.101810   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100226   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: isEnabled={true}
<{%reset%}>)
I0621 14:01:01.101872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100240   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.101928   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100254   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: namePrefix={}
<{%reset%}>)
I0621 14:01:01.101962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100263   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.101996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100272   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: scheduleExpression={}
<{%reset%}>)
I0621 14:01:01.102025   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100304   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: tags={map[]}
<{%reset%}>)
I0621 14:01:01.102053   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100330   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:01:01.102083   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100351   32316 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.102110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100387   32316 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:01:01.102153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100421   32316 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.102192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100431   32316 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:01:01.102271   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100445   32316 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:01:01.102313   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100458   32316 schema.go:492] Created Terraform input: arn = arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.102350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100468   32316 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:01:01.102379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100479   32316 schema.go:492] Created Terraform input: is_enabled = true
<{%reset%}>)
I0621 14:01:01.102411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100503   32316 schema.go:492] Created Terraform input: schedule_expression = 
<{%reset%}>)
I0621 14:01:01.102440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100519   32316 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:01:01.102480   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100534   32316 schema.go:492] Created Terraform input: event_pattern = {"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}
<{%reset%}>)
I0621 14:01:01.102509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100551   32316 schema.go:492] Created Terraform input: id = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.102543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100559   32316 schema.go:502] Terraform input id = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.102571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100568   32316 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.102604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100575   32316 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:01:01.102656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100583   32316 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.102688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100591   32316 schema.go:502] Terraform input arn = "arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.102743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100605   32316 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:01:01.102774   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100614   32316 schema.go:502] Terraform input event_pattern = "{\"detail\":{\"event\":[\"pullRequestCreated\",\"pullRequestUpdated\",\"pullRequestSourceBranchUpdated\"]},\"detail-type\":[\"CodeCommit Pull Request State Change\"],\"resources\":[\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"],\"source\":[\"aws.codecommit\"]}"
<{%reset%}>)
I0621 14:01:01.102805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100636   32316 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.102838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100645   32316 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:01:01.102863   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100652   32316 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:01:01.102894   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100658   32316 schema.go:502] Terraform input schedule_expression = ""
<{%reset%}>)
I0621 14:01:01.102920   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100665   32316 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:01:01.102951   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100758   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:01:01.102972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100769   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:01:01.102993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100777   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.103016   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100785   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventPattern={{
<{%reset%}>)
I0621 14:01:01.103049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.103069   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.103088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.103104   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.103123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.103139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.103157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.103174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.103192   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.103211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.103260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.103325   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.103361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.103392   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.103426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.103465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.103508   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:01:01.103554   31957 log.go:80] Provider[aws, 0xc001aa63c0].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule) success: changes=1 #replaces=[] #stables=[eventBusName namePrefix name] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:01:01.103611   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule' after diff (same) (inputs=map[__defaults:{[{eventBusName} {isEnabled}]} description:{Trigger CodeBuild project on pull request events from CodeCommit} eventBusName:{default} eventPattern:{{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}} isEnabled:{true} name:{pull-request-Codebuild-event-rule} roleArn:{arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}])
I0621 14:01:01.103639   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:01:01.103674   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.103704   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.103733   31957 log.go:80] StepExecutor worker(8): launching oneshot worker
I0621 14:01:01.103831   31957 log.go:80] StepExecutor worker(8): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule (preview true)
I0621 14:01:01.103904   31957 log.go:80] StepExecutor worker(8): step same on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule retired
I0621 14:01:01.103929   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:01:01.103951   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:cloudwatch/eventRule:EventRule, urn=urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule, #outs=12
I0621 14:01:01.103973   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
I0621 14:01:01.103989   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:01:01.104006   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventBusName={default}
I0621 14:01:01.104024   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
I0621 14:01:01.104039   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: id={pull-request-Codebuild-event-rule}
I0621 14:01:01.104056   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: isEnabled={true}
I0621 14:01:01.104077   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: name={pull-request-Codebuild-event-rule}
I0621 14:01:01.104098   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: namePrefix={}
I0621 14:01:01.104114   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:01:01.104130   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: scheduleExpression={}
I0621 14:01:01.104150   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: tags={map[]}
I0621 14:01:01.104168   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: tagsAll={map[]}
I0621 14:01:01.103576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100793   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: isEnabled={true}
<{%reset%}>)
I0621 14:01:01.104309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100801   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.104354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100808   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:01:01.104389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100820   32316 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:01:01.104419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100852   32316 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:01:01.104440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100868   32316 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:01:01.104471   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100885   32316 schema.go:492] Created Terraform input: event_pattern = {
<{%reset%}>)
I0621 14:01:01.104503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:01:01.104524   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:01:01.104542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.104560   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:01:01.104578   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:01:01.104608   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.104631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:01:01.104659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:01:01.104676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:01:01.104696   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:01:01.104714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:01:01.104738   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:01:01.104755   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:01:01.104773   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:01:01.104788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:01:01.104807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:01:01.104829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}
<{%reset%}>)
I0621 14:01:01.104850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100924   32316 schema.go:492] Created Terraform input: is_enabled = true
<{%reset%}>)
I0621 14:01:01.104876   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100962   32316 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.104899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100980   32316 schema.go:502] Terraform input event_pattern = "{\n\t\t\"source\": [\n\t\t  \"aws.codecommit\"\n\t\t],\n\t\t\"detail-type\": [\n\t\t  \"CodeCommit Pull Request State Change\"\n\t\t],\n\t\t\"resources\": [\n\t\t\t\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"\n\t\t],\n\t\t\"detail\": {\n\t\t\t\"event\": [\n\t\t\t\t\"pullRequestCreated\",\n\t\t\t\t\"pullRequestUpdated\",\n\t\t\t\t\"pullRequestSourceBranchUpdated\"\n\t\t\t]\n\t\t}\n\t}"
<{%reset%}>)
I0621 14:01:01.104926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.100994   32316 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:01:01.104947   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.101001   32316 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.104965   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.101009   32316 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:01:01.104993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.101017   32316 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:01:01.105009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.101026   32316 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:01:01.105047   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:01:01.105088   31957 log.go:80] handling default provider request for package aws
I0621 14:01:01.105111   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:01:01.105127   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:01:01.105163   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.105188   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: account={$.account}
I0621 14:01:01.105206   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.105234   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: id={$.id}
I0621 14:01:01.105258   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.105352   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: region={$.region}
I0621 14:01:01.105374   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.105391   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: revisionId={$.detail.revisionId}
I0621 14:01:01.105407   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.105423   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.105440   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.105479   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.105506   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.105558   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.105580   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.105595   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.105635   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:cloudwatch/eventTarget:EventTarget, name=codebuild-trigger, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:01:01.105673   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:cloudwatch/eventTarget:EventTarget,name=codebuild-trigger,#props=4
I0621 14:01:01.105700   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:01:01.105727   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:01:01.105766   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.105798   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) executing (#olds=0,#news=4)
I0621 14:01:01.105823   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.105857   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.105884   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.105904   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: account={$.account}
I0621 14:01:01.105921   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.105937   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: id={$.id}
I0621 14:01:01.105957   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.106008   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: region={$.region}
I0621 14:01:01.106033   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.106050   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: revisionId={$.detail.revisionId}
I0621 14:01:01.106067   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.106083   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.106102   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.106125   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.106142   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.106160   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.107276   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107136   32316 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target) executing
<{%reset%}>)
I0621 14:01:01.107352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107169   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.107384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107185   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: account={$.account}
<{%reset%}>)
I0621 14:01:01.107408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107206   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.107440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107224   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: id={$.id}
<{%reset%}>)
I0621 14:01:01.107472   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107239   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.107495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107252   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: region={$.region}
<{%reset%}>)
I0621 14:01:01.107515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107265   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.107536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107302   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.107556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107322   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.107578   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107334   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.107597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107346   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.107619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107385   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.107656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107403   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.107681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.107701   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.107729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.107750   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.107771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.107787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.107807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.107824   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.107844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.107860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.107887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107471   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.107906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.107929   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.107948   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.107968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.107986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.108007   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.108029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.108059   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.108085   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.108106   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.108125   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107489   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.108145   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107498   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.108168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107608   32316 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.108200   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107645   32316 schema.go:492] Created Terraform input: destinationCommit = $.detail.destinationCommit
<{%reset%}>)
I0621 14:01:01.108227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107654   32316 schema.go:492] Created Terraform input: id = $.id
<{%reset%}>)
I0621 14:01:01.108254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107661   32316 schema.go:492] Created Terraform input: region = $.region
<{%reset%}>)
I0621 14:01:01.108287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107667   32316 schema.go:492] Created Terraform input: revisionId = $.detail.revisionId
<{%reset%}>)
I0621 14:01:01.108313   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107674   32316 schema.go:492] Created Terraform input: sourceCommit = $.detail.sourceCommit
<{%reset%}>)
I0621 14:01:01.108331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107681   32316 schema.go:492] Created Terraform input: account = $.account
<{%reset%}>)
I0621 14:01:01.108350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107687   32316 schema.go:492] Created Terraform input: pullRequestId = $.detail.pullRequestId
<{%reset%}>)
I0621 14:01:01.108367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107694   32316 schema.go:492] Created Terraform input: repositoryName = $.detail.repositoryNames[0]
<{%reset%}>)
I0621 14:01:01.108397   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107702   32316 schema.go:492] Created Terraform input: sourceReference = $.detail.sourceReference
<{%reset%}>)
I0621 14:01:01.108428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107712   32316 schema.go:492] Created Terraform input: sourceVersion = $.detail.sourceCommit
<{%reset%}>)
I0621 14:01:01.108462   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107727   32316 schema.go:502] Terraform input pullRequestId = "$.detail.pullRequestId"
<{%reset%}>)
I0621 14:01:01.108490   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107737   32316 schema.go:502] Terraform input sourceReference = "$.detail.sourceReference"
<{%reset%}>)
I0621 14:01:01.108520   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107744   32316 schema.go:502] Terraform input sourceVersion = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:01:01.108547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107752   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:01.108573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107760   32316 schema.go:502] Terraform input revisionId = "$.detail.revisionId"
<{%reset%}>)
I0621 14:01:01.108590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107767   32316 schema.go:502] Terraform input sourceCommit = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:01:01.108610   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107774   32316 schema.go:502] Terraform input account = "$.account"
<{%reset%}>)
I0621 14:01:01.108627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107781   32316 schema.go:502] Terraform input repositoryName = "$.detail.repositoryNames[0]"
<{%reset%}>)
I0621 14:01:01.108647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107788   32316 schema.go:502] Terraform input destinationCommit = "$.detail.destinationCommit"
<{%reset%}>)
I0621 14:01:01.108664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107795   32316 schema.go:502] Terraform input id = "$.id"
<{%reset%}>)
I0621 14:01:01.108688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107809   32316 schema.go:502] Terraform input region = "$.region"
<{%reset%}>)
I0621 14:01:01.108719   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107817   32316 schema.go:492] Created Terraform input: input_paths = map[__defaults:[] account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit]
<{%reset%}>)
I0621 14:01:01.108741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107838   32316 schema.go:492] Created Terraform input: input_template = {"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.108759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.108778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.108796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.108814   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.108832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.108854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.108881   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.108910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.108930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.108949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }
<{%reset%}>)
I0621 14:01:01.108972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107850   32316 schema.go:502] Terraform input input_paths = map[string]interface {}{"__defaults":[]interface {}{}, "account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}
<{%reset%}>)
I0621 14:01:01.109012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107882   32316 schema.go:502] Terraform input input_template = "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"
<{%reset%}>)
I0621 14:01:01.109034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107900   32316 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:01:01.109061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107908   32316 schema.go:492] Created Terraform input: input_transformer = [map[__defaults:[] input_paths:map[__defaults:[] account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit] input_template:{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.109096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.109123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.109140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.109159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.109176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.109195   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.109213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.109254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.109334   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.109366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }]]
<{%reset%}>)
I0621 14:01:01.109386   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107929   32316 schema.go:492] Created Terraform input: role_arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.109406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107962   32316 schema.go:492] Created Terraform input: rule = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.109425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.107997   32316 schema.go:671] Created Terraform input: target_id = codebuild-trigger-e876000 (from func)
<{%reset%}>)
I0621 14:01:01.109452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108023   32316 schema.go:756] Created Terraform input: event_bus_name = default (from Terraform schema)
<{%reset%}>)
I0621 14:01:01.109471   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108040   32316 schema.go:502] Terraform input __defaults = []interface {}{"eventBusName", "targetId"}
<{%reset%}>)
I0621 14:01:01.109494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108052   32316 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.109518   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[{eventBusName} {targetId}]}
I0621 14:01:01.109580   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.109604   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: eventBusName={default}
I0621 14:01:01.109623   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:01:01.109650   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:01:01.109675   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: account={$.account}
I0621 14:01:01.109695   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.109712   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: id={$.id}
I0621 14:01:01.109728   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.109743   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: region={$.region}
I0621 14:01:01.109759   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.109775   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: revisionId={$.detail.revisionId}
I0621 14:01:01.109791   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.109809   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.109826   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.109866   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.109905   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.109950   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.109970   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.109988   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.110004   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: targetId={codebuild-trigger-e876000}
I0621 14:01:01.110024   31957 log.go:80] Provider[aws, 0xc001aa63c0].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) success: inputs=#7 failures=#0
I0621 14:01:01.110109   31957 log.go:80] Planner decided to create 'urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger' (inputs=map[__defaults:{[{eventBusName} {targetId}]} arn:{arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild} eventBusName:{default} inputTransformer:{map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]} roleArn:{arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild} rule:{pull-request-Codebuild-event-rule} targetId:{codebuild-trigger-e876000}])
I0621 14:01:01.110162   31957 log.go:80] Checking step create for urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger
I0621 14:01:01.110195   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:01:01.110237   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:01:01.109528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108060   32316 schema.go:502] Terraform input input_transformer = []interface {}{map[string]interface {}{"__defaults":[]interface {}{}, "input_paths":map[string]interface {}{"__defaults":[]interface {}{}, "account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}, "input_template":"{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"}}
<{%reset%}>)
I0621 14:01:01.110299   31957 log.go:80] StepExecutor worker(9): launching oneshot worker
I0621 14:01:01.110431   31957 log.go:80] StepExecutor worker(9): applying step create on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger (preview true)
I0621 14:01:01.110484   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:01:01.110508   31957 log.go:80] Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) executing (#props=7)
I0621 14:01:01.110557   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[{eventBusName} {targetId}]}
I0621 14:01:01.110580   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.110596   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: eventBusName={default}
I0621 14:01:01.110678   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.110705   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:01:01.110738   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.110760   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:01:01.110777   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: account={$.account}
I0621 14:01:01.110794   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.110809   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: id={$.id}
I0621 14:01:01.110828   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.110845   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: region={$.region}
I0621 14:01:01.110862   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.110877   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: revisionId={$.detail.revisionId}
I0621 14:01:01.110892   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.110922   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.110940   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.110960   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.110979   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.110996   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.111014   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: targetId={codebuild-trigger-e876000}
I0621 14:01:01.110306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108102   32316 schema.go:502] Terraform input role_arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.111288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108122   32316 schema.go:502] Terraform input rule = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.111321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108134   32316 schema.go:502] Terraform input target_id = "codebuild-trigger-e876000"
<{%reset%}>)
I0621 14:01:01.111341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108145   32316 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:01:01.111365   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108394   32316 schema.go:881] Terraform output repositoryName = {$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.111383   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108426   32316 schema.go:881] Terraform output sourceReference = {$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.111403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108440   32316 schema.go:881] Terraform output sourceVersion = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.111421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108451   32316 schema.go:881] Terraform output sourceCommit = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.111441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108461   32316 schema.go:881] Terraform output id = {$.id}
<{%reset%}>)
I0621 14:01:01.111459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108473   32316 schema.go:881] Terraform output account = {$.account}
<{%reset%}>)
I0621 14:01:01.111478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108484   32316 schema.go:881] Terraform output pullRequestId = {$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.111501   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108496   32316 schema.go:881] Terraform output region = {$.region}
<{%reset%}>)
I0621 14:01:01.111535   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108507   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:01.111568   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108533   32316 schema.go:881] Terraform output revisionId = {$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.111603   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108541   32316 schema.go:881] Terraform output destinationCommit = {$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.111642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108557   32316 schema.go:881] Terraform output inputPaths = {map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.111684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108587   32316 schema.go:881] Terraform output inputTemplate = {{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.111717   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.111747   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.111774   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.111805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.111826   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.111854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.111873   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.111894   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.111912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.111932   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.111950   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108600   32316 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:01:01.111971   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108619   32316 schema.go:881] Terraform output eventBusName = {default}
<{%reset%}>)
I0621 14:01:01.111988   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108630   32316 schema.go:881] Terraform output __defaults = {[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:01:01.112011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108643   32316 schema.go:881] Terraform output arn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.112032   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108655   32316 schema.go:881] Terraform output inputTransformer = {map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.112053   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.112071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.112091   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.112107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.112126   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.112143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.112167   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.112186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.112210   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.112250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.112279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108724   32316 schema.go:881] Terraform output roleArn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.112308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108737   32316 schema.go:881] Terraform output rule = {pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.112326   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108748   32316 schema.go:881] Terraform output targetId = {codebuild-trigger-e876000}
<{%reset%}>)
I0621 14:01:01.112347   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108778   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:01:01.112368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108797   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.112389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108811   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.112433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108840   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.112460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.112478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.112498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.112516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.112536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.112553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.112573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.112594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.112617   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.112637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.112660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108856   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.112682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108899   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.112704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108911   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.112723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108920   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: account={$.account}
<{%reset%}>)
I0621 14:01:01.112742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108927   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.112767   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108935   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: id={$.id}
<{%reset%}>)
I0621 14:01:01.112788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108942   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.112807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108950   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: region={$.region}
<{%reset%}>)
I0621 14:01:01.112829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108957   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.112848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108965   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.112868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108972   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.113014   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.108981   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.113042   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.109005   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.113060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.109020   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.113081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.113103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.113124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.113142   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.113162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.113179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.113198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.113222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.113249   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.113278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.113308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.109042   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.113338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.109051   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.113367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.109058   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: targetId={codebuild-trigger-e876000}
<{%reset%}>)
I0621 14:01:01.113388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111625   32316 provider.go:831] tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target) executing
<{%reset%}>)
I0621 14:01:01.113409   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111657   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:01:01.113432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111696   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.113453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111712   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.113473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111733   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.113493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111762   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[]}
<{%reset%}>)
I0621 14:01:01.113512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111773   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: account={$.account}
<{%reset%}>)
I0621 14:01:01.113533   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111820   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.113552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111837   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: id={$.id}
<{%reset%}>)
I0621 14:01:01.113571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111853   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.113594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111863   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: region={$.region}
<{%reset%}>)
I0621 14:01:01.113615   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111872   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.113634   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111879   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.113653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111906   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.113675   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111934   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.113698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111948   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.113719   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.111988   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.113742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112001   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.113759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.113779   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.113796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.113816   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.113832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.113851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.113868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.113888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.113905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.113924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.113945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112055   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.113969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.113987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.114008   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.114025   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.114043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.114065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.114085   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.114103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.114122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.114139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.114158   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112068   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.114177   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112088   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.114197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112096   32316 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: targetId={codebuild-trigger-e876000}
<{%reset%}>)
I0621 14:01:01.114224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112115   32316 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.114263   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112160   32316 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:01:01.114300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112204   32316 schema.go:492] Created Terraform input: pullRequestId = $.detail.pullRequestId
<{%reset%}>)
I0621 14:01:01.114340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112221   32316 schema.go:492] Created Terraform input: region = $.region
<{%reset%}>)
I0621 14:01:01.114374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112232   32316 schema.go:492] Created Terraform input: revisionId = $.detail.revisionId
<{%reset%}>)
I0621 14:01:01.114412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112245   32316 schema.go:492] Created Terraform input: sourceCommit = $.detail.sourceCommit
<{%reset%}>)
I0621 14:01:01.114440   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.114485   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: eventBusName={default}
I0621 14:01:01.114509   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: id={}
I0621 14:01:01.114532   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: account={$.account}
I0621 14:01:01.114550   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.114567   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: id={$.id}
I0621 14:01:01.114445   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112254   32316 schema.go:492] Created Terraform input: sourceReference = $.detail.sourceReference
<{%reset%}>)
I0621 14:01:01.114584   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.114624   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: region={$.region}
I0621 14:01:01.114613   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112285   32316 schema.go:492] Created Terraform input: account = $.account
<{%reset%}>)
I0621 14:01:01.114641   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.114668   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: revisionId={$.detail.revisionId}
I0621 14:01:01.114658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112297   32316 schema.go:492] Created Terraform input: destinationCommit = $.detail.destinationCommit
<{%reset%}>)
I0621 14:01:01.114685   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.114726   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.114747   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.114793   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.114823   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.114879   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.114913   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.114929   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.114946   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).outputs]: targetId={codebuild-trigger-e876000}
I0621 14:01:01.114967   31957 log.go:80] Provider[aws, 0xc001aa63c0].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) success: id=; #outs=7
I0621 14:01:01.115035   31957 log.go:80] StepExecutor worker(9): step create on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger retired
I0621 14:01:01.115064   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger
I0621 14:01:01.115085   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:cloudwatch/eventTarget:EventTarget, urn=urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger, #outs=7
I0621 14:01:01.115103   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.115119   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: eventBusName={default}
I0621 14:01:01.115136   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: id={}
I0621 14:01:01.115178   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:01:01.114702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112304   32316 schema.go:492] Created Terraform input: sourceVersion = $.detail.sourceCommit
<{%reset%}>)
I0621 14:01:01.115254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112313   32316 schema.go:492] Created Terraform input: id = $.id
<{%reset%}>)
I0621 14:01:01.115220   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:01:01.115309   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: account={$.account}
I0621 14:01:01.115331   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: destinationCommit={$.detail.destinationCommit}
I0621 14:01:01.115346   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: id={$.id}
I0621 14:01:01.115363   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: pullRequestId={$.detail.pullRequestId}
I0621 14:01:01.115378   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: region={$.region}
I0621 14:01:01.115393   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:01:01.115409   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: revisionId={$.detail.revisionId}
I0621 14:01:01.115427   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceCommit={$.detail.sourceCommit}
I0621 14:01:01.115443   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceReference={$.detail.sourceReference}
I0621 14:01:01.115460   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceVersion={$.detail.sourceCommit}
I0621 14:01:01.115480   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:01:01.115504   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:01:01.115520   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: rule={pull-request-Codebuild-event-rule}
I0621 14:01:01.115536   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: targetId={codebuild-trigger-e876000}
I0621 14:01:01.115283   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112330   32316 schema.go:492] Created Terraform input: repositoryName = $.detail.repositoryNames[0]
<{%reset%}>)
I0621 14:01:01.115736   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112338   32316 schema.go:502] Terraform input repositoryName = "$.detail.repositoryNames[0]"
<{%reset%}>)
I0621 14:01:01.115762   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112347   32316 schema.go:502] Terraform input region = "$.region"
<{%reset%}>)
I0621 14:01:01.115780   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112354   32316 schema.go:502] Terraform input sourceCommit = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:01:01.115800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112361   32316 schema.go:502] Terraform input sourceReference = "$.detail.sourceReference"
<{%reset%}>)
I0621 14:01:01.115817   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112368   32316 schema.go:502] Terraform input account = "$.account"
<{%reset%}>)
I0621 14:01:01.115836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112374   32316 schema.go:502] Terraform input destinationCommit = "$.detail.destinationCommit"
<{%reset%}>)
I0621 14:01:01.115854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112381   32316 schema.go:502] Terraform input sourceVersion = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:01:01.115880   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112388   32316 schema.go:502] Terraform input pullRequestId = "$.detail.pullRequestId"
<{%reset%}>)
I0621 14:01:01.115901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112395   32316 schema.go:502] Terraform input revisionId = "$.detail.revisionId"
<{%reset%}>)
I0621 14:01:01.115920   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112402   32316 schema.go:502] Terraform input id = "$.id"
<{%reset%}>)
I0621 14:01:01.115940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112410   32316 schema.go:492] Created Terraform input: input_paths = map[account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit]
<{%reset%}>)
I0621 14:01:01.115962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112433   32316 schema.go:492] Created Terraform input: input_template = {"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.115979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.116006   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.116031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.116072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.116136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.116171   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.116193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.116217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.116240   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.116260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }
<{%reset%}>)
I0621 14:01:01.116321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112442   32316 schema.go:502] Terraform input input_paths = map[string]interface {}{"account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}
<{%reset%}>)
I0621 14:01:01.116347   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112462   32316 schema.go:502] Terraform input input_template = "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"
<{%reset%}>)
I0621 14:01:01.116466   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112481   32316 schema.go:492] Created Terraform input: input_transformer = [map[input_paths:map[account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit] input_template:{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.116495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.116515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.116534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.116552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.116573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.116594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.116617   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.116635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.116662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.116688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }]]
<{%reset%}>)
I0621 14:01:01.116712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112517   32316 schema.go:492] Created Terraform input: role_arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:01:01.116729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112526   32316 schema.go:492] Created Terraform input: rule = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:01:01.116752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112533   32316 schema.go:492] Created Terraform input: target_id = codebuild-trigger-e876000
<{%reset%}>)
I0621 14:01:01.116769   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112540   32316 schema.go:502] Terraform input target_id = "codebuild-trigger-e876000"
<{%reset%}>)
I0621 14:01:01.116790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112554   32316 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.116807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112563   32316 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:01:01.116853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112570   32316 schema.go:502] Terraform input input_transformer = []interface {}{map[string]interface {}{"input_paths":map[string]interface {}{"account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}, "input_template":"{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"}}
<{%reset%}>)
I0621 14:01:01.116878   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112613   32316 schema.go:502] Terraform input role_arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:01:01.116899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.112622   32316 schema.go:502] Terraform input rule = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:01:01.116919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113247   32316 schema.go:881] Terraform output revisionId = {$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.116939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113264   32316 schema.go:881] Terraform output repositoryName = {$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.116957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113284   32316 schema.go:881] Terraform output account = {$.account}
<{%reset%}>)
I0621 14:01:01.116979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113292   32316 schema.go:881] Terraform output destinationCommit = {$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.117001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113304   32316 schema.go:881] Terraform output pullRequestId = {$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.117021   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113312   32316 schema.go:881] Terraform output sourceReference = {$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.117039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113319   32316 schema.go:881] Terraform output sourceVersion = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.117060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113329   32316 schema.go:881] Terraform output sourceCommit = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.117078   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113337   32316 schema.go:881] Terraform output region = {$.region}
<{%reset%}>)
I0621 14:01:01.117096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113344   32316 schema.go:881] Terraform output id = {$.id}
<{%reset%}>)
I0621 14:01:01.117113   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113355   32316 schema.go:881] Terraform output inputTemplate = {{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.117134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.117152   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.117170   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.117187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.117206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.117234   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.117253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.117273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.117291   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.117309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.117329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113382   32316 schema.go:881] Terraform output inputPaths = {map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.117352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113407   32316 schema.go:881] Terraform output arn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.117371   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113415   32316 schema.go:881] Terraform output targetId = {codebuild-trigger-e876000}
<{%reset%}>)
I0621 14:01:01.117390   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113422   32316 schema.go:881] Terraform output rule = {pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.117412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113428   32316 schema.go:881] Terraform output roleArn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.117437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113435   32316 schema.go:881] Terraform output id = {}
<{%reset%}>)
I0621 14:01:01.117460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113442   32316 schema.go:881] Terraform output inputTransformer = {map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.117482   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.117500   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.117521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.117540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.117562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.117579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.117597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.117614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.117633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.117651   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.117669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113468   32316 schema.go:881] Terraform output eventBusName = {default}
<{%reset%}>)
I0621 14:01:01.117687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113482   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.117708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113491   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: eventBusName={default}
<{%reset%}>)
I0621 14:01:01.117727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113505   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: id={}
<{%reset%}>)
I0621 14:01:01.117749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113529   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.117771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.117794   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.117813   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.117832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.117851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.117872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.117889   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.117907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.117924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.117943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:01:01.117961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113546   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:01:01.117984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113564   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: account={$.account}
<{%reset%}>)
I0621 14:01:01.118009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113572   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:01:01.118031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113580   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: id={$.id}
<{%reset%}>)
I0621 14:01:01.118049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113588   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:01:01.118071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113595   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: region={$.region}
<{%reset%}>)
I0621 14:01:01.118091   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113610   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:01:01.118114   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113624   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:01:01.118135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113638   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.118156   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113646   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:01:01.118175   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113655   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:01:01.118196   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113663   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:01:01.118220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:01:01.118248   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:01:01.118267   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:01:01.118287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:01:01.118304   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:01:01.118323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:01:01.118340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:01:01.118359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:01:01.118376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:01:01.118394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:01:01.118413   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113679   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:01:01.118435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113686   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:01:01.118459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:01:01.113694   32316 log.go:75] Marshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).outs]: targetId={codebuild-trigger-e876000}
<{%reset%}>)
I0621 14:01:01.125344   31957 log.go:80] langhost[go].RunPlan(pwd=/mnt/c/Projects/pulumi-trigger,program=.,...,dryrun=true) success: progerr=
I0621 14:01:01.125672   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? true, <nil>)
I0621 14:01:01.125719   31957 log.go:80] performDeletes(...): beginning
I0621 14:01:01.125750   31957 log.go:80] Planner trusts dependency graph, scheduling deletions in parallel
I0621 14:01:01.125771   31957 log.go:80] StepExecutor worker(-1): StepExecutor.waitForCompletion(): waiting for worker threads to exit
I0621 14:01:01.125789   31957 log.go:80] StepExecutor worker(-2): worker received nil chain, exiting
I0621 14:01:01.125805   31957 log.go:80] StepExecutor worker(-1): StepExecutor.waitForCompletion(): worker threads all exited
I0621 14:01:01.125849   31957 log.go:80] deploymentExecutor.Execute(...): step executor has completed
I0621 14:01:01.125941   31957 log.go:80] deploymentExecutor.Execute(...): exiting provider canceller
I0621 14:01:01.127232   31957 log.go:80] Explicitly ignoring and discarding error: rpc error: code = Canceled desc = grpc: the client connection is closing
I0621 14:01:01.127893   31957 log.go:80] *** Update(preview=true) complete ***
I0621 14:08:00.908301   31957 log.go:80] found username for access token
I0621 14:08:01.832782   31957 log.go:80] Explicitly ignoring and discarding error: no git repository found from /mnt/c/Projects/pulumi-trigger
I0621 14:08:02.199468   31957 log.go:80] found username for access token
I0621 14:08:02.199499   31957 log.go:80] Stack sandbox being updated to version 66
I0621 14:08:02.720866   31957 log.go:80] *** Starting Update(preview=false) ***
I0621 14:08:02.721501   31957 log.go:80] gatherPluginsFromProgram(): gathering plugins from language host
I0621 14:08:02.732753   31957 log.go:80] GetPluginPath(language, go, <nil>): found on $PATH /home/gb73800/.pulumi/bin/pulumi-language-go
I0621 14:08:02.732819   31957 log.go:80] Launching plugin 'go' from '/home/gb73800/.pulumi/bin/pulumi-language-go' with args: -root=/mnt/c/Projects/pulumi-trigger,127.0.0.1:61960
I0621 14:08:03.072952   31957 log.go:80] langhost[go].GetPluginInfo() executing
I0621 14:08:03.073528   31957 log.go:80] langhost[go].GetRequiredPlugins(proj=pulumi-trigger,pwd=/mnt/c/Projects/pulumi-trigger,program=.) executing
I0621 14:08:03.074082   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:03.074019   32471 log.go:80] GetRequiredPlugins: Determining pulumi packages
<{%reset%}>)
I0621 14:08:03.084012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:03.083940   32471 log.go:80] program go found in $PATH
<{%reset%}>)
I0621 14:08:04.469541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.469414   32471 log.go:80] GetRequiredPlugins: Found plugin name: aws, version: v5.41.0
<{%reset%}>)
I0621 14:08:04.479189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.479072   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pulumi/pulumi/sdk/v3, version: v3.69.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.480365   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.480198   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/Microsoft/go-winio, version: v0.6.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.481146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.480994   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/ProtonMail/go-crypto, version: v0.0.0-20230518184743-7afd39499903, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.482765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.482552   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/acomagu/bufpipe, version: v1.0.4, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.483484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.483312   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/aead/chacha20, version: v0.0.0-20180709150244-8b13a72661da, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.484713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.484583   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/agext/levenshtein, version: v1.2.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.485773   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.485500   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/apparentlymart/go-textseg/v13, version: v13.0.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.486396   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.486284   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/blang/semver, version: v3.5.1+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.486916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.486838   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/cheggaaa/pb, version: v1.0.29, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.487869   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.487782   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/cloudflare/circl, version: v1.3.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.488703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.488505   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/djherbis/times, version: v1.5.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.489272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.489180   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/emirpasic/gods, version: v1.18.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.489749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.489687   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/gcfg, version: v1.5.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.491043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.490936   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/go-billy/v5, version: v5.4.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.492209   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.492069   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/go-git/go-git/v5, version: v5.6.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.494429   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.493872   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/gogo/protobuf, version: v1.3.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.498096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.497946   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/golang/glog, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.499317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.499060   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/golang/protobuf, version: v1.5.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.503643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.503460   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/grpc-ecosystem/grpc-opentracing, version: v0.0.0-20180507213350-8e809c8a8645, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.504661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.504538   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/errwrap, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.505492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.505388   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/go-multierror, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.506863   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.506745   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/hashicorp/hcl/v2, version: v2.16.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.508245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.508118   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/imdario/mergo, version: v0.3.15, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.509381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.509267   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/inconshreveable/mousetrap, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.511656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.511345   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/jbenet/go-context, version: v0.0.0-20150711004518-d14ea06fba99, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.512986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.512838   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/kevinburke/ssh_config, version: v1.2.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.514361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.514190   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mattn/go-runewidth, version: v0.0.14, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.515787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.515600   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mitchellh/go-ps, version: v1.0.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.517447   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.517259   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/mitchellh/go-wordwrap, version: v1.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.519369   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.519206   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/opentracing/basictracer-go, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.521594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.521417   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/opentracing/opentracing-go, version: v1.2.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.523887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.523554   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pjbgf/sha1cd, version: v0.3.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.526148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.525997   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pkg/errors, version: v0.9.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.528593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.528361   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/pkg/term, version: v1.1.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.531149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.531019   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/rivo/uniseg, version: v0.4.4, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.532928   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.532756   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/rogpeppe/go-internal, version: v1.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.535168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.534973   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/sabhiram/go-gitignore, version: v0.0.0-20210923224102-525f6e181f06, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.537640   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.537441   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/santhosh-tekuri/jsonschema/v5, version: v5.3.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.539287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.538990   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/sergi/go-diff, version: v1.3.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.540706   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.540541   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/skeema/knownhosts, version: v1.1.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.542531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.542373   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/cast, version: v1.4.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.546338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.546133   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/cobra, version: v1.7.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.549117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.548967   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/spf13/pflag, version: v1.0.5, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.550931   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.550769   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/texttheater/golang-levenshtein, version: v1.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.553027   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.552791   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/tweekmonster/luser, version: v0.0.0-20161003172636-3fa38070dbd7, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.556839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.556621   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/uber/jaeger-client-go, version: v2.30.0+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.559018   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.558866   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/uber/jaeger-lib, version: v2.4.1+incompatible, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.561362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.561248   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/xanzy/ssh-agent, version: v0.3.3, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.562470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.562360   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: github.com/zclconf/go-cty, version: v1.13.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.563213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.563088   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: go.uber.org/atomic, version: v1.11.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.564243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.564050   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/crypto, version: v0.9.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.565929   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.565746   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/mod, version: v0.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.568100   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.567846   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/net, version: v0.10.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.572303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.571443   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/sys, version: v0.8.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.573531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.573410   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/term, version: v0.8.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.574740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.574457   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/text, version: v0.9.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.629972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.629806   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: golang.org/x/tools, version: v0.9.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.630981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.630878   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/genproto, version: v0.0.0-20230410155749-daa745c078e1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.632343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.632249   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/grpc, version: v1.55.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.633108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.633044   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: google.golang.org/protobuf, version: v1.30.0, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.633781   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.633715   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: gopkg.in/warnings.v0, version: v0.1.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.634368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.634302   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: gopkg.in/yaml.v3, version: v3.0.1, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.636066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.635973   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: lukechampine.com/frand, version: v1.4.2, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.637400   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.637263   32471 log.go:80] GetRequiredPlugins: Ignoring dependency: sourcegraph.com/sourcegraph/appdash, version: v0.0.0-20211028080628-e2786a622600, error: module is not a pulumi provider
<{%reset%}>)
I0621 14:08:04.637939   31957 log.go:80] langhost[go].GetRequiredPlugins(proj=pulumi-trigger,pwd=/mnt/c/Projects/pulumi-trigger,program=.) success: #versions=1
I0621 14:08:04.638041   31957 log.go:80] gatherPluginsFromProgram(): plugin go <nil> () is required by language host
I0621 14:08:04.638082   31957 log.go:80] gatherPluginsFromProgram(): plugin aws 5.41.0 () is required by language host
I0621 14:08:04.638110   31957 log.go:80] gatherPluginsFromSnapshot(): gathering plugins from snapshot
I0621 14:08:04.638152   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox", not a provider
I0621 14:08:04.638195   31957 log.go:80] gatherPluginsFromSnapshot(): plugin aws 5.41.0 is required by first-class provider "urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default"
I0621 14:08:04.638232   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy", not a provider
I0621 14:08:04.638271   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole", not a provider
I0621 14:08:04.638304   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo", not a provider
I0621 14:08:04.638336   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild", not a provider
I0621 14:08:04.638365   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy", not a provider
I0621 14:08:04.638394   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole", not a provider
I0621 14:08:04.638426   31957 log.go:80] gatherPluginsFromSnapshot(): skipping "urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule", not a provider
I0621 14:08:04.638467   31957 log.go:80] ensurePluginsAreInstalled(): beginning
I0621 14:08:04.686588   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:08:04.686744   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:08:04.686789   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:08:04.686811   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:08:04.686830   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:08:04.686849   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:08:04.686867   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:08:04.686885   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:08:04.686907   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:08:04.686926   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:08:04.686946   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:08:04.686973   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:08:04.687007   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:08:04.687030   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:08:04.687072   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:08:04.687106   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:08:04.687137   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:08:04.687166   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:08:04.687196   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:08:04.687232   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:08:04.687270   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:08:04.687301   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:08:04.687341   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:08:04.687374   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:08:04.688717   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:08:04.688972   31957 log.go:80] ensurePluginsAreInstalled(): plugin aws 5.41.0 already installed
I0621 14:08:04.714703   31957 log.go:80] GetPluginPath(language, go, <nil>): found on $PATH /home/gb73800/.pulumi/bin/pulumi-language-go
I0621 14:08:04.714889   31957 log.go:80] ensurePluginsAreInstalled(): plugin go <nil> already installed
I0621 14:08:04.714934   31957 log.go:80] ensurePluginsAreInstalled(): completed
I0621 14:08:04.714987   31957 log.go:80] computeDefaultProviderPlugins(): considering go
I0621 14:08:04.715024   31957 log.go:80] computeDefaultProviderPlugins(): skipping go, not a resource provider
I0621 14:08:04.715060   31957 log.go:80] computeDefaultProviderPlugins(): considering aws-5.41.0
I0621 14:08:04.715114   31957 log.go:80] computeDefaultProviderPlugins(): plugin aws-5.41.0 selected for package aws (first seen)
I0621 14:08:04.715153   31957 log.go:72] computeDefaultProviderPlugins(): summary of default plugins:
I0621 14:08:04.715177   31957 log.go:80]   aws             = 5.41.0
I0621 14:08:04.717034   31957 log.go:80] deploymentExecutor.Execute(...): waiting for incoming events
I0621 14:08:04.717102   31957 log.go:80] StepExecutor worker(-2): worker coming online
I0621 14:08:04.717200   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:04.717084   31957 log.go:80] langhost[go].Run(pwd=/mnt/c/Projects/pulumi-trigger,program=.,#args=0,proj=pulumi-trigger,stack=sandbox,#config=2,dryrun=false) executing
I0621 14:08:04.718299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.718216   32471 log.go:80] No prebuilt executable specified, attempting invocation via compilation
<{%reset%}>)
I0621 14:08:04.751122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.750988   32471 log.go:80] program go found in $PATH
<{%reset%}>)
I0621 14:08:04.751377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:04.751030   32471 log.go:80] Attempting to build go program in . with: /usr/local/go/bin/go build -o /tmp/pulumi-go.2760676884
<{%reset%}>)
I0621 14:08:27.986234   31957 log.go:80] ResourceMonitor.SupportsFeature(id: resourceReferences) = true
I0621 14:08:27.987124   31957 log.go:80] ResourceMonitor.SupportsFeature(id: outputValues) = true
I0621 14:08:27.987693   31957 log.go:80] ResourceMonitor.SupportsFeature(id: deletedWith) = true
I0621 14:08:27.988188   31957 log.go:80] ResourceMonitor.SupportsFeature(id: aliasSpecs) = true
I0621 14:08:27.989918   31957 log.go:80] ResourceMonitor.RegisterResource received: t=pulumi:pulumi:Stack, name=pulumi-trigger-sandbox, custom=false, #props=0, parent=, protect=false, provider=, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:27.990003   31957 log.go:80] EvalSourceIterator produced a registration: t=pulumi:pulumi:Stack,name=pulumi-trigger-sandbox,#props=0
I0621 14:08:27.990039   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:27.990070   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:27.990154   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox' after diff (same) (inputs=map[])
I0621 14:08:27.990180   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:08:27.990208   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:27.990228   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:27.990250   31957 log.go:80] StepExecutor worker(0): launching oneshot worker
I0621 14:08:27.990322   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox`
I0621 14:08:27.990345   31957 log.go:80] StepExecutor worker(0): applying step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox (preview false)
I0621 14:08:27.990378   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:27.990417   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:08:27.990435   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:08:27.990457   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:27.990472   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:27.990489   31957 log.go:80] StepExecutor worker(0): step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox retired
I0621 14:08:27.990514   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox
I0621 14:08:27.990569   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=pulumi:pulumi:Stack, urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=0
I0621 14:08:27.992009   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:27.992049   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:27.992127   31957 log.go:80] handling default provider request for package aws
I0621 14:08:27.992180   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:27.992202   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:27.992221   31957 log.go:80] newRegisterDefaultProviderEvent(aws): no version specified, falling back to default version
I0621 14:08:27.992253   31957 log.go:80] newRegisterDefaultProviderEvent(aws): default version hit on version 5.41.0
I0621 14:08:27.992272   31957 log.go:80] newRegisterDefaultProviderEvent(aws): no pluginDownloadURL specified, falling back to default pluginDownloadURL
I0621 14:08:27.992287   31957 log.go:80] newRegisterDefaultProviderEvent(aws): default pluginDownloadURL miss, sending empty string to engine
I0621 14:08:27.992323   31957 log.go:80] waiting for default provider for package aws
I0621 14:08:27.992353   31957 log.go:80] EvalSourceIterator produced a registration: t=pulumi:providers:aws,name=default,#props=2
I0621 14:08:27.992420   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:27.992445   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:27.992497   31957 log.go:80] ProviderRegistry.Check(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:08:28.008518   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:08:28.008577   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:08:28.008610   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:08:28.008626   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:08:28.008640   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:08:28.008656   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:08:28.008671   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:08:28.008685   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:08:28.008700   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:08:28.008714   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:08:28.008734   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:08:28.008751   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:08:28.008765   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:08:28.008780   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:08:28.008794   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:08:28.008808   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:08:28.008823   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:08:28.008837   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:08:28.008851   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:08:28.008865   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:08:28.008879   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:08:28.008893   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:08:28.008908   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:08:28.008923   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:08:28.008983   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:08:28.009036   31957 log.go:80] Launching plugin 'aws (resource)' from '/home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws' with args: 127.0.0.1:61960
I0621 14:08:31.064455   31957 log.go:80] Provider[aws, 0xc000c27f40].GetPluginInfo() executing
I0621 14:08:31.067904   31957 log.go:80] Provider[aws, 0xc000c27f40].GetPluginInfo() success (#version=5.41.0) success
I0621 14:08:31.067985   31957 log.go:80] Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:08:31.068030   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: region={eu-west-1}
I0621 14:08:31.068054   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: version={5.41.0}
I0621 14:08:31.068083   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
I0621 14:08:31.068244   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
I0621 14:08:31.079666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.079521   32767 provider.go:302] tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing
<{%reset%}>)
I0621 14:08:31.082452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082334   32767 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:08:31.082509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082367   32767 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:08:31.082539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082385   32767 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:08:31.082579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082394   32767 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:08:31.082631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082500   32767 schema.go:492] Created Terraform input: region = eu-west-1
<{%reset%}>)
I0621 14:08:31.082914   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082858   32767 schema.go:671] Created Terraform input: skip_region_validation = true (from Pulumi schema)
<{%reset%}>)
I0621 14:08:31.083015   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082893   32767 schema.go:671] Created Terraform input: skip_credentials_validation = false (from Pulumi schema)
<{%reset%}>)
I0621 14:08:31.083044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.082909   32767 schema.go:671] Created Terraform input: skip_metadata_api_check = true (from Pulumi schema)
<{%reset%}>)
I0621 14:08:31.083228   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.083182   32767 schema.go:502] Terraform input region = "eu-west-1"
<{%reset%}>)
I0621 14:08:31.083274   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.083204   32767 schema.go:502] Terraform input skip_region_validation = true
<{%reset%}>)
I0621 14:08:31.083319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.083212   32767 schema.go:502] Terraform input skip_credentials_validation = false
<{%reset%}>)
I0621 14:08:31.083353   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.083222   32767 schema.go:502] Terraform input skip_metadata_api_check = true
<{%reset%}>)
I0621 14:08:31.083393   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.083229   32767 schema.go:502] Terraform input __defaults = []interface {}{"skipCredentialsValidation", "skipMetadataApiCheck", "skipRegionValidation"}
<{%reset%}>)
I0621 14:08:31.847419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.847304   32767 log.go:75] Marshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
<{%reset%}>)
I0621 14:08:31.847531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:31.847344   32767 log.go:75] Marshaling property for RPC[tf.Provider[aws].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
<{%reset%}>)
I0621 14:08:31.852448   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).inputs]: region={eu-west-1}
I0621 14:08:31.852510   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).inputs]: version={5.41.0}
I0621 14:08:31.852546   31957 log.go:80] Provider[aws, 0xc000c27f40].CheckConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) success: inputs=#2 failures=#0
I0621 14:08:31.852582   31957 log.go:80] setProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::04da6b54-80e4-46f7-96ec-b56ff0331ba9)
I0621 14:08:31.852623   31957 log.go:80] ProviderRegistry.Diff(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default,c83b66f5-de02-42d0-a6eb-d3dd96164177): executing (#olds=2,#news=2)
I0621 14:08:31.852644   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::04da6b54-80e4-46f7-96ec-b56ff0331ba9)
I0621 14:08:31.852668   31957 log.go:80] Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) executing (#olds=2,#news=2)
I0621 14:08:31.852702   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: region={eu-west-1}
I0621 14:08:31.852739   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).olds]: version={5.41.0}
I0621 14:08:31.852769   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: region={eu-west-1}
I0621 14:08:31.852787   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default).news]: version={5.41.0}
I0621 14:08:31.858585   31957 log.go:80] Provider[aws, 0xc000c27f40].DiffConfig(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default) unimplemented rpc: returning DiffUnknown with no replaces
I0621 14:08:31.858660   31957 log.go:80] ProviderRegistry.Diff(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default,c83b66f5-de02-42d0-a6eb-d3dd96164177): executed (1, []resource.PropertyKey(nil))
I0621 14:08:31.858696   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default' after diff (same) (inputs=map[region:{eu-west-1} version:{5.41.0}])
I0621 14:08:31.858720   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:08:31.858749   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:31.858770   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:31.858787   31957 log.go:80] StepExecutor worker(1): launching oneshot worker
I0621 14:08:31.858818   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default`
I0621 14:08:31.858850   31957 log.go:80] StepExecutor worker(1): applying step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default (preview false)
I0621 14:08:31.858871   31957 log.go:80] Same(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:31.858888   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:31.883742   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): enabling new plugin behavior
I0621 14:08:31.883801   31957 log.go:80] SelectCompatiblePlugin(..., aws): beginning
I0621 14:08:31.883833   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-1.31.0: semver mismatch
I0621 14:08:31.883869   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.7.0: semver mismatch
I0621 14:08:31.883886   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.8.0: semver mismatch
I0621 14:08:31.883901   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.10.0: semver mismatch
I0621 14:08:31.883918   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.13.0: semver mismatch
I0621 14:08:31.883934   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.15.0: semver mismatch
I0621 14:08:31.883949   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.16.0: semver mismatch
I0621 14:08:31.883965   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.24.1: semver mismatch
I0621 14:08:31.883980   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-4.38.1: semver mismatch
I0621 14:08:31.883996   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.7.2: semver mismatch
I0621 14:08:31.884011   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.9.2: semver mismatch
I0621 14:08:31.884026   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.13.0: semver mismatch
I0621 14:08:31.884042   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.16.2: semver mismatch
I0621 14:08:31.884063   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.18.0: semver mismatch
I0621 14:08:31.884082   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.21.1: semver mismatch
I0621 14:08:31.884099   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.23.0: semver mismatch
I0621 14:08:31.884114   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.31.0: semver mismatch
I0621 14:08:31.884131   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.33.0: semver mismatch
I0621 14:08:31.884145   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.39.0: semver mismatch
I0621 14:08:31.884171   31957 log.go:80] SelectCompatiblePlugin(..., aws): skipping plugin aws-5.40.0: semver mismatch
I0621 14:08:31.884189   31957 log.go:80] SelectCompatiblePlugin(..., aws): best plugin aws-5.41.0: semver match
I0621 14:08:31.884205   31957 log.go:80] SelectCompatiblePlugin(..., aws): selecting plugin 'aws-5.41.0': best match 
I0621 14:08:31.884257   31957 log.go:80] GetPluginPath(resource, aws, 5.41.0): found in cache at /home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws
I0621 14:08:31.884293   31957 log.go:80] Launching plugin 'aws (resource)' from '/home/gb73800/.pulumi/plugins/resource-aws-v5.41.0/pulumi-resource-aws' with args: 127.0.0.1:61960
I0621 14:08:32.342828   31957 log.go:80] Provider[aws, 0xc000ef0500].GetPluginInfo() executing
I0621 14:08:32.343796   31957 log.go:80] Provider[aws, 0xc000ef0500].GetPluginInfo() success (#version=5.41.0) success
I0621 14:08:32.343878   31957 log.go:80] Provider[aws, 0xc000ef0500].Configure() executing (#vars=2)
I0621 14:08:32.343934   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Configure().inputs]: region={eu-west-1}
I0621 14:08:32.343965   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Configure().inputs]: version={5.41.0}
I0621 14:08:32.344006   31957 log.go:80] loaded provider urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177
I0621 14:08:32.344036   31957 log.go:80] setProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:32.344079   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:32.344113   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:08:32.344140   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:08:32.344198   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:32.344228   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:32.344264   31957 log.go:80] StepExecutor worker(1): step same on urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default retired
I0621 14:08:32.344312   31957 log.go:80] registered default provider for package aws: urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default
I0621 14:08:32.344348   31957 log.go:80] handling default provider request for package aws
I0621 14:08:32.344380   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:32.344389   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: defaultBranch={main}
I0621 14:08:32.344436   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryName={my-repo-2}
I0621 14:08:32.344483   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:codecommit/repository:Repository, name=my-repo, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:32.344546   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:codecommit/repository:Repository,name=my-repo,#props=2
I0621 14:08:32.344576   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:32.344594   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:32.344631   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:32.344680   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) executing (#olds=3,#news=2)
I0621 14:08:32.344405   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:32.344765   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: description={Policy to allow git pull}
I0621 14:08:32.344814   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: name={GitPullPolicy2}
I0621 14:08:32.344846   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: path={/}
I0621 14:08:32.344877   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.344913   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/policy:Policy, name=git-policy, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:32.344944   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/policy:Policy,name=git-policy,#props=4
I0621 14:08:32.347453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347366      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Configure().args]: region={eu-west-1}
<{%reset%}>)
I0621 14:08:32.347532   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347414      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Configure().args]: version={5.41.0}
<{%reset%}>)
I0621 14:08:32.347579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347501      25 schema.go:492] Created Terraform input: region = eu-west-1
<{%reset%}>)
I0621 14:08:32.347625   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347541      25 schema.go:671] Created Terraform input: skip_region_validation = true (from Pulumi schema)
<{%reset%}>)
I0621 14:08:32.347657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347563      25 schema.go:671] Created Terraform input: skip_credentials_validation = false (from Pulumi schema)
<{%reset%}>)
I0621 14:08:32.347731   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347576      25 schema.go:671] Created Terraform input: skip_metadata_api_check = true (from Pulumi schema)
<{%reset%}>)
I0621 14:08:32.347777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347633      25 schema.go:502] Terraform input region = "eu-west-1"
<{%reset%}>)
I0621 14:08:32.347808   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347679      25 schema.go:502] Terraform input skip_region_validation = true
<{%reset%}>)
I0621 14:08:32.347841   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347693      25 schema.go:502] Terraform input skip_credentials_validation = false
<{%reset%}>)
I0621 14:08:32.347906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347702      25 schema.go:502] Terraform input skip_metadata_api_check = true
<{%reset%}>)
I0621 14:08:32.347968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.347715      25 schema.go:502] Terraform input __defaults = []interface {}{"skipCredentialsValidation", "skipMetadataApiCheck", "skipRegionValidation"}
<{%reset%}>)
I0621 14:08:32.756213   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: __defaults={[]}
I0621 14:08:32.756275   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: defaultBranch={main}
I0621 14:08:32.756299   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryName={my-repo-2}
I0621 14:08:32.756319   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: defaultBranch={main}
I0621 14:08:32.756335   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: repositoryName={my-repo-2}
I0621 14:08:32.757690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757582      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:08:32.757760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757618      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.757799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757630      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={main}
<{%reset%}>)
I0621 14:08:32.757826   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757638      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:32.757881   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757658      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:08:32.757927   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757667      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:32.758088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757684      25 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:08:32.758112   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757704      25 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:08:32.758133   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757729      25 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:08:32.758153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757739      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:32.758182   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757747      25 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:08:32.758204   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757815      25 schema.go:881] Terraform output repositoryName = {my-repo-2}
<{%reset%}>)
I0621 14:08:32.758242   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757829      25 schema.go:881] Terraform output defaultBranch = {main}
<{%reset%}>)
I0621 14:08:32.758282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757841      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:32.758324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757861      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.758353   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757911      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: defaultBranch={main}
<{%reset%}>)
I0621 14:08:32.758386   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.757950      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).inputs]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:32.758388   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: __defaults={[]}
I0621 14:08:32.758445   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: defaultBranch={main}
I0621 14:08:32.758477   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).inputs]: repositoryName={my-repo-2}
I0621 14:08:32.758508   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) success: inputs=#3 failures=#0
I0621 14:08:32.758559   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2): executing (#olds=10,#news=3)
I0621 14:08:32.758599   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:08:32.758631   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:32.758659   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:32.758688   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: defaultBranch={}
I0621 14:08:32.758715   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: description={}
I0621 14:08:32.758740   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: id={my-repo-2}
I0621 14:08:32.758774   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:08:32.758812   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: repositoryName={my-repo-2}
I0621 14:08:32.758846   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: tags={map[]}
I0621 14:08:32.758881   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).olds]: tagsAll={map[]}
I0621 14:08:32.758914   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: __defaults={[]}
I0621 14:08:32.758943   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: defaultBranch={main}
I0621 14:08:32.758969   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2).news]: repositoryName={my-repo-2}
I0621 14:08:32.759620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759496      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:08:32.759704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759527      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:08:32.759746   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759538      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:32.759768   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759561      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:32.759790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759570      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={}
<{%reset%}>)
I0621 14:08:32.759810   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759579      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: description={}
<{%reset%}>)
I0621 14:08:32.759831   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759587      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: id={my-repo-2}
<{%reset%}>)
I0621 14:08:32.759872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759601      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:08:32.759922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759621      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:32.759975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759641      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:32.760005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759656      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:32.760041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759680      25 schema.go:492] Created Terraform input: arn = arn:aws:codecommit:eu-west-1:103429827345:my-repo-2
<{%reset%}>)
I0621 14:08:32.760068   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759728      25 schema.go:492] Created Terraform input: clone_url_http = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:32.760089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759770      25 schema.go:492] Created Terraform input: default_branch = 
<{%reset%}>)
I0621 14:08:32.760109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759785      25 schema.go:492] Created Terraform input: repository_id = 3b554ab5-e4e5-44c5-b190-3a222971c3e6
<{%reset%}>)
I0621 14:08:32.760130   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759833      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:32.760151   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759850      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:32.760187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759861      25 schema.go:492] Created Terraform input: clone_url_ssh = ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:32.760210   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759873      25 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:08:32.760229   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759890      25 schema.go:492] Created Terraform input: id = my-repo-2
<{%reset%}>)
I0621 14:08:32.760257   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759904      25 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:08:32.760279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.759967      25 schema.go:502] Terraform input clone_url_http = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:32.760301   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760005      25 schema.go:502] Terraform input default_branch = ""
<{%reset%}>)
I0621 14:08:32.760319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760018      25 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:08:32.760337   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760024      25 schema.go:502] Terraform input id = "my-repo-2"
<{%reset%}>)
I0621 14:08:32.760354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760032      25 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:08:32.760374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760045      25 schema.go:502] Terraform input arn = "arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:32.760397   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760063      25 schema.go:502] Terraform input repository_id = "3b554ab5-e4e5-44c5-b190-3a222971c3e6"
<{%reset%}>)
I0621 14:08:32.760419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760073      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:32.760438   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760082      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:32.760458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760090      25 schema.go:502] Terraform input clone_url_ssh = "ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:32.760481   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760139      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.760517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760149      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:08:32.760579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760157      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:32.760623   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760175      25 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:08:32.760672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760198      25 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:08:32.760693   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760206      25 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:08:32.760712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.760214      25 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:08:32.777688   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo,my-repo-2) success: changes=2 #replaces=[] #stables=[repositoryName] delbefrepl=false, diffs=#[defaultBranch], detaileddiff=map[defaultBranch:kind:UPDATE]
I0621 14:08:32.777782   31957 log.go:80] Planner decided to update 'urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo' (oldprops=map[__defaults:{[]} defaultBranch:{main} repositoryName:{my-repo-2}] inputs=map[__defaults:{[]} defaultBranch:{main} repositoryName:{my-repo-2}])
I0621 14:08:32.777813   31957 log.go:80] Checking step update for urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:08:32.777851   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:32.777881   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:32.777925   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:32.777970   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy) executing (#olds=5,#news=4)
I0621 14:08:32.777999   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: __defaults={[]}
I0621 14:08:32.778105   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: description={Policy to allow git pull}
I0621 14:08:32.778129   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: name={GitPullPolicy2}
I0621 14:08:32.778145   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: path={/}
I0621 14:08:32.778179   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.778199   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: description={Policy to allow git pull}
I0621 14:08:32.778217   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: name={GitPullPolicy2}
I0621 14:08:32.778233   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: path={/}
I0621 14:08:32.778252   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.777927   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:32.778384   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:32.778423   31957 log.go:80] StepExecutor worker(2): launching oneshot worker
I0621 14:08:32.778495   31957 log.go:80] SnapshotManager: Beginning mutation for step `update` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo`
I0621 14:08:32.778516   31957 log.go:80] SnapshotManager.doUpdate(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo)
I0621 14:08:32.778544   31957 log.go:80] SnapshotManager.markPendingOperation(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo, updating)
I0621 14:08:32.778886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778765      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:08:32.778958   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778802      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.779027   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778834      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.779081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778851      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.779170   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778864      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:08:32.779238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778888      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.779281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778917      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.779315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778940      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.779352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.778958      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:08:32.779385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779004      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.779421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779027      25 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:08:32.779451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779041      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:32.779507   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779059      25 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:32.779555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779072      25 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:08:32.779661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779093      25 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:08:32.779716   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779109      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:32.779858   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779151      25 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:32.779914   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779168      25 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:08:32.779944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.779177      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:32.780800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780730      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:32.780857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780763      25 schema.go:881] Terraform output name = {GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.780907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780778      25 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:08:32.780944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780800      25 schema.go:881] Terraform output policy = {{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.781013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780814      25 schema.go:881] Terraform output description = {Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.781076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780837      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.781118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780852      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.781153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780877      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.781202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780893      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: path={/}
<{%reset%}>)
I0621 14:08:32.781232   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.780908      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).inputs]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.781395   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: __defaults={[]}
I0621 14:08:32.781447   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: description={Policy to allow git pull}
I0621 14:08:32.781476   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: name={GitPullPolicy2}
I0621 14:08:32.781504   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: path={/}
I0621 14:08:32.781535   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy).inputs]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.781566   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy) success: inputs=#5 failures=#0
I0621 14:08:32.781603   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2): executing (#olds=10,#news=5)
I0621 14:08:32.781645   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:08:32.781676   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: description={Policy to allow git pull}
I0621 14:08:32.781707   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:08:32.781741   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: name={GitPullPolicy2}
I0621 14:08:32.781771   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: namePrefix={}
I0621 14:08:32.781804   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: path={/}
I0621 14:08:32.781843   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.781875   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: policyId={ANPARQFHF5MIXBMIUNZQX}
I0621 14:08:32.781907   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: tags={map[]}
I0621 14:08:32.781960   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).olds]: tagsAll={map[]}
I0621 14:08:32.781993   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: __defaults={[]}
I0621 14:08:32.782024   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: description={Policy to allow git pull}
I0621 14:08:32.782052   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: name={GitPullPolicy2}
I0621 14:08:32.782078   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: path={/}
I0621 14:08:32.782107   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:32.869003   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy,arn:aws:iam::103429827345:policy/GitPullPolicy2) success: changes=1 #replaces=[] #stables=[name path description namePrefix] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:32.869143   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy' after diff (same) (inputs=map[__defaults:{[]} description:{Policy to allow git pull} name:{GitPullPolicy2} path:{/} policy:{{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}])
I0621 14:08:32.869190   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:08:32.869236   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:32.869602   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:32.869649   31957 log.go:80] StepExecutor worker(3): launching oneshot worker
I0621 14:08:32.869760   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy`
I0621 14:08:32.869791   31957 log.go:80] StepExecutor worker(3): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy (preview false)
I0621 14:08:32.869822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782604      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:08:32.869910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782642      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.869974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782660      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.870013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782673      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.870061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782685      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.870108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782697      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: namePrefix={}
<{%reset%}>)
I0621 14:08:32.870128   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:32.870202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782710      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:08:32.870243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782721      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.870323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782750      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: policyId={ANPARQFHF5MIXBMIUNZQX}
<{%reset%}>)
I0621 14:08:32.870362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782771      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:32.870409   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782786      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:32.870460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782812      25 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:08:32.870498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782826      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:32.870541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782846      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:32.870603   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782870      25 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:policy/GitPullPolicy2
<{%reset%}>)
I0621 14:08:32.870636   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782885      25 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:08:32.870676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782921      25 schema.go:492] Created Terraform input: id = arn:aws:iam::103429827345:policy/GitPullPolicy2
<{%reset%}>)
I0621 14:08:32.870704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782941      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:32.870763   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782953      25 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:08:32.870851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782978      25 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:32.870894   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.782995      25 schema.go:492] Created Terraform input: policy_id = ANPARQFHF5MIXBMIUNZQX
<{%reset%}>)
I0621 14:08:32.870923   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783007      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:32.870968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783021      25 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:policy/GitPullPolicy2"
<{%reset%}>)
I0621 14:08:32.871001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783035      25 schema.go:502] Terraform input policy_id = "ANPARQFHF5MIXBMIUNZQX"
<{%reset%}>)
I0621 14:08:32.871048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783047      25 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:08:32.871075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783059      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:32.871106   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783070      25 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:08:32.871144   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783081      25 schema.go:502] Terraform input id = "arn:aws:iam::103429827345:policy/GitPullPolicy2"
<{%reset%}>)
I0621 14:08:32.871185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783102      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:32.871216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783115      25 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:08:32.871259   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783127      25 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:32.871306   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783195      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:32.871349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783209      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: description={Policy to allow git pull}
<{%reset%}>)
I0621 14:08:32.871402   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783225      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: name={GitPullPolicy2}
<{%reset%}>)
I0621 14:08:32.871441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783237      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:08:32.871691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783250      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy/aws_iam_policy).news]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:32.871759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783271      25 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:32.871805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783287      25 schema.go:492] Created Terraform input: description = Policy to allow git pull
<{%reset%}>)
I0621 14:08:32.871839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783299      25 schema.go:492] Created Terraform input: name = GitPullPolicy2
<{%reset%}>)
I0621 14:08:32.871872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783312      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:32.871904   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783323      25 schema.go:502] Terraform input name = "GitPullPolicy2"
<{%reset%}>)
I0621 14:08:32.871933   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783335      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:32.871987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783347      25 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codecommit:GitPull\",\"codecommit:GitPush\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:32.872018   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:32.783362      25 schema.go:502] Terraform input description = "Policy to allow git pull"
<{%reset%}>)
I0621 14:08:33.245096   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:08:33.245174   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:08:33.245130   31957 log.go:80] StepExecutor worker(2): applying step update on urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo (preview false)
I0621 14:08:33.245262   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:33.245308   31957 log.go:80] Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) executing (#olds=10,#news=3)
I0621 14:08:33.245350   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:08:33.245381   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:33.245405   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:33.245427   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: defaultBranch={}
I0621 14:08:33.245467   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: description={}
I0621 14:08:33.245491   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: id={my-repo-2}
I0621 14:08:33.245212   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:33.245564   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:33.245602   31957 log.go:80] StepExecutor worker(3): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy retired
I0621 14:08:33.245629   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy
I0621 14:08:33.245655   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/policy:Policy, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy, #outs=10
I0621 14:08:33.245680   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: arn={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:08:33.245701   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: description={Policy to allow git pull}
I0621 14:08:33.245720   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: id={arn:aws:iam::103429827345:policy/GitPullPolicy2}
I0621 14:08:33.245736   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: name={GitPullPolicy2}
I0621 14:08:33.245773   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: namePrefix={}
I0621 14:08:33.245791   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: path={/}
I0621 14:08:33.245810   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policy={{"Statement":[{"Action":["codecommit:GitPull","codecommit:GitPush"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}
I0621 14:08:33.245827   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: policyId={ANPARQFHF5MIXBMIUNZQX}
I0621 14:08:33.245846   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: tags={map[]}
I0621 14:08:33.245867   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,git-policy)]: tagsAll={map[]}
I0621 14:08:33.245528   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:08:33.246025   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: repositoryName={my-repo-2}
I0621 14:08:33.246066   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: tags={map[]}
I0621 14:08:33.246092   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).olds]: tagsAll={map[]}
I0621 14:08:33.246125   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: __defaults={[]}
I0621 14:08:33.246149   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: defaultBranch={main}
I0621 14:08:33.246167   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).news]: repositoryName={my-repo-2}
I0621 14:08:33.247306   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:33.247369   31957 log.go:80] handling default provider request for package aws
I0621 14:08:33.247409   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:33.247430   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:33.247479   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:08:33.247513   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:08:33.247568   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/role:Role, name=codeBuildRole, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::git-policy], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:33.247615   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/role:Role,name=codeBuildRole,#props=2
I0621 14:08:33.247655   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:33.247687   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:33.247729   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:33.247803   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole) executing (#olds=7,#news=2)
I0621 14:08:33.247926   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:33.247980   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:08:33.248006   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: forceDetachPolicies={false}
I0621 14:08:33.248031   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:08:33.248054   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: maxSessionDuration={3600}
I0621 14:08:33.248073   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: name={codeBuildRole-615d8ed}
I0621 14:08:33.248092   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).olds]: path={/}
I0621 14:08:33.248115   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).news]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:08:33.248136   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:08:33.248890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248815      25 provider.go:1001] tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository) executing
<{%reset%}>)
I0621 14:08:33.248953   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248867      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:08:33.249002   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248916      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.249053   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248932      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.249094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248941      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:08:33.249122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.248960      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: defaultBranch={}
<{%reset%}>)
I0621 14:08:33.249147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249050      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: description={}
<{%reset%}>)
I0621 14:08:33.249185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249080      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: id={my-repo-2}
<{%reset%}>)
I0621 14:08:33.249208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249103      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:08:33.249236   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249123      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:33.249259   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249150      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:33.249286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249174      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:33.249320   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249215      25 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:08:33.249350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249250      25 schema.go:492] Created Terraform input: id = my-repo-2
<{%reset%}>)
I0621 14:08:33.249380   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249306      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:33.249410   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249336      25 schema.go:492] Created Terraform input: clone_url_http = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:33.249461   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249365      25 schema.go:492] Created Terraform input: clone_url_ssh = ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:33.249551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249393      25 schema.go:492] Created Terraform input: repository_id = 3b554ab5-e4e5-44c5-b190-3a222971c3e6
<{%reset%}>)
I0621 14:08:33.249611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249436      25 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:08:33.249642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249521      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:33.249678   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249548      25 schema.go:492] Created Terraform input: arn = arn:aws:codecommit:eu-west-1:103429827345:my-repo-2
<{%reset%}>)
I0621 14:08:33.249700   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249567      25 schema.go:492] Created Terraform input: default_branch = 
<{%reset%}>)
I0621 14:08:33.249728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249580      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:33.249879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249607      25 schema.go:502] Terraform input default_branch = ""
<{%reset%}>)
I0621 14:08:33.249917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249621      25 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:08:33.249954   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249634      25 schema.go:502] Terraform input clone_url_http = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:33.249990   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249650      25 schema.go:502] Terraform input clone_url_ssh = "ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:33.250033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249664      25 schema.go:502] Terraform input repository_id = "3b554ab5-e4e5-44c5-b190-3a222971c3e6"
<{%reset%}>)
I0621 14:08:33.250068   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249679      25 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:08:33.250107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249692      25 schema.go:502] Terraform input id = "my-repo-2"
<{%reset%}>)
I0621 14:08:33.250136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249705      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:33.250168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249719      25 schema.go:502] Terraform input arn = "arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:33.250222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249803      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:33.250278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249824      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: defaultBranch={main}
<{%reset%}>)
I0621 14:08:33.250314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249844      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).news]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:33.250348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249879      25 schema.go:492] Created Terraform input: default_branch = main
<{%reset%}>)
I0621 14:08:33.250378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249906      25 schema.go:492] Created Terraform input: repository_name = my-repo-2
<{%reset%}>)
I0621 14:08:33.250416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249924      25 schema.go:502] Terraform input default_branch = "main"
<{%reset%}>)
I0621 14:08:33.250459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.249941      25 schema.go:502] Terraform input repository_name = "my-repo-2"
<{%reset%}>)
I0621 14:08:33.250499   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250056      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:33.250539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250081      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:33.250573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.250625   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.250686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.250721   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.250761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.250795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.250834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.250868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.250906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.250939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.250976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:33.251037   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250093      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:33.251136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250124      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:08:33.251195   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250156      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:33.251237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250181      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.251265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250191      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:08:33.251289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250204      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:33.251310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.251333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.251351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.251374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.251394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.251416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.251445   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.251469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.251488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.251509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.251528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:33.251554   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250222      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:08:33.251582   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250243      25 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:08:33.251606   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.251626   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.251654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.251684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.251719   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.251752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.251842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.251889   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.251937   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.251987   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:33.252040   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:08:33.252064   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: forceDetachPolicies={false}
I0621 14:08:33.252103   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:08:33.252126   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: maxSessionDuration={3600}
I0621 14:08:33.252145   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: name={codeBuildRole-615d8ed}
I0621 14:08:33.252163   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole).inputs]: path={/}
I0621 14:08:33.252183   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole) success: inputs=#7 failures=#0
I0621 14:08:33.252226   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed): executing (#olds=16,#news=7)
I0621 14:08:33.251995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.252280   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:33.252375   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
I0621 14:08:33.252333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:33.252407   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: createDate={2023-06-21T12:44:17Z}
I0621 14:08:33.252499   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: description={}
I0621 14:08:33.252522   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: forceDetachPolicies={false}
I0621 14:08:33.252540   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: id={codeBuildRole-615d8ed}
I0621 14:08:33.252559   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: inlinePolicies={[]}
I0621 14:08:33.252596   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
I0621 14:08:33.252621   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: maxSessionDuration={3600}
I0621 14:08:33.252643   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: name={codeBuildRole-615d8ed}
I0621 14:08:33.252661   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: namePrefix={}
I0621 14:08:33.252679   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: path={/}
I0621 14:08:33.252707   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:08:33.252730   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: lastUsedDate={}
I0621 14:08:33.252748   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: region={}
I0621 14:08:33.252766   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: tags={map[]}
I0621 14:08:33.252789   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: tagsAll={map[]}
I0621 14:08:33.252809   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).olds]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
I0621 14:08:33.252841   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:33.252875   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: assumeRolePolicy={{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}}
I0621 14:08:33.252458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250466      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeCommitFullAccess arn:aws:iam::103429827345:policy/GitPullPolicy2]
<{%reset%}>)
I0621 14:08:33.252972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250490      25 schema.go:671] Created Terraform input: name = codeBuildRole-615d8ed (from old default)
<{%reset%}>)
I0621 14:08:33.253012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250516      25 schema.go:756] Created Terraform input: force_detach_policies = false (from old default)
<{%reset%}>)
I0621 14:08:33.253037   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250540      25 schema.go:756] Created Terraform input: path = / (from old default)
<{%reset%}>)
I0621 14:08:33.253061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250565      25 schema.go:756] Created Terraform input: max_session_duration = 3600 (from old default)
<{%reset%}>)
I0621 14:08:33.253088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250585      25 schema.go:502] Terraform input assume_role_policy = "{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\"sts:AssumeRole\"],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"Service\": [\"codebuild.amazonaws.com\"]\n\t\t\t}\n\t\t}\n\t]\n}"
<{%reset%}>)
I0621 14:08:33.253114   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250621      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2"}
<{%reset%}>)
I0621 14:08:33.253138   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250716      25 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:33.253159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250747      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:33.253181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250772      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:33.253203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250787      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:33.253226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.250801      25 schema.go:502] Terraform input __defaults = []interface {}{"forceDetachPolicies", "maxSessionDuration", "name", "path"}
<{%reset%}>)
I0621 14:08:33.253252   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251314      25 schema.go:881] Terraform output managedPolicyArns = {[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:08:33.253281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251343      25 schema.go:881] Terraform output name = {codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.253394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251380      25 schema.go:881] Terraform output forceDetachPolicies = {false}
<{%reset%}>)
I0621 14:08:33.253426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251396      25 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:08:33.252914   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: forceDetachPolicies={false}
I0621 14:08:33.253504   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
I0621 14:08:33.253531   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: maxSessionDuration={3600}
I0621 14:08:33.253549   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: name={codeBuildRole-615d8ed}
I0621 14:08:33.253570   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed).news]: path={/}
I0621 14:08:33.253460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251405      25 schema.go:881] Terraform output maxSessionDuration = {3600}
<{%reset%}>)
I0621 14:08:33.254039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251415      25 schema.go:881] Terraform output __defaults = {[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:33.254115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251426      25 schema.go:881] Terraform output assumeRolePolicy = {{
<{%reset%}>)
I0621 14:08:33.254157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.254190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.254225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.254257   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.254290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.254320   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.254365   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.254417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.254457   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.254494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.254532   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:33.254583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251443      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:33.254680   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251455      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:33.254729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.254770   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.254809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.254832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.254852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.254870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.254891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.254910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.254935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.254964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.254996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:33.255034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251465      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:33.255118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251478      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:08:33.255165   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251488      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:33.255223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251497      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.255260   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.251506      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).inputs]: path={/}
<{%reset%}>)
I0621 14:08:33.255301   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254260      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:08:33.255341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254314      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.255385   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254339      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:33.255412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254354      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: createDate={2023-06-21T12:44:17Z}
<{%reset%}>)
I0621 14:08:33.255433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254370      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: description={}
<{%reset%}>)
I0621 14:08:33.255484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254391      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:33.255520   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254407      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: id={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.255567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254434      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: inlinePolicies={[]}
<{%reset%}>)
I0621 14:08:33.255600   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254474      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
<{%reset%}>)
I0621 14:08:33.255625   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254496      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:33.255645   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254519      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.255668   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254533      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: namePrefix={}
<{%reset%}>)
I0621 14:08:33.255689   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254553      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:08:33.255793   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254571      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: lastUsedDate={}
<{%reset%}>)
I0621 14:08:33.255845   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254592      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: region={}
<{%reset%}>)
I0621 14:08:33.255883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254642      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
<{%reset%}>)
I0621 14:08:33.255915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254740      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:33.255975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254824      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:33.256017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254851      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).olds]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
<{%reset%}>)
I0621 14:08:33.256057   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.254998      25 schema.go:492] Created Terraform input: assume_role_policy = {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:33.256102   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255034      25 schema.go:492] Created Terraform input: create_date = 2023-06-21T12:44:17Z
<{%reset%}>)
I0621 14:08:33.256139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255069      25 schema.go:492] Created Terraform input: inline_policy = []
<{%reset%}>)
I0621 14:08:33.256172   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255110      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::103429827345:policy/GitPullPolicy2 arn:aws:iam::aws:policy/AWSCodeCommitFullAccess]
<{%reset%}>)
I0621 14:08:33.256213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255218      25 schema.go:492] Created Terraform input: last_used_date = 
<{%reset%}>)
I0621 14:08:33.256246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255239      25 schema.go:492] Created Terraform input: region = 
<{%reset%}>)
I0621 14:08:33.256290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255257      25 schema.go:502] Terraform input last_used_date = ""
<{%reset%}>)
I0621 14:08:33.256372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255270      25 schema.go:502] Terraform input region = ""
<{%reset%}>)
I0621 14:08:33.256437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255282      25 schema.go:492] Created Terraform input: role_last_used = [map[last_used_date: region:]]
<{%reset%}>)
I0621 14:08:33.256477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255312      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:33.256512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255324      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:33.256551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255347      25 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:08:33.256583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255369      25 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:08:33.256624   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255406      25 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:08:33.256659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255427      25 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:33.256697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255444      25 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:08:33.256730   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255540      25 schema.go:492] Created Terraform input: id = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:33.256769   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255565      25 schema.go:492] Created Terraform input: name = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:33.256802   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255589      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:33.256852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255628      25 schema.go:492] Created Terraform input: unique_id = AROARQFHF5MIT5ZGBFXCO
<{%reset%}>)
I0621 14:08:33.256893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255641      25 schema.go:502] Terraform input create_date = "2023-06-21T12:44:17Z"
<{%reset%}>)
I0621 14:08:33.256936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255661      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess"}
<{%reset%}>)
I0621 14:08:33.256974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255683      25 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:33.257014   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255705      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:33.257058   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255739      25 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:33.257100   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255798      25 schema.go:502] Terraform input assume_role_policy = "{\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"codebuild.amazonaws.com\"]}}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:33.257136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255824      25 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:08:33.257174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255849      25 schema.go:502] Terraform input unique_id = "AROARQFHF5MIT5ZGBFXCO"
<{%reset%}>)
I0621 14:08:33.257224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255858      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:33.257270   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255874      25 schema.go:502] Terraform input id = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:33.257304   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255887      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:33.257343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255899      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:33.257381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255910      25 schema.go:502] Terraform input role_last_used = []interface {}{map[string]interface {}{"last_used_date":"", "region":""}}
<{%reset%}>)
I0621 14:08:33.257417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255929      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:33.257458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255940      25 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:08:33.257611   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.255947      25 schema.go:502] Terraform input inline_policy = []interface {}(nil)
<{%reset%}>)
I0621 14:08:33.257662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256102      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:33.257703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256131      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:33.257737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.257778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.257817   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.257853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.257885   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.257923   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.257959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.257995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.258030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.258072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.258106   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:33.258176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256148      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:33.258237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256174      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]}
<{%reset%}>)
I0621 14:08:33.258280   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256187      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:33.258323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256196      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: name={codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:33.258373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256209      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole/aws_iam_role).news]: path={/}
<{%reset%}>)
I0621 14:08:33.258415   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256235      25 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:08:33.258449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:33.258542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	"Statement": [
<{%reset%}>)
I0621 14:08:33.258595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		{
<{%reset%}>)
I0621 14:08:33.258638   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Action": ["sts:AssumeRole"],
<{%reset%}>)
I0621 14:08:33.258672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Effect": "Allow",
<{%reset%}>)
I0621 14:08:33.258708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"Principal": {
<{%reset%}>)
I0621 14:08:33.258742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"Service": ["codebuild.amazonaws.com"]
<{%reset%}>)
I0621 14:08:33.258779   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			}
<{%reset%}>)
I0621 14:08:33.258810   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:33.258849   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	]
<{%reset%}>)
I0621 14:08:33.258882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:33.258921   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256250      25 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:08:33.258970   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256303      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess arn:aws:iam::aws:policy/CloudWatchLogsFullAccess arn:aws:iam::aws:policy/AWSCodeCommitFullAccess arn:aws:iam::103429827345:policy/GitPullPolicy2]
<{%reset%}>)
I0621 14:08:33.259022   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256321      25 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:08:33.259061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256331      25 schema.go:492] Created Terraform input: name = codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:33.259136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256403      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:33.259201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256430      25 schema.go:502] Terraform input name = "codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:33.259245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256447      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:33.259282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256458      25 schema.go:502] Terraform input assume_role_policy = "{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\"sts:AssumeRole\"],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"Service\": [\"codebuild.amazonaws.com\"]\n\t\t\t}\n\t\t}\n\t]\n}"
<{%reset%}>)
I0621 14:08:33.259315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256474      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:33.259364   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256489      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess", "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess", "arn:aws:iam::103429827345:policy/GitPullPolicy2"}
<{%reset%}>)
I0621 14:08:33.259406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.256505      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:33.266765   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole,codeBuildRole-615d8ed) success: changes=1 #replaces=[] #stables=[namePrefix path name] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:33.266940   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole' after diff (same) (inputs=map[__defaults:{[{forceDetachPolicies} {maxSessionDuration} {name} {path}]} assumeRolePolicy:{{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Action": ["sts:AssumeRole"],
			"Effect": "Allow",
			"Principal": {
				"Service": ["codebuild.amazonaws.com"]
			}
		}
	]
}} forceDetachPolicies:{false} managedPolicyArns:{[{arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2}]} maxSessionDuration:{3600} name:{codeBuildRole-615d8ed} path:{/}])
I0621 14:08:33.267004   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:08:33.267044   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:33.267075   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:33.267104   31957 log.go:80] StepExecutor worker(4): launching oneshot worker
I0621 14:08:33.267229   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole`
I0621 14:08:33.267265   31957 log.go:80] StepExecutor worker(4): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole (preview false)
I0621 14:08:33.267422   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:33.267466   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:08:33.267496   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:08:33.267573   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:33.267602   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:33.267636   31957 log.go:80] StepExecutor worker(4): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole retired
I0621 14:08:33.267673   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole
I0621 14:08:33.267713   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/role:Role, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole, #outs=16
I0621 14:08:33.267749   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: arn={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:33.267783   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: assumeRolePolicy={{"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"}}
I0621 14:08:33.267814   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: createDate={2023-06-21T12:44:17Z}
I0621 14:08:33.267853   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: description={}
I0621 14:08:33.267891   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: forceDetachPolicies={false}
I0621 14:08:33.267921   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: id={codeBuildRole-615d8ed}
I0621 14:08:33.267970   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: inlinePolicies={[]}
I0621 14:08:33.268010   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/CloudWatchLogsFullAccess} {arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess} {arn:aws:iam::103429827345:policy/GitPullPolicy2} {arn:aws:iam::aws:policy/AWSCodeCommitFullAccess}]}
I0621 14:08:33.268045   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: maxSessionDuration={3600}
I0621 14:08:33.268077   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: name={codeBuildRole-615d8ed}
I0621 14:08:33.268106   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: namePrefix={}
I0621 14:08:33.268137   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: path={/}
I0621 14:08:33.268181   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:08:33.268215   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: lastUsedDate={}
I0621 14:08:33.268246   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: region={}
I0621 14:08:33.268277   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: tags={map[]}
I0621 14:08:33.268319   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: tagsAll={map[]}
I0621 14:08:33.268352   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,codeBuildRole)]: uniqueId={AROARQFHF5MIT5ZGBFXCO}
I0621 14:08:33.826222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826071      25 schema.go:881] Terraform output tags = {map[]}
<{%reset%}>)
I0621 14:08:33.826286   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826102      25 schema.go:881] Terraform output cloneUrlHttp = {https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.826320   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826112      25 schema.go:881] Terraform output defaultBranch = {}
<{%reset%}>)
I0621 14:08:33.826339   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826118      25 schema.go:881] Terraform output cloneUrlSsh = {ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.826359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826124      25 schema.go:881] Terraform output repositoryId = {3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:08:33.826377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826130      25 schema.go:881] Terraform output id = {my-repo-2}
<{%reset%}>)
I0621 14:08:33.826403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826136      25 schema.go:881] Terraform output arn = {arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:08:33.826428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826170      25 schema.go:881] Terraform output description = {}
<{%reset%}>)
I0621 14:08:33.826502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826178      25 schema.go:881] Terraform output repositoryName = {my-repo-2}
<{%reset%}>)
I0621 14:08:33.826554   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826197      25 schema.go:881] Terraform output tagsAll = {map[]}
<{%reset%}>)
I0621 14:08:33.826614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826217      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
<{%reset%}>)
I0621 14:08:33.826657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826226      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.826691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826234      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:33.826715   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:08:33.826854   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:33.826894   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:33.826924   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: defaultBranch={}
I0621 14:08:33.826951   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: description={}
I0621 14:08:33.826977   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: id={my-repo-2}
I0621 14:08:33.827003   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:08:33.827028   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: repositoryName={my-repo-2}
I0621 14:08:33.827058   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: tags={map[]}
I0621 14:08:33.827084   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo).outputs]: tagsAll={map[]}
I0621 14:08:33.827110   31957 log.go:80] Provider[aws, 0xc000ef0500].Update(my-repo-2,urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo) success; #outs=10
I0621 14:08:33.827191   31957 log.go:80] SnapshotManager: updateSnapshotMutation.End(..., true)
I0621 14:08:33.827228   31957 log.go:80] SnapshotManager.markOperationComplete(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo)
I0621 14:08:33.827253   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:08:33.827271   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:08:33.826737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826244      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: defaultBranch={}
<{%reset%}>)
I0621 14:08:33.827440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826251      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: description={}
<{%reset%}>)
I0621 14:08:33.827501   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826260      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: id={my-repo-2}
<{%reset%}>)
I0621 14:08:33.827547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826266      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
<{%reset%}>)
I0621 14:08:33.827576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826281      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: repositoryName={my-repo-2}
<{%reset%}>)
I0621 14:08:33.827604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826289      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: tags={map[]}
<{%reset%}>)
I0621 14:08:33.827633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:33.826298      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Update(urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo/aws_codecommit_repository).outs]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:34.092840   31957 log.go:80] StepExecutor worker(2): step update on urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo retired
I0621 14:08:34.092906   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo
I0621 14:08:34.092928   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:codecommit/repository:Repository, urn=urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo, #outs=10
I0621 14:08:34.092952   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: arn={arn:aws:codecommit:eu-west-1:103429827345:my-repo-2}
I0621 14:08:34.092967   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: cloneUrlHttp={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.092981   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: cloneUrlSsh={ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.092994   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: defaultBranch={}
I0621 14:08:34.093009   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: description={}
I0621 14:08:34.093023   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: id={my-repo-2}
I0621 14:08:34.093036   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryId={3b554ab5-e4e5-44c5-b190-3a222971c3e6}
I0621 14:08:34.093048   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: repositoryName={my-repo-2}
I0621 14:08:34.093064   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: tags={map[]}
I0621 14:08:34.093079   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codecommit/repository:Repository,my-repo)]: tagsAll={map[]}
I0621 14:08:34.094189   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:34.094240   31957 log.go:80] handling default provider request for package aws
I0621 14:08:34.094267   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:34.094282   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:34.094315   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_ARTIFACTS}
I0621 14:08:34.094342   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifacts={map[type:{NO_ARTIFACTS}]}
I0621 14:08:34.094357   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeEnabled={true}
I0621 14:08:34.094373   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.094397   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.094413   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={LINUX_CONTAINER}
I0621 14:08:34.094434   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
I0621 14:08:34.094448   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={my-codebuild}
I0621 14:08:34.094462   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.094475   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.094501   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.094525   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.094543   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={CODECOMMIT}
I0621 14:08:34.094581   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: source={map[buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:08:34.094604   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:08:34.094624   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.094657   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:codebuild/project:Project, name=my-codebuild, custom=true, #props=8, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::codeBuildRole], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:34.094683   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:codebuild/project:Project,name=my-codebuild,#props=8
I0621 14:08:34.094705   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.094720   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:34.094755   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.094783   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild) executing (#olds=11,#news=8)
I0621 14:08:34.094812   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:08:34.094836   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:08:34.094852   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:08:34.094867   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: encryptionDisabled={false}
I0621 14:08:34.094882   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: overrideArtifactName={false}
I0621 14:08:34.094896   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={NO_ARTIFACTS}
I0621 14:08:34.094911   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: badgeEnabled={true}
I0621 14:08:34.094926   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: buildTimeout={60}
I0621 14:08:34.094945   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:08:34.094964   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:08:34.094981   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.094995   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.095009   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: imagePullCredentialsType={CODEBUILD}
I0621 14:08:34.095022   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: privilegedMode={false}
I0621 14:08:34.095036   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={LINUX_CONTAINER}
I0621 14:08:34.095049   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: name={my-codebuild}
I0621 14:08:34.095068   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.095093   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: queuedTimeout={480}
I0621 14:08:34.095112   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.095145   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:08:34.095174   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[]}
I0621 14:08:34.095202   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.095356   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.095376   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: type={CODECOMMIT}
I0621 14:08:34.095394   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:08:34.095410   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:08:34.095423   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).olds]: __defaults={[]}
I0621 14:08:34.095440   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: artifacts={map[type:{NO_ARTIFACTS}]}
I0621 14:08:34.095456   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={NO_ARTIFACTS}
I0621 14:08:34.095470   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: badgeEnabled={true}
I0621 14:08:34.095490   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
I0621 14:08:34.095505   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.095518   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.095532   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={LINUX_CONTAINER}
I0621 14:08:34.095546   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: name={my-codebuild}
I0621 14:08:34.095560   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.095577   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.095621   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: source={map[buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:08:34.095677   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.095699   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.095713   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: type={CODECOMMIT}
I0621 14:08:34.095730   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.095745   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).news]: ManagedBy={Pulumi}
I0621 14:08:34.096340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096291      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project) executing
<{%reset%}>)
I0621 14:08:34.096419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096343      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:08:34.096458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096374      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:08:34.096497   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096386      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:08:34.096534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096406      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:08:34.096565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096432      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.096597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096462      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.096632   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096475      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeEnabled={true}
<{%reset%}>)
I0621 14:08:34.096661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096488      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildTimeout={60}
<{%reset%}>)
I0621 14:08:34.096712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096503      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:08:34.096771   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096529      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.096806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096542      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.096833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096553      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:08:34.096857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096564      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: privilegedMode={false}
<{%reset%}>)
I0621 14:08:34.096888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096574      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.096914   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096608      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.096956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096622      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={my-codebuild}
<{%reset%}>)
I0621 14:08:34.096984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096643      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.097011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096655      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: queuedTimeout={480}
<{%reset%}>)
I0621 14:08:34.097035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096665      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.097064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096698      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.097093   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096714      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:08:34.097127   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.097145   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.097159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.097183   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.097197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.097219   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.097252   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.097277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.097300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.097315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.097332   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.097350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.097366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.097381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.097397   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.097411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.097436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.097451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.097469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.097483   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.097497   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.097520   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.097541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.097562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.097579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.097594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.097616   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.097631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.097647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.097661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.097686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.097702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.097718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.097732   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.097783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.097835   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.097888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.097915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.097938   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.097961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.097996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.098024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.098050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.098074   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.098118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.098147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.098170   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.098193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.098230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.098255   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.098300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.098335   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.098360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.098384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.098420   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.098444   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.098471   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.098495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.098516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.098542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096745      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.098569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096768      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.098610   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096813      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.098637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.098658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.098680   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.098704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.098744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.098785   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.098835   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.098888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.098913   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.098935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.098960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.098981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.099009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.099033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.099056   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.099081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.099117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.099143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.099168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.099190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.099224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.099261   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.099296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.099315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.099330   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.099347   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.099362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.099389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.099422   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.099445   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.099459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.099475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.099488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.099504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.099518   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.099541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.099556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.099572   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.099590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.099615   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.099630   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.099646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.099660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.099676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.099694   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.099712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.099726   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.099743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.099749   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:08:34.099813   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:08:34.099840   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: encryptionDisabled={false}
I0621 14:08:34.099863   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: overrideArtifactName={false}
I0621 14:08:34.099885   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={NO_ARTIFACTS}
I0621 14:08:34.099770   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.099948   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:08:34.099976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.100013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.100045   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.100067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.100086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.099984   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: badgeEnabled={true}
I0621 14:08:34.100139   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: buildTimeout={60}
I0621 14:08:34.100167   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:08:34.100184   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.100198   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.100211   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: imagePullCredentialsType={CODEBUILD}
I0621 14:08:34.100224   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: privilegedMode={false}
I0621 14:08:34.100237   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={LINUX_CONTAINER}
I0621 14:08:34.100264   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:08:34.100280   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: name={my-codebuild}
I0621 14:08:34.100293   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.100306   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: queuedTimeout={480}
I0621 14:08:34.100320   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.100336   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[]}
I0621 14:08:34.100399   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.100426   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.100442   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: type={CODECOMMIT}
I0621 14:08:34.100483   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:08:34.100517   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: ManagedBy={Pulumi}
I0621 14:08:34.100539   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: __defaults={[]}
I0621 14:08:34.100558   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild).inputs]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:08:34.100576   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild) success: inputs=#11 failures=#0
I0621 14:08:34.100608   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild): executing (#olds=28,#news=11)
I0621 14:08:34.100639   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.100673   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
I0621 14:08:34.100694   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: artifactIdentifier={}
I0621 14:08:34.100710   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: bucketOwnerAccess={}
I0621 14:08:34.100724   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionDisabled={false}
I0621 14:08:34.100737   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:08:34.100751   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: name={}
I0621 14:08:34.100772   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: namespaceType={}
I0621 14:08:34.100787   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: overrideArtifactName={false}
I0621 14:08:34.100800   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: packaging={}
I0621 14:08:34.100813   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: path={}
I0621 14:08:34.100828   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={NO_ARTIFACTS}
I0621 14:08:34.100843   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: badgeEnabled={true}
I0621 14:08:34.100860   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
I0621 14:08:34.100873   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildBatchConfig={<nil>}
I0621 14:08:34.100889   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildTimeout={60}
I0621 14:08:34.100908   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
I0621 14:08:34.100930   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:08:34.100945   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: modes={[]}
I0621 14:08:34.100958   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={NO_CACHE}
I0621 14:08:34.100972   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: concurrentBuildLimit={0}
I0621 14:08:34.100986   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: description={}
I0621 14:08:34.101000   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
I0621 14:08:34.101026   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} registryCredential:{<nil>} type:{LINUX_CONTAINER}]}
I0621 14:08:34.100108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.101049   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: certificate={}
I0621 14:08:34.101103   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.101119   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: environmentVariables={[]}
I0621 14:08:34.101132   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.101146   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: imagePullCredentialsType={CODEBUILD}
I0621 14:08:34.101163   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: privilegedMode={false}
I0621 14:08:34.101178   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: registryCredential={<nil>}
I0621 14:08:34.101201   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={LINUX_CONTAINER}
I0621 14:08:34.101216   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: fileSystemLocations={[]}
I0621 14:08:34.101231   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.101254   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
I0621 14:08:34.101281   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
I0621 14:08:34.101296   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: groupName={}
I0621 14:08:34.101310   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: status={ENABLED}
I0621 14:08:34.101324   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: streamName={}
I0621 14:08:34.101349   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
I0621 14:08:34.101367   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: bucketOwnerAccess={}
I0621 14:08:34.101380   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: encryptionDisabled={false}
I0621 14:08:34.101395   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={}
I0621 14:08:34.101410   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: status={DISABLED}
I0621 14:08:34.101426   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: name={my-codebuild}
I0621 14:08:34.101441   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.101455   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
I0621 14:08:34.101479   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: queuedTimeout={480}
I0621 14:08:34.101493   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: resourceAccessRole={}
I0621 14:08:34.101506   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondaryArtifacts={[]}
I0621 14:08:34.101521   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondarySourceVersions={[]}
I0621 14:08:34.101536   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: secondarySources={[]}
I0621 14:08:34.101556   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.101624   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: source={map[auth:{<nil>} buildStatusConfig:{<nil>} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} gitCloneDepth:{0} gitSubmodulesConfig:{<nil>} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
I0621 14:08:34.101740   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: auth={<nil>}
I0621 14:08:34.101761   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildStatusConfig={<nil>}
I0621 14:08:34.101791   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.101810   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: gitCloneDepth={0}
I0621 14:08:34.101825   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: gitSubmodulesConfig={<nil>}
I0621 14:08:34.101840   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: insecureSsl={false}
I0621 14:08:34.101854   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.101867   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: reportBuildStatus={false}
I0621 14:08:34.101887   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: type={CODECOMMIT}
I0621 14:08:34.101911   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: sourceVersion={}
I0621 14:08:34.101930   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.101945   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:08:34.101961   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: tagsAll={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.101976   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: ManagedBy={Pulumi}
I0621 14:08:34.101993   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).olds]: vpcConfig={<nil>}
I0621 14:08:34.102021   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{buildTimeout} {queuedTimeout}]}
I0621 14:08:34.102043   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
I0621 14:08:34.102060   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
I0621 14:08:34.102075   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: encryptionDisabled={false}
I0621 14:08:34.102090   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: overrideArtifactName={false}
I0621 14:08:34.102108   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={NO_ARTIFACTS}
I0621 14:08:34.101086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.102132   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: badgeEnabled={true}
I0621 14:08:34.102196   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: buildTimeout={60}
I0621 14:08:34.102228   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
I0621 14:08:34.102246   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
I0621 14:08:34.102261   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.102276   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.102290   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: imagePullCredentialsType={CODEBUILD}
I0621 14:08:34.102304   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: privilegedMode={false}
I0621 14:08:34.102318   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={LINUX_CONTAINER}
I0621 14:08:34.102331   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: name={my-codebuild}
I0621 14:08:34.102345   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.102360   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: queuedTimeout={480}
I0621 14:08:34.102384   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.102414   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
I0621 14:08:34.102439   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[]}
I0621 14:08:34.102473   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.102492   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.102507   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: type={CODECOMMIT}
I0621 14:08:34.102523   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
I0621 14:08:34.102546   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: ManagedBy={Pulumi}
I0621 14:08:34.102562   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild).news]: __defaults={[]}
I0621 14:08:34.102162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.102734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.102761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.102778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096830      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.102796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096844      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.102812   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096854      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:08:34.102827   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096864      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.102847   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096872      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: artifacts={map[type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.102863   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096878      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: badgeEnabled={true}
<{%reset%}>)
I0621 14:08:34.102879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096885      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.102919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096891      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.102957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096897      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.102995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096907      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: environment={map[computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.103023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096914      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: name={my-codebuild}
<{%reset%}>)
I0621 14:08:34.103064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096921      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.103089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096926      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.103115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096944      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:08:34.103133   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.103147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.103162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.103176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.103201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.103225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.103254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.103295   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.103336   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.103355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.103372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.103409   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.103452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.103477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.103502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.103524   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.103547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.103598   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.103635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.103652   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.103673   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.103714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.103745   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.103775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.103804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.103838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.103878   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.103907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.103934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.103956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.103981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.104005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.104030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.104051   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.104075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.104105   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.104131   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.104162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.104186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.104207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.104248   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.104273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.104305   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.104348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.104388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.104414   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.104435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.104458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.104480   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.104503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.104528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.104553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.104575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.104643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.104675   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.104722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.104759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.104794   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.104839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.104887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096956      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.104925   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096963      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.104955   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096979      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: source={map[buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.104983   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.105009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.105039   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.105063   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.105081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.105095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.105110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.105124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.105140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.105154   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.105171   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.105186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.105203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.105355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.105394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.105430   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.105478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.105506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.105534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.105559   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.105582   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.105599   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.105614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.105629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.105643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.105658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.105674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.105688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.105704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.105730   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.105747   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.105761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.105776   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.105790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.105804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.105818   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.105833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.105856   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.105873   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.105896   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.105922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.105947   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.105976   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.106118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.106190   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.106245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.106278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.106303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.106343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.106361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.106382   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.106401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.106425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.106448   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.106465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.106480   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.106509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.106556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.106613   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.106653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.096987      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.106695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097000      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: tags={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:08:34.106721   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097016      25 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:08:34.106760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097206      25 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:08:34.106804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097366      25 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:34.106832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097392      25 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:08:34.106861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.106884   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.106902   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.106916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.106935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.106960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.106986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.107010   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.107035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.107062   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.107117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.107164   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.107209   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.107238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.107263   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.107290   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.107314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.107343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.107379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.107404   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.107438   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.107463   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.107489   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.107516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.107540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.107569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.107597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.107632   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.107666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.107699   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.107740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.107765   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.107787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.107806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.107830   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.107847   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.107861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.107875   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.107889   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.107906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.107920   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.107936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.107949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.107972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.107993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.108014   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.108028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.108051   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.108073   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.108089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.108104   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.108119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.108134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.108149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.108166   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.108180   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.108196   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.108226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.108264   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097416      25 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:34.108298   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097425      25 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:08:34.108324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097437      25 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:08:34.108363   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097444      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:34.108428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097451      25 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:08:34.108471   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097503      25 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:34.108503   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097511      25 schema.go:492] Created Terraform input: source = [map[__defaults:[] buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:08:34.108528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.108566   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.108594   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.108617   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.108641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.108663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.108689   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.108713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.108740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.108796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.108832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.108864   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.108892   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.108919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.108943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.108969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.108993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.109021   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.109046   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.109085   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.109110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.109146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.109173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.109201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.109227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.109327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.109366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.109391   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.109413   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.109441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.109464   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.109488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.109512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.109540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.109565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.109590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.109615   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.109646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.109666   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.109682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.109702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.109718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.109735   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.109753   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.109863   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.109898   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.109922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.109946   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.109970   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.109986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.110002   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.110017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.110030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.110046   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.110062   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.110086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.110102   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.110117   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.110132   31957 log.go:80] eventSink::Infoerr(<{%reset%}> location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 type:CODECOMMIT]]
<{%reset%}>)
I0621 14:08:34.110146   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097542      25 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:08:34.110161   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097550      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:34.110185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097556      25 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:08:34.110224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097562      25 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi __defaults:[]]
<{%reset%}>)
I0621 14:08:34.110244   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097609      25 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:08:34.110261   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097624      25 schema.go:756] Created Terraform input: encryption_disabled = false (from old default)
<{%reset%}>)
I0621 14:08:34.110278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097633      25 schema.go:756] Created Terraform input: override_artifact_name = false (from old default)
<{%reset%}>)
I0621 14:08:34.110298   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097640      25 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:08:34.110319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097652      25 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.110335   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097658      25 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:08:34.110353   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097664      25 schema.go:502] Terraform input __defaults = []interface {}{"encryptionDisabled", "overrideArtifactName"}
<{%reset%}>)
I0621 14:08:34.110387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097672      25 schema.go:492] Created Terraform input: artifacts = [map[__defaults:[encryptionDisabled overrideArtifactName] encryption_disabled:false override_artifact_name:false type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:08:34.110458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097710      25 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:08:34.110495   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097756      25 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:08:34.110524   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097874      25 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:08:34.110546   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097902      25 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:08:34.110571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097928      25 schema.go:756] Created Terraform input: image_pull_credentials_type = CODEBUILD (from old default)
<{%reset%}>)
I0621 14:08:34.110597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097941      25 schema.go:756] Created Terraform input: privileged_mode = false (from old default)
<{%reset%}>)
I0621 14:08:34.110672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097954      25 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:08:34.110729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097964      25 schema.go:502] Terraform input __defaults = []interface {}{"imagePullCredentialsType", "privilegedMode"}
<{%reset%}>)
I0621 14:08:34.110764   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097976      25 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:08:34.110792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097985      25 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:08:34.110823   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.097996      25 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:08:34.110848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098006      25 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:08:34.110890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098016      25 schema.go:492] Created Terraform input: environment = [map[__defaults:[imagePullCredentialsType privilegedMode] compute_type:BUILD_GENERAL1_SMALL image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:08:34.110924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098051      25 schema.go:756] Created Terraform input: queued_timeout = 480 (from old default)
<{%reset%}>)
I0621 14:08:34.110946   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098069      25 schema.go:756] Created Terraform input: build_timeout = 60 (from old default)
<{%reset%}>)
I0621 14:08:34.111052   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098081      25 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"__defaults":[]interface {}{}, "buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:08:34.111106   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098189      25 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"__defaults":[]interface {}{"encryptionDisabled", "overrideArtifactName"}, "encryption_disabled":false, "override_artifact_name":false, "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:08:34.111127   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098222      25 schema.go:502] Terraform input __defaults = []interface {}{"buildTimeout", "queuedTimeout"}
<{%reset%}>)
I0621 14:08:34.111144   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098236      25 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:08:34.111162   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098246      25 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:34.111186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098258      25 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:08:34.111230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098267      25 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"__defaults":[]interface {}{"imagePullCredentialsType", "privilegedMode"}, "compute_type":"BUILD_GENERAL1_SMALL", "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:08:34.111258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098294      25 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:08:34.111288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098303      25 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:08:34.111311   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098314      25 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:08:34.111338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098324      25 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi", "__defaults":[]interface {}{}}
<{%reset%}>)
I0621 14:08:34.111416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098607      25 schema.go:881] Terraform output ManagedBy = {Pulumi}
<{%reset%}>)
I0621 14:08:34.111454   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098624      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:34.111489   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098662      25 schema.go:881] Terraform output computeType = {BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.111518   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098671      25 schema.go:881] Terraform output image = {aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.111550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098678      25 schema.go:881] Terraform output type = {LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.111593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098683      25 schema.go:881] Terraform output imagePullCredentialsType = {CODEBUILD}
<{%reset%}>)
I0621 14:08:34.111620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098689      25 schema.go:881] Terraform output privilegedMode = {false}
<{%reset%}>)
I0621 14:08:34.111637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098695      25 schema.go:881] Terraform output __defaults = {[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:08:34.111662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098727      25 schema.go:881] Terraform output buildspec = {# buildspec.yml
<{%reset%}>)
I0621 14:08:34.111695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.111714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.111728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.111745   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.111759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.111775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.111792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.111826   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.111844   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.111877   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.111900   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.111917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.111931   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.111947   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.111962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.111982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.111997   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.112014   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.112028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.112056   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.112086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.112109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.112135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.112157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.112185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.112211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.112239   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.112278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.112305   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.112329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.112355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.112377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.112402   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.112427   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.112456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.112491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.112517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.112532   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.112547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.112562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.112583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.112609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.112635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.112661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.112680   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.112696   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.112713   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.112728   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.112745   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.112772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.112799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.112828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.112847   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.112882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.112905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.112928   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.112945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.112961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.112981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.112999   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098750      25 schema.go:881] Terraform output location = {https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.113013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098758      25 schema.go:881] Terraform output type = {CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.113030   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098763      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:34.113044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098785      25 schema.go:881] Terraform output encryptionDisabled = {false}
<{%reset%}>)
I0621 14:08:34.113063   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098793      25 schema.go:881] Terraform output overrideArtifactName = {false}
<{%reset%}>)
I0621 14:08:34.113082   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098798      25 schema.go:881] Terraform output __defaults = {[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:08:34.113101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098810      25 schema.go:881] Terraform output type = {NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.113129   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098818      25 schema.go:881] Terraform output name = {my-codebuild}
<{%reset%}>)
I0621 14:08:34.113157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098828      25 schema.go:881] Terraform output source = {map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.113181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.113208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.113245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.113265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.113287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.113303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.113317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.113333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.113346   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.113362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.113376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.113392   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.113411   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.113428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.113442   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.113456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.113470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.113486   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.113500   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.113515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.113529   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.113544   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.113571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.113607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.113641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.113664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.113682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.113709   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.113739   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.113756   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.113779   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.113795   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.113809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.113823   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.113838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.113860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.113876   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.113890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.113905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.113919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.113942   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.113956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.113972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.113987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.114004   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.114021   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.114035   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.114050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.114067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.114084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.114101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.114116   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.114141   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.114157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.114181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.114199   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.114224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.114250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.114283   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.114300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098850      25 schema.go:881] Terraform output artifacts = {map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.114324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098871      25 schema.go:881] Terraform output projectVisibility = {PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.114342   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098882      25 schema.go:881] Terraform output badgeEnabled = {true}
<{%reset%}>)
I0621 14:08:34.114356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098891      25 schema.go:881] Terraform output buildTimeout = {60}
<{%reset%}>)
I0621 14:08:34.114372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098924      25 schema.go:881] Terraform output serviceRole = {arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.114387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098951      25 schema.go:881] Terraform output __defaults = {[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:08:34.114403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098963      25 schema.go:881] Terraform output tags = {map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:08:34.114419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.098972      25 schema.go:881] Terraform output environment = {map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.114434   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099004      25 schema.go:881] Terraform output queuedTimeout = {480}
<{%reset%}>)
I0621 14:08:34.114456   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099020      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:08:34.114474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099041      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.114491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099051      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:08:34.114506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099058      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:08:34.114530   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099064      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:08:34.114556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099071      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.114584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099077      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: badgeEnabled={true}
<{%reset%}>)
I0621 14:08:34.114603   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099083      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: buildTimeout={60}
<{%reset%}>)
I0621 14:08:34.114633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099100      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.114660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099109      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:08:34.114684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099116      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.114724   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099127      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.114759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099134      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:08:34.114796   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099146      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: privilegedMode={false}
<{%reset%}>)
I0621 14:08:34.114841   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099152      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.114866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099158      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: name={my-codebuild}
<{%reset%}>)
I0621 14:08:34.114893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099164      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.114919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099170      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: queuedTimeout={480}
<{%reset%}>)
I0621 14:08:34.114957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099181      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.115032   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099201      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.115084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.115110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.115138   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.115161   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.115184   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.115206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.115241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.115262   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.115293   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.115323   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.115352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.115377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.115401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.115424   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.115445   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.115468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.115492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.115516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.115550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.115577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.115598   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.115620   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.115643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.115671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.115712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.115756   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.115783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.115823   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.115882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.115915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.115957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.115981   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.116017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.116041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.116067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.116089   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.116119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.116140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.116173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.116198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.116226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.116250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.116277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.116304   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.116339   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.116357   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.116376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.116394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.116474   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.116506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.116542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.116557   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.116576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.116595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.116618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.116634   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.116651   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.116664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.116687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.116719   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099217      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.116739   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099230      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:08:34.116754   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.116769   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.116782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.116798   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.116812   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.116828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.116841   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.116862   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.116881   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.116899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.116916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.116941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.116983   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.117023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.117051   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.117095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.117124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.117147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.117171   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.117198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.117224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.117246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.117268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.117289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.117328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.117356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.117392   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.117417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.117439   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.117464   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.117507   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.117539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.117575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.117604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.117627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.117652   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.117675   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.117699   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.117722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.117747   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.117778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.117797   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.117821   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.117849   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.117872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.117891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.117905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.117924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.117941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.117961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.117979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.117996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.118011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.118029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.118052   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.118096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.118123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.118157   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.118173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.118201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099238      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.118227   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099244      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.118246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099253      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:08:34.118262   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099260      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.118281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.099267      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.118297   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103799      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project) executing
<{%reset%}>)
I0621 14:08:34.118315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103849      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.118331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103871      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifactIdentifier={}
<{%reset%}>)
I0621 14:08:34.118351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103895      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: bucketOwnerAccess={}
<{%reset%}>)
I0621 14:08:34.118376   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103906      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:08:34.118412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103916      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:08:34.118438   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103927      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={}
<{%reset%}>)
I0621 14:08:34.118457   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103936      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: namespaceType={}
<{%reset%}>)
I0621 14:08:34.118484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103945      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:08:34.118517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103954      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: packaging={}
<{%reset%}>)
I0621 14:08:34.118535   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103964      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: path={}
<{%reset%}>)
I0621 14:08:34.118561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.103987      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.118579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104025      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.118597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104037      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeEnabled={true}
<{%reset%}>)
I0621 14:08:34.118619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104063      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
<{%reset%}>)
I0621 14:08:34.118793   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104074      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildBatchConfig={<nil>}
<{%reset%}>)
I0621 14:08:34.118828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104085      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildBatchConfig is null
<{%reset%}>)
I0621 14:08:34.181854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104097      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildTimeout={60}
<{%reset%}>)
I0621 14:08:34.182637   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104109      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:08:34.182717   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104121      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: modes={[]}
<{%reset%}>)
I0621 14:08:34.182766   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104131      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={NO_CACHE}
<{%reset%}>)
I0621 14:08:34.182808   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104151      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
<{%reset%}>)
I0621 14:08:34.182851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104163      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: concurrentBuildLimit={0}
<{%reset%}>)
I0621 14:08:34.182888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104174      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: description={}
<{%reset%}>)
I0621 14:08:34.183185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104185      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
<{%reset%}>)
I0621 14:08:34.183223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104209      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: certificate={}
<{%reset%}>)
I0621 14:08:34.183258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104222      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.183288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104233      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environmentVariables={[]}
<{%reset%}>)
I0621 14:08:34.183319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104242      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.183358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104251      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:08:34.183394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104262      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: privilegedMode={false}
<{%reset%}>)
I0621 14:08:34.183441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104279      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: registryCredential={<nil>}
<{%reset%}>)
I0621 14:08:34.183485   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104289      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: registryCredential is null
<{%reset%}>)
I0621 14:08:34.184168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104309      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.184287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104336      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.184412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104355      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: fileSystemLocations={[]}
<{%reset%}>)
I0621 14:08:34.184433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104368      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.184526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104385      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: groupName={}
<{%reset%}>)
I0621 14:08:34.184901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104395      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: status={ENABLED}
<{%reset%}>)
I0621 14:08:34.185160   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104406      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: streamName={}
<{%reset%}>)
I0621 14:08:34.185346   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104440      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
<{%reset%}>)
I0621 14:08:34.185458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104456      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: bucketOwnerAccess={}
<{%reset%}>)
I0621 14:08:34.186533   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104478      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:08:34.186597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104490      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={}
<{%reset%}>)
I0621 14:08:34.186636   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104510      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: status={DISABLED}
<{%reset%}>)
I0621 14:08:34.186664   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104535      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
<{%reset%}>)
I0621 14:08:34.186692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104571      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
<{%reset%}>)
I0621 14:08:34.186718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104585      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: name={my-codebuild}
<{%reset%}>)
I0621 14:08:34.186758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104609      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.186794   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104630      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
<{%reset%}>)
I0621 14:08:34.186879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104654      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: queuedTimeout={480}
<{%reset%}>)
I0621 14:08:34.186922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104667      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: resourceAccessRole={}
<{%reset%}>)
I0621 14:08:34.186982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104678      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondaryArtifacts={[]}
<{%reset%}>)
I0621 14:08:34.187072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104687      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondarySourceVersions={[]}
<{%reset%}>)
I0621 14:08:34.187134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104697      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: secondarySources={[]}
<{%reset%}>)
I0621 14:08:34.187241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104707      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.187283   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104721      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: auth={<nil>}
<{%reset%}>)
I0621 14:08:34.187407   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104730      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: auth is null
<{%reset%}>)
I0621 14:08:34.187459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104740      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildStatusConfig={<nil>}
<{%reset%}>)
I0621 14:08:34.187496   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104772      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildStatusConfig is null
<{%reset%}>)
I0621 14:08:34.187528   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104795      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:08:34.187556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.187585   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.187612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.187639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.187661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.187687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.187710   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.187734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.187752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.187768   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.187784   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.187807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.187825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.187842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.187860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.187877   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.187892   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.187910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.187924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.187941   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.187961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.187988   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.188008   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.188040   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.188066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.188098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.188134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.188159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.188189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.188217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.188246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.188268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.188295   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.188344   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.188380   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.188407   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.188437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.188462   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.188514   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.188556   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.188585   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.188609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.188629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.188646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.188670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.188690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.188711   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.188746   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.188782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.188805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.188821   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.188838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.188869   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.188901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.188926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.188952   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.188988   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.189018   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.189043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.189073   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104816      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitCloneDepth={0}
<{%reset%}>)
I0621 14:08:34.189097   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104827      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitSubmodulesConfig={<nil>}
<{%reset%}>)
I0621 14:08:34.189136   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104836      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: gitSubmodulesConfig is null
<{%reset%}>)
I0621 14:08:34.189165   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104846      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: insecureSsl={false}
<{%reset%}>)
I0621 14:08:34.189199   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104858      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.189231   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104873      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: reportBuildStatus={false}
<{%reset%}>)
I0621 14:08:34.189267   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104885      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.189308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104937      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: source={map[buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.189338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.189361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.189384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.189409   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.189436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.189459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.189484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.189510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.189538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.189566   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.189592   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.189616   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.189646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.189671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.189701   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.189726   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.189751   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.189780   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.189841   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.189905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.189937   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.189962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.189985   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.190010   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.190044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.190077   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.190109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.190132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.190177   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.190203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.190234   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.190259   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.190284   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.190310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.190368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.190408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.190433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.190467   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.190491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.190514   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.190536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.190563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.190602   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.190632   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.190663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.190695   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.190720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.190748   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.190777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.190807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.190832   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.190856   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.190879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.190961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.190992   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.191016   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.191046   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.191071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.191100   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} gitCloneDepth:{0} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.191143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104964      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: sourceVersion={}
<{%reset%}>)
I0621 14:08:34.191179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.104987      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.191210   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.105004      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tags={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:08:34.191241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.105017      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.191269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.105031      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: tagsAll={map[ManagedBy:{Pulumi}]}
<{%reset%}>)
I0621 14:08:34.191296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.105041      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: vpcConfig={<nil>}
<{%reset%}>)
I0621 14:08:34.191322   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106644      25 log.go:75] Skipping unmarshaling for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).olds]: vpcConfig is null
<{%reset%}>)
I0621 14:08:34.191349   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106756      25 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:08:34.191373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106781      25 schema.go:492] Created Terraform input: queued_timeout = 480
<{%reset%}>)
I0621 14:08:34.191398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106873      25 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:08:34.191453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106894      25 schema.go:492] Created Terraform input: namespace_type = 
<{%reset%}>)
I0621 14:08:34.191484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106924      25 schema.go:492] Created Terraform input: override_artifact_name = false
<{%reset%}>)
I0621 14:08:34.191540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106948      25 schema.go:492] Created Terraform input: path = 
<{%reset%}>)
I0621 14:08:34.191581   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106967      25 schema.go:492] Created Terraform input: artifact_identifier = 
<{%reset%}>)
I0621 14:08:34.191623   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.106988      25 schema.go:492] Created Terraform input: bucket_owner_access = 
<{%reset%}>)
I0621 14:08:34.191654   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107015      25 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.191681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107026      25 schema.go:492] Created Terraform input: name = 
<{%reset%}>)
I0621 14:08:34.191708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107061      25 schema.go:492] Created Terraform input: packaging = 
<{%reset%}>)
I0621 14:08:34.191736   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107088      25 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:08:34.191763   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107131      25 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:08:34.191787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107164      25 schema.go:502] Terraform input namespace_type = ""
<{%reset%}>)
I0621 14:08:34.191811   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107176      25 schema.go:502] Terraform input path = ""
<{%reset%}>)
I0621 14:08:34.191834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107226      25 schema.go:502] Terraform input bucket_owner_access = ""
<{%reset%}>)
I0621 14:08:34.191859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107242      25 schema.go:502] Terraform input name = ""
<{%reset%}>)
I0621 14:08:34.191883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107252      25 schema.go:502] Terraform input packaging = ""
<{%reset%}>)
I0621 14:08:34.191908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107262      25 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:08:34.191937   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107272      25 schema.go:502] Terraform input artifact_identifier = ""
<{%reset%}>)
I0621 14:08:34.191964   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107281      25 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.191992   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107291      25 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:08:34.192050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107304      25 schema.go:492] Created Terraform input: artifacts = [map[artifact_identifier: bucket_owner_access: encryption_disabled:false location: name: namespace_type: override_artifact_name:false packaging: path: type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:08:34.192092   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107410      25 schema.go:492] Created Terraform input: badge_url = https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main
<{%reset%}>)
I0621 14:08:34.192122   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107455      25 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:08:34.192150   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107499      25 schema.go:492] Created Terraform input: certificate = 
<{%reset%}>)
I0621 14:08:34.192183   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107523      25 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:08:34.192214   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107549      25 schema.go:492] Created Terraform input: environment_variable = []
<{%reset%}>)
I0621 14:08:34.192245   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107576      25 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:08:34.192272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107600      25 schema.go:492] Created Terraform input: image_pull_credentials_type = CODEBUILD
<{%reset%}>)
I0621 14:08:34.192300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107662      25 schema.go:492] Created Terraform input: privileged_mode = false
<{%reset%}>)
I0621 14:08:34.192327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107718      25 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:08:34.192354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107733      25 schema.go:502] Terraform input environment_variable = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.192380   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107781      25 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:08:34.192406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107820      25 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:08:34.192429   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.107833      25 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:08:34.192453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108279      25 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:08:34.192479   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108293      25 schema.go:502] Terraform input certificate = ""
<{%reset%}>)
I0621 14:08:34.192508   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108328      25 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:08:34.192535   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108344      25 schema.go:492] Created Terraform input: environment = [map[certificate: compute_type:BUILD_GENERAL1_SMALL environment_variable:[] image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:08:34.192563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108434      25 schema.go:492] Created Terraform input: id = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.192633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108449      25 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:08:34.192669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108475      25 schema.go:492] Created Terraform input: secondary_source_version = []
<{%reset%}>)
I0621 14:08:34.192720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108542      25 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:08:34.192752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108616      25 schema.go:492] Created Terraform input: concurrent_build_limit = 0
<{%reset%}>)
I0621 14:08:34.192782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108675      25 schema.go:492] Created Terraform input: file_system_locations = []
<{%reset%}>)
I0621 14:08:34.192808   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108718      25 schema.go:492] Created Terraform input: group_name = 
<{%reset%}>)
I0621 14:08:34.192842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108732      25 schema.go:492] Created Terraform input: status = ENABLED
<{%reset%}>)
I0621 14:08:34.192867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108745      25 schema.go:492] Created Terraform input: stream_name = 
<{%reset%}>)
I0621 14:08:34.192893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108786      25 schema.go:502] Terraform input group_name = ""
<{%reset%}>)
I0621 14:08:34.192916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108797      25 schema.go:502] Terraform input status = "ENABLED"
<{%reset%}>)
I0621 14:08:34.192942   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108807      25 schema.go:502] Terraform input stream_name = ""
<{%reset%}>)
I0621 14:08:34.192969   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108828      25 schema.go:492] Created Terraform input: cloudwatch_logs = [map[group_name: status:ENABLED stream_name:]]
<{%reset%}>)
I0621 14:08:34.192997   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108864      25 schema.go:492] Created Terraform input: bucket_owner_access = 
<{%reset%}>)
I0621 14:08:34.193046   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108893      25 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.193094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108913      25 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:08:34.193132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108928      25 schema.go:492] Created Terraform input: status = DISABLED
<{%reset%}>)
I0621 14:08:34.193166   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108938      25 schema.go:502] Terraform input bucket_owner_access = ""
<{%reset%}>)
I0621 14:08:34.193193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108948      25 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.193224   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108957      25 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:08:34.193254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108968      25 schema.go:502] Terraform input status = "DISABLED"
<{%reset%}>)
I0621 14:08:34.193282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108979      25 schema.go:492] Created Terraform input: s3_logs = [map[bucket_owner_access: encryption_disabled:false location: status:DISABLED]]
<{%reset%}>)
I0621 14:08:34.193311   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.108996      25 schema.go:502] Terraform input cloudwatch_logs = []interface {}{map[string]interface {}{"group_name":"", "status":"ENABLED", "stream_name":""}}
<{%reset%}>)
I0621 14:08:34.193341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109012      25 schema.go:502] Terraform input s3_logs = []interface {}{map[string]interface {}{"bucket_owner_access":"", "encryption_disabled":false, "location":"", "status":"DISABLED"}}
<{%reset%}>)
I0621 14:08:34.193408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109029      25 schema.go:492] Created Terraform input: logs_config = [map[cloudwatch_logs:[map[group_name: status:ENABLED stream_name:]] s3_logs:[map[bucket_owner_access: encryption_disabled:false location: status:DISABLED]]]]
<{%reset%}>)
I0621 14:08:34.193470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109067      25 schema.go:492] Created Terraform input: public_project_alias = eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9
<{%reset%}>)
I0621 14:08:34.193511   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109095      25 schema.go:492] Created Terraform input: secondary_sources = []
<{%reset%}>)
I0621 14:08:34.193543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109135      25 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:08:34.193580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109147      25 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:08:34.193609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109159      25 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:08:34.193640   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109212      25 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.193665   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109244      25 schema.go:492] Created Terraform input: build_timeout = 60
<{%reset%}>)
I0621 14:08:34.193692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109338      25 schema.go:492] Created Terraform input: resource_access_role = 
<{%reset%}>)
I0621 14:08:34.193724   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109417      25 schema.go:492] Created Terraform input: secondary_artifacts = []
<{%reset%}>)
I0621 14:08:34.193766   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109486      25 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:08:34.193799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109503      25 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:08:34.193827   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.193852   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.193881   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.193907   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.193934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.193958   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.193984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.194009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.194037   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.194063   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.194091   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.194116   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.194153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.194188   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.194213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.194238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.194265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.194298   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.194327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.194368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.194420   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.194465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.194485   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.194502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.194519   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.194537   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.194552   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.194569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.194584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.194600   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.194614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.194628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.194642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.194657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.194674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.194690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.194704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.194718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.194732   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.194746   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.194761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.194774   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.194790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.194805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.194822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.194838   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.194853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.194872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.194905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.194942   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.194972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.194994   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.195009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.195028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.195043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.195062   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.195080   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.195095   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.195110   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109532      25 schema.go:492] Created Terraform input: git_clone_depth = 0
<{%reset%}>)
I0621 14:08:34.195125   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109552      25 schema.go:492] Created Terraform input: insecure_ssl = false
<{%reset%}>)
I0621 14:08:34.195140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109572      25 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:34.195159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109596      25 schema.go:492] Created Terraform input: report_build_status = false
<{%reset%}>)
I0621 14:08:34.195174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.109607      25 schema.go:502] Terraform input git_clone_depth = 0
<{%reset%}>)
I0621 14:08:34.195198   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110419      25 schema.go:502] Terraform input insecure_ssl = false
<{%reset%}>)
I0621 14:08:34.195215   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110444      25 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:34.195241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110462      25 schema.go:502] Terraform input report_build_status = false
<{%reset%}>)
I0621 14:08:34.195266   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110475      25 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:08:34.195329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110487      25 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:08:34.195365   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.110588      25 schema.go:492] Created Terraform input: source = [map[buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:08:34.195384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.195399   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.195425   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.195450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.195478   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.195502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.195527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.195550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.195573   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.195627   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.195690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.195724   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.195772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.195811   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.195978   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.196024   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.196093   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.196143   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.196184   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.196213   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.196246   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.196278   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.196299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.196321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.196342   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.196388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.196428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.196455   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.196477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.196504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.196526   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.196549   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.196576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.196599   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.196628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.196652   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.196676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.196690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.196704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.196720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.196742   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.196778   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.196804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.196823   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.196850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.196870   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.196887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.196908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.196926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.196943   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.196959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.196975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.196989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.197023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.197042   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.197057   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.197075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.197098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.197118   31957 log.go:80] eventSink::Infoerr(<{%reset%}> git_clone_depth:0 insecure_ssl:false location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 report_build_status:false type:CODECOMMIT]]
<{%reset%}>)
I0621 14:08:34.197133   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111249      25 schema.go:492] Created Terraform input: source_version = 
<{%reset%}>)
I0621 14:08:34.197148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111327      25 schema.go:492] Created Terraform input: location = 
<{%reset%}>)
I0621 14:08:34.197164   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111429      25 schema.go:492] Created Terraform input: modes = []
<{%reset%}>)
I0621 14:08:34.197181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111447      25 schema.go:492] Created Terraform input: type = NO_CACHE
<{%reset%}>)
I0621 14:08:34.197197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111474      25 schema.go:502] Terraform input location = ""
<{%reset%}>)
I0621 14:08:34.197212   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111490      25 schema.go:502] Terraform input modes = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.197226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111518      25 schema.go:502] Terraform input type = "NO_CACHE"
<{%reset%}>)
I0621 14:08:34.197243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111534      25 schema.go:492] Created Terraform input: cache = [map[location: modes:[] type:NO_CACHE]]
<{%reset%}>)
I0621 14:08:34.197259   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111625      25 schema.go:492] Created Terraform input: encryption_key = arn:aws:kms:eu-west-1:103429827345:alias/aws/s3
<{%reset%}>)
I0621 14:08:34.197313   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111695      25 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:34.197383   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111720      25 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:08:34.197412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111731      25 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:08:34.197440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111748      25 schema.go:492] Created Terraform input: tags_all = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:08:34.197467   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111764      25 schema.go:502] Terraform input encryption_key = "arn:aws:kms:eu-west-1:103429827345:alias/aws/s3"
<{%reset%}>)
I0621 14:08:34.197496   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111775      25 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:08:34.197534   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111785      25 schema.go:502] Terraform input badge_url = "https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main"
<{%reset%}>)
I0621 14:08:34.197565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111802      25 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:08:34.197591   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111812      25 schema.go:502] Terraform input file_system_locations = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.197622   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111822      25 schema.go:502] Terraform input public_project_alias = "eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9"
<{%reset%}>)
I0621 14:08:34.197658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111837      25 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:08:34.197688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111851      25 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:08:34.197841   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111861      25 schema.go:502] Terraform input tags_all = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:08:34.197885   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111872      25 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"certificate":"", "compute_type":"BUILD_GENERAL1_SMALL", "environment_variable":[]interface {}(nil), "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:08:34.197919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.111898      25 schema.go:502] Terraform input logs_config = []interface {}{map[string]interface {}{"cloudwatch_logs":[]interface {}{map[string]interface {}{"group_name":"", "status":"ENABLED", "stream_name":""}}, "s3_logs":[]interface {}{map[string]interface {}{"bucket_owner_access":"", "encryption_disabled":false, "location":"", "status":"DISABLED"}}}}
<{%reset%}>)
I0621 14:08:34.197949   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112809      25 schema.go:502] Terraform input resource_access_role = ""
<{%reset%}>)
I0621 14:08:34.197978   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112853      25 schema.go:502] Terraform input secondary_artifacts = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.198005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112869      25 schema.go:502] Terraform input cache = []interface {}{map[string]interface {}{"location":"", "modes":[]interface {}(nil), "type":"NO_CACHE"}}
<{%reset%}>)
I0621 14:08:34.198038   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112890      25 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:34.198066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112902      25 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"artifact_identifier":"", "bucket_owner_access":"", "encryption_disabled":false, "location":"", "name":"", "namespace_type":"", "override_artifact_name":false, "packaging":"", "path":"", "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:08:34.198097   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112937      25 schema.go:502] Terraform input id = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.198132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112950      25 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:08:34.198182   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112959      25 schema.go:502] Terraform input concurrent_build_limit = 0
<{%reset%}>)
I0621 14:08:34.198216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112968      25 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:08:34.198243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112977      25 schema.go:502] Terraform input secondary_source_version = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.198270   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112986      25 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:08:34.198295   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.112995      25 schema.go:502] Terraform input secondary_sources = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.198325   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.113003      25 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.198384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.113013      25 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "git_clone_depth":0, "insecure_ssl":false, "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "report_build_status":false, "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:08:34.198434   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114173      25 schema.go:502] Terraform input source_version = ""
<{%reset%}>)
I0621 14:08:34.198473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114853      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{buildTimeout} {queuedTimeout}]}
<{%reset%}>)
I0621 14:08:34.198515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114883      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{encryptionDisabled} {overrideArtifactName}]}
<{%reset%}>)
I0621 14:08:34.198551   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114914      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: encryptionDisabled={false}
<{%reset%}>)
I0621 14:08:34.198580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114927      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: overrideArtifactName={false}
<{%reset%}>)
I0621 14:08:34.198608   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114938      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={NO_ARTIFACTS}
<{%reset%}>)
I0621 14:08:34.198641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114972      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: artifacts={map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]}
<{%reset%}>)
I0621 14:08:34.198669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.114985      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: badgeEnabled={true}
<{%reset%}>)
I0621 14:08:34.198703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115018      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildTimeout={60}
<{%reset%}>)
I0621 14:08:34.198730   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115036      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[{imagePullCredentialsType} {privilegedMode}]}
<{%reset%}>)
I0621 14:08:34.198763   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115047      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: computeType={BUILD_GENERAL1_SMALL}
<{%reset%}>)
I0621 14:08:34.198800   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115057      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
<{%reset%}>)
I0621 14:08:34.198829   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115067      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: imagePullCredentialsType={CODEBUILD}
<{%reset%}>)
I0621 14:08:34.198857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115078      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: privilegedMode={false}
<{%reset%}>)
I0621 14:08:34.198887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115088      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={LINUX_CONTAINER}
<{%reset%}>)
I0621 14:08:34.198916   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115112      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: environment={map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]}
<{%reset%}>)
I0621 14:08:34.198948   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115124      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: name={my-codebuild}
<{%reset%}>)
I0621 14:08:34.198980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115145      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: projectVisibility={PUBLIC_READ}
<{%reset%}>)
I0621 14:08:34.199094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115156      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: queuedTimeout={480}
<{%reset%}>)
I0621 14:08:34.199164   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115231      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
<{%reset%}>)
I0621 14:08:34.199203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115259      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.199241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115275      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: buildspec={# buildspec.yml
<{%reset%}>)
I0621 14:08:34.199273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.199297   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.199325   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.199350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.199378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.199403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.199430   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.199470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.199498   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.199525   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.199555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.199580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.199618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.199653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.199682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.199706   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.199734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.199759   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.199788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.199812   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.199840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.199865   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.199891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.199917   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.199942   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.199980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.200011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.200048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.200075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.200103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.200124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.200153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.200191   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.200220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.200244   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.200269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.200297   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.200326   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.200351   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.200377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.200400   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.200428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.200452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.200518   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.200557   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.200588   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.200614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.200643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.200669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.200703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.200735   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.200774   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.200847   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.200909   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.200999   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.201032   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.201067   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.201203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.201298   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.201357   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115769      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
<{%reset%}>)
I0621 14:08:34.201493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115793      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: type={CODECOMMIT}
<{%reset%}>)
I0621 14:08:34.201574   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.115875      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: source={map[__defaults:{[]} buildspec:{# buildspec.yml
<{%reset%}>)
I0621 14:08:34.201612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.201642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.201684   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.201710   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.201735   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.201764   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.201788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.201872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.201903   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.201929   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.201953   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.201980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.202003   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.202026   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.202050   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.202073   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.202096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.202120   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.202142   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.202165   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.202197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.202226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.202256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.202279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.202303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.202363   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.202391   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.202419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.202443   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.202468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.202492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.202515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.202536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.202560   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.202582   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.202606   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.202631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.202656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.202679   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.202704   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.202729   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.202754   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.202777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.202807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.202836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.202895   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.202934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.202968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.202996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.203026   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.203056   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.203088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.203113   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.203140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.203156   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.203172   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.203189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.203206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.203220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]}
<{%reset%}>)
I0621 14:08:34.203237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.117899      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: ManagedBy={Pulumi}
<{%reset%}>)
I0621 14:08:34.203254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.117947      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.203279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.117968      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild/aws_codebuild_project).news]: tags={map[ManagedBy:{Pulumi} __defaults:{[]}]}
<{%reset%}>)
I0621 14:08:34.203296   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118011      25 schema.go:492] Created Terraform input: service_role = arn:aws:iam::103429827345:role/codeBuildRole-615d8ed
<{%reset%}>)
I0621 14:08:34.203312   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118086      25 schema.go:492] Created Terraform input: ManagedBy = Pulumi
<{%reset%}>)
I0621 14:08:34.203328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118102      25 schema.go:502] Terraform input ManagedBy = "Pulumi"
<{%reset%}>)
I0621 14:08:34.203355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118134      25 schema.go:492] Created Terraform input: tags = map[ManagedBy:Pulumi]
<{%reset%}>)
I0621 14:08:34.203379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118185      25 schema.go:492] Created Terraform input: badge_enabled = true
<{%reset%}>)
I0621 14:08:34.203401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118201      25 schema.go:492] Created Terraform input: build_timeout = 60
<{%reset%}>)
I0621 14:08:34.203416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118208      25 schema.go:492] Created Terraform input: name = my-codebuild
<{%reset%}>)
I0621 14:08:34.203468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118244      25 schema.go:492] Created Terraform input: project_visibility = PUBLIC_READ
<{%reset%}>)
I0621 14:08:34.203505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118276      25 schema.go:492] Created Terraform input: queued_timeout = 480
<{%reset%}>)
I0621 14:08:34.203538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118319      25 schema.go:492] Created Terraform input: encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.203569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118339      25 schema.go:492] Created Terraform input: override_artifact_name = false
<{%reset%}>)
I0621 14:08:34.203593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118360      25 schema.go:492] Created Terraform input: type = NO_ARTIFACTS
<{%reset%}>)
I0621 14:08:34.203619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118372      25 schema.go:502] Terraform input encryption_disabled = false
<{%reset%}>)
I0621 14:08:34.203645   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118381      25 schema.go:502] Terraform input override_artifact_name = false
<{%reset%}>)
I0621 14:08:34.203676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118399      25 schema.go:502] Terraform input type = "NO_ARTIFACTS"
<{%reset%}>)
I0621 14:08:34.203701   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118411      25 schema.go:492] Created Terraform input: artifacts = [map[encryption_disabled:false override_artifact_name:false type:NO_ARTIFACTS]]
<{%reset%}>)
I0621 14:08:34.203727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118509      25 schema.go:492] Created Terraform input: compute_type = BUILD_GENERAL1_SMALL
<{%reset%}>)
I0621 14:08:34.203752   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118540      25 schema.go:492] Created Terraform input: image = aws/codebuild/amazonlinux2-x86_64-standard:5.0
<{%reset%}>)
I0621 14:08:34.203779   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118567      25 schema.go:492] Created Terraform input: image_pull_credentials_type = CODEBUILD
<{%reset%}>)
I0621 14:08:34.203807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118589      25 schema.go:492] Created Terraform input: privileged_mode = false
<{%reset%}>)
I0621 14:08:34.203833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118649      25 schema.go:492] Created Terraform input: type = LINUX_CONTAINER
<{%reset%}>)
I0621 14:08:34.203857   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118673      25 schema.go:502] Terraform input compute_type = "BUILD_GENERAL1_SMALL"
<{%reset%}>)
I0621 14:08:34.203882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118693      25 schema.go:502] Terraform input image = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
<{%reset%}>)
I0621 14:08:34.203908   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118719      25 schema.go:502] Terraform input image_pull_credentials_type = "CODEBUILD"
<{%reset%}>)
I0621 14:08:34.203939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118733      25 schema.go:502] Terraform input privileged_mode = false
<{%reset%}>)
I0621 14:08:34.203992   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118774      25 schema.go:502] Terraform input type = "LINUX_CONTAINER"
<{%reset%}>)
I0621 14:08:34.204034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118799      25 schema.go:492] Created Terraform input: environment = [map[compute_type:BUILD_GENERAL1_SMALL image:aws/codebuild/amazonlinux2-x86_64-standard:5.0 image_pull_credentials_type:CODEBUILD privileged_mode:false type:LINUX_CONTAINER]]
<{%reset%}>)
I0621 14:08:34.204063   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118844      25 schema.go:492] Created Terraform input: type = CODECOMMIT
<{%reset%}>)
I0621 14:08:34.204098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.118864      25 schema.go:492] Created Terraform input: buildspec = # buildspec.yml
<{%reset%}>)
I0621 14:08:34.204124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.204156   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.204200   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.204230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.204258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.204281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.204308   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.204333   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.204359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.204381   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.204406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.204430   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.204459   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.204486   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.204529   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.204576   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.204607   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.204633   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.204658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.204681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.204727   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.204766   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild,arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild) success: changes=1 #replaces=[] #stables=[name] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:34.204781   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.204890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.204927   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.204978   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.204934   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild' after diff (same) (inputs=map[__defaults:{[{buildTimeout} {queuedTimeout}]} artifacts:{map[__defaults:{[{encryptionDisabled} {overrideArtifactName}]} encryptionDisabled:{false} overrideArtifactName:{false} type:{NO_ARTIFACTS}]} badgeEnabled:{true} buildTimeout:{60} environment:{map[__defaults:{[{imagePullCredentialsType} {privilegedMode}]} computeType:{BUILD_GENERAL1_SMALL} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} type:{LINUX_CONTAINER}]} name:{my-codebuild} projectVisibility:{PUBLIC_READ} queuedTimeout:{480} serviceRole:{arn:aws:iam::103429827345:role/codeBuildRole-615d8ed} source:{map[__defaults:{[]} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} type:{CODECOMMIT}]} tags:{map[ManagedBy:{Pulumi} __defaults:{[]}]}])
I0621 14:08:34.205034   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:08:34.205072   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:34.205041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.205107   31957 log.go:80] StepExecutor worker(5): launching oneshot worker
I0621 14:08:34.205098   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:34.205251   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild`
I0621 14:08:34.205275   31957 log.go:80] StepExecutor worker(5): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild (preview false)
I0621 14:08:34.205118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.205476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.205510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.205536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.205565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.205591   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.205618   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.205642   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.205669   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.205691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.205715   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.205737   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.205452   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:34.205783   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:08:34.205808   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:08:34.205910   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:34.205939   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:34.205970   31957 log.go:80] StepExecutor worker(5): step same on urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild retired
I0621 14:08:34.205979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.206008   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild
I0621 14:08:34.206088   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:codebuild/project:Project, urn=urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild, #outs=28
I0621 14:08:34.206043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.206128   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.206172   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifacts={map[artifactIdentifier:{} bucketOwnerAccess:{} encryptionDisabled:{false} location:{} name:{} namespaceType:{} overrideArtifactName:{false} packaging:{} path:{} type:{NO_ARTIFACTS}]}
I0621 14:08:34.206200   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: artifactIdentifier={}
I0621 14:08:34.206224   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: bucketOwnerAccess={}
I0621 14:08:34.206249   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionDisabled={false}
I0621 14:08:34.206273   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:08:34.206318   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={}
I0621 14:08:34.206342   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: namespaceType={}
I0621 14:08:34.206367   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: overrideArtifactName={false}
I0621 14:08:34.206385   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: packaging={}
I0621 14:08:34.206399   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: path={}
I0621 14:08:34.206417   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_ARTIFACTS}
I0621 14:08:34.206441   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeEnabled={true}
I0621 14:08:34.206466   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: badgeUrl={https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZjlzM0JzOSsxNkNPMTEwT0NWRzJtQVFSTWJoZHVKREwwNmNNUEtZZzEvTGdDdURxUzE4dkExOWlvazIxakE2Y25nb2ZUWDgybWdnVUZGWW0vQlA2UDlNPSIsIml2UGFyYW1ldGVyU3BlYyI6IlRxWUxLa2lKdVdvSXFuTU0iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main}
I0621 14:08:34.206489   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildBatchConfig={<nil>}
I0621 14:08:34.206519   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildTimeout={60}
I0621 14:08:34.206562   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: cache={map[location:{} modes:{[]} type:{NO_CACHE}]}
I0621 14:08:34.206589   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:08:34.206612   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: modes={[]}
I0621 14:08:34.206628   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={NO_CACHE}
I0621 14:08:34.206644   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: concurrentBuildLimit={0}
I0621 14:08:34.206657   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: description={}
I0621 14:08:34.206672   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionKey={arn:aws:kms:eu-west-1:103429827345:alias/aws/s3}
I0621 14:08:34.206696   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environment={map[certificate:{} computeType:{BUILD_GENERAL1_SMALL} environmentVariables:{[]} image:{aws/codebuild/amazonlinux2-x86_64-standard:5.0} imagePullCredentialsType:{CODEBUILD} privilegedMode:{false} registryCredential:{<nil>} type:{LINUX_CONTAINER}]}
I0621 14:08:34.206725   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: certificate={}
I0621 14:08:34.206740   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: computeType={BUILD_GENERAL1_SMALL}
I0621 14:08:34.206754   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: environmentVariables={[]}
I0621 14:08:34.206768   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: image={aws/codebuild/amazonlinux2-x86_64-standard:5.0}
I0621 14:08:34.206781   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: imagePullCredentialsType={CODEBUILD}
I0621 14:08:34.206875   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: privilegedMode={false}
I0621 14:08:34.206894   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: registryCredential={<nil>}
I0621 14:08:34.206909   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={LINUX_CONTAINER}
I0621 14:08:34.206924   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: fileSystemLocations={[]}
I0621 14:08:34.206938   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: id={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.206965   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: logsConfig={map[cloudwatchLogs:{map[groupName:{} status:{ENABLED} streamName:{}]} s3Logs:{map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}]}
I0621 14:08:34.206984   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: cloudwatchLogs={map[groupName:{} status:{ENABLED} streamName:{}]}
I0621 14:08:34.206999   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: groupName={}
I0621 14:08:34.207014   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: status={ENABLED}
I0621 14:08:34.207030   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: streamName={}
I0621 14:08:34.206137   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.207066   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: s3Logs={map[bucketOwnerAccess:{} encryptionDisabled:{false} location:{} status:{DISABLED}]}
I0621 14:08:34.207101   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.207127   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: bucketOwnerAccess={}
I0621 14:08:34.207149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.207156   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: encryptionDisabled={false}
I0621 14:08:34.207197   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={}
I0621 14:08:34.207226   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: status={DISABLED}
I0621 14:08:34.207250   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: name={my-codebuild}
I0621 14:08:34.207264   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: projectVisibility={PUBLIC_READ}
I0621 14:08:34.207279   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: publicProjectAlias={eyJlbmNyeXB0ZWREYXRhIjoiK3hmZzdoSnZRRVhERlZ3blhGbk5KaUVwckN1UnpBQmxrbTZVQ2dPOGxQdGpKcDduQlhvMy9CV2lJc2ZZWWNBd21pdEVoUDlsLy9STXIzZFEvR3drTE54Z0pCR0VwcHFzLzN0T1ZxRT0iLCJpdlBhcmFtZXRlclNwZWMiOiJTRk9JT1lxbU84VG5ia3pRIiwibWF0ZXJpYWxTZXRTZXJpYWwiOjF9}
I0621 14:08:34.207294   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: queuedTimeout={480}
I0621 14:08:34.207311   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: resourceAccessRole={}
I0621 14:08:34.207326   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondaryArtifacts={[]}
I0621 14:08:34.207341   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondarySourceVersions={[]}
I0621 14:08:34.207355   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: secondarySources={[]}
I0621 14:08:34.207369   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: serviceRole={arn:aws:iam::103429827345:role/codeBuildRole-615d8ed}
I0621 14:08:34.207417   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: source={map[auth:{<nil>} buildStatusConfig:{<nil>} buildspec:{# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
} gitCloneDepth:{0} gitSubmodulesConfig:{<nil>} insecureSsl:{false} location:{https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2} reportBuildStatus:{false} type:{CODECOMMIT}]}
I0621 14:08:34.207439   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: auth={<nil>}
I0621 14:08:34.207455   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildStatusConfig={<nil>}
I0621 14:08:34.207486   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: buildspec={# buildspec.yml
version: 0.2
env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      golang: 1.20
    commands:
      - pip install git-remote-codecommit
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - git switch $sourceHead
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
        fi
  pre_build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
            echo "Revoking approval"
            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
        fi
              # Check Go version
      - go version
      - go get -t ./...
  build:
    commands:
      - |
        if [[ "$sourceHead" == *"RC"* ]] ; then
         go vet
         go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${sourceHead}-${date}"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
          if [ $IsMerged = "True" ]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
          fi
        else
          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
        fi
}
I0621 14:08:34.207502   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: gitCloneDepth={0}
I0621 14:08:34.207525   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: gitSubmodulesConfig={<nil>}
I0621 14:08:34.207541   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: insecureSsl={false}
I0621 14:08:34.207556   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: location={https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2}
I0621 14:08:34.207570   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: reportBuildStatus={false}
I0621 14:08:34.207584   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: type={CODECOMMIT}
I0621 14:08:34.207599   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: sourceVersion={}
I0621 14:08:34.207631   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tags={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.207660   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:08:34.207180   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.207717   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.207744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.207761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.207790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.207809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.207828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.207842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.207859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.207872   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.207890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.207905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.207922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.207939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.207960   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.207979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.183717      25 schema.go:492] Created Terraform input: location = https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2
<{%reset%}>)
I0621 14:08:34.208002   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.183745      25 schema.go:502] Terraform input type = "CODECOMMIT"
<{%reset%}>)
I0621 14:08:34.208075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.183760      25 schema.go:502] Terraform input buildspec = "# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n"
<{%reset%}>)
I0621 14:08:34.207683   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: tagsAll={map[ManagedBy:{Pulumi}]}
I0621 14:08:34.208127   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: ManagedBy={Pulumi}
I0621 14:08:34.208149   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:codebuild/project:Project,my-codebuild)]: vpcConfig={<nil>}
I0621 14:08:34.208203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.183869      25 schema.go:502] Terraform input location = "https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2"
<{%reset%}>)
I0621 14:08:34.208256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.183885      25 schema.go:492] Created Terraform input: source = [map[buildspec:# buildspec.yml
<{%reset%}>)
I0621 14:08:34.208294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>version: 0.2
<{%reset%}>)
I0621 14:08:34.208319   31957 log.go:80] eventSink::Infoerr(<{%reset%}>env:
<{%reset%}>)
I0621 14:08:34.208343   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  git-credential-helper: yes
<{%reset%}>)
I0621 14:08:34.208367   31957 log.go:80] eventSink::Infoerr(<{%reset%}>phases:
<{%reset%}>)
I0621 14:08:34.208391   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  install:
<{%reset%}>)
I0621 14:08:34.208415   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    runtime-versions:
<{%reset%}>)
I0621 14:08:34.208440   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      golang: 1.20
<{%reset%}>)
I0621 14:08:34.208485   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.208517   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - pip install git-remote-codecommit
<{%reset%}>)
I0621 14:08:34.208544   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.email "CodeBuild"
<{%reset%}>)
I0621 14:08:34.208572   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git config --global user.name "CodeBuild CI Process"
<{%reset%}>)
I0621 14:08:34.208593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export URL=$(echo "https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName")
<{%reset%}>)
I0621 14:08:34.208613   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export sourceHead="$(echo "$sourceReference" | cut -d '/' -f3-)"
<{%reset%}>)
I0621 14:08:34.208628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
<{%reset%}>)
I0621 14:08:34.208645   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - git switch $sourceHead
<{%reset%}>)
I0621 14:08:34.208659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.208681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.208698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)
<{%reset%}>)
I0621 14:08:34.208731   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)
<{%reset%}>)
I0621 14:08:34.208805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.208846   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  pre_build:
<{%reset%}>)
I0621 14:08:34.208876   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.208901   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.208934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.208959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            echo "Revoking approval"
<{%reset%}>)
I0621 14:08:34.208991   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.209018   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.209043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>              # Check Go version
<{%reset%}>)
I0621 14:08:34.209075   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go version
<{%reset%}>)
I0621 14:08:34.209111   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - go get -t ./...
<{%reset%}>)
I0621 14:08:34.209139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  build:
<{%reset%}>)
I0621 14:08:34.209166   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.209193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.209221   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [[ "$sourceHead" == *"RC"* ]] ; then
<{%reset%}>)
I0621 14:08:34.209248   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go vet
<{%reset%}>)
I0621 14:08:34.209276   31957 log.go:80] eventSink::Infoerr(<{%reset%}>         go test ./... -v
<{%reset%}>)
I0621 14:08:34.209346   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.209378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  post_build:
<{%reset%}>)
I0621 14:08:34.209401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    commands:
<{%reset%}>)
I0621 14:08:34.209432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export date=$(date '+%d-%m-%Y-%H%M%S')
<{%reset%}>)
I0621 14:08:34.209451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - export TAG="${sourceHead}-${date}"
<{%reset%}>)
I0621 14:08:34.209470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>      - |
<{%reset%}>)
I0621 14:08:34.209494   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
<{%reset%}>)
I0621 14:08:34.209531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;
<{%reset%}>)
I0621 14:08:34.209550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.209569   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Passed: $sourceHead"
<{%reset%}>)
I0621 14:08:34.209584   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.209581   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResourceOutputs(urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox)]: codebuildProjectName={my-codebuild}
I0621 14:08:34.209618   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResourceOutputs(urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox)]: repositoryName={my-repo-2}
I0621 14:08:34.209634   31957 log.go:80] ResourceMonitor.RegisterResourceOutputs received: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=2
I0621 14:08:34.209655   31957 log.go:80] EvalSourceIterator produced a completion: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox,#outs=2
I0621 14:08:34.209660   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:34.209682   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.209720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)
<{%reset%}>)
I0621 14:08:34.209741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          if [ $IsMerged = "True" ]; then
<{%reset%}>)
I0621 14:08:34.209761   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead
<{%reset%}>)
I0621 14:08:34.209784   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          fi
<{%reset%}>)
I0621 14:08:34.209700   31957 log.go:80] handling default provider request for package aws
I0621 14:08:34.209834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        else
<{%reset%}>)
I0621 14:08:34.209842   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:34.209919   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:34.209673   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.209961   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.210028   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.210051   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: path={/}
I0621 14:08:34.210077   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:08:34.210002   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received register resource outputs
I0621 14:08:34.210136   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/policy:Policy, name=cwe-policy, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:34.209885   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          content="❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
<{%reset%}>)
I0621 14:08:34.210178   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/policy:Policy,name=cwe-policy,#props=4
I0621 14:08:34.210152   31957 log.go:80] StepExecutor worker(-1): registered resource outputs urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox: old=#2, new=#2
I0621 14:08:34.210193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git tag -a $TAG -m "CI Tests Failed!: $sourceHead"
<{%reset%}>)
I0621 14:08:34.210820   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          git push origin $TAG
<{%reset%}>)
I0621 14:08:34.210867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content"
<{%reset%}>)
I0621 14:08:34.210897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        fi
<{%reset%}>)
I0621 14:08:34.210925   31957 log.go:80] eventSink::Infoerr(<{%reset%}> location:https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2 type:CODECOMMIT]]
<{%reset%}>)
I0621 14:08:34.210959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184510      25 schema.go:502] Terraform input service_role = "arn:aws:iam::103429827345:role/codeBuildRole-615d8ed"
<{%reset%}>)
I0621 14:08:34.211124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184532      25 schema.go:502] Terraform input badge_enabled = true
<{%reset%}>)
I0621 14:08:34.211154   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184544      25 schema.go:502] Terraform input name = "my-codebuild"
<{%reset%}>)
I0621 14:08:34.211181   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184565      25 schema.go:502] Terraform input queued_timeout = 480
<{%reset%}>)
I0621 14:08:34.211208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184577      25 schema.go:502] Terraform input environment = []interface {}{map[string]interface {}{"compute_type":"BUILD_GENERAL1_SMALL", "image":"aws/codebuild/amazonlinux2-x86_64-standard:5.0", "image_pull_credentials_type":"CODEBUILD", "privileged_mode":false, "type":"LINUX_CONTAINER"}}
<{%reset%}>)
I0621 14:08:34.211289   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.184647      25 schema.go:502] Terraform input source = []interface {}{map[string]interface {}{"buildspec":"# buildspec.yml\nversion: 0.2\nenv:\n  git-credential-helper: yes\n\nphases:\n  install:\n    runtime-versions:\n      golang: 1.20\n    commands:\n      - pip install git-remote-codecommit\n      - git config --global user.email \"CodeBuild\"\n      - git config --global user.name \"CodeBuild CI Process\"\n      - export URL=$(echo \"https://git-codecommit.$region.amazonaws.com/v1/repos/$repositoryName\")\n      - export sourceHead=\"$(echo \"$sourceReference\" | cut -d '/' -f3-)\"\n      - export CODEBUILD_GIT_BRANCH=\"$(git symbolic-ref HEAD --short 2>/dev/null)\"\n      - git switch $sourceHead\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n          export BUILD_NAME=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)\n          export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f2)\n        fi\n  pre_build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n            echo \"Revoking approval\"\n            aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state REVOKE --revision-id $revisionId;\n        fi\n              # Check Go version\n      - go version\n      - go get -t ./...\n  build:\n    commands:\n      - |\n        if [[ \"$sourceHead\" == *\"RC\"* ]] ; then\n         go vet\n         go test ./... -v\n        fi\n  post_build:\n    commands:\n      - export date=$(date '+%d-%m-%Y-%H%M%S')\n      - export TAG=\"${sourceHead}-${date}\"\n      - |\n        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then\n          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId;\n          content=\"✔️  Pull request build SUCCEEDED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/passing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Passed: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text)\n          if [ $IsMerged = \"True\" ]; then\n            aws codecommit delete-branch --repository-name $repositoryName --branch-name $sourceHead\n          fi\n        else\n          content=\"❌ Pull request build FAILED! ![](https://codefactory-eu-west-1-prod-default-build-badges.s3-eu-west-1.amazonaws.com/failing.svg)  ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)\"\n          git tag -a $TAG -m \"CI Tests Failed!: $sourceHead\"\n          git push origin $TAG\n          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content \"$content\"\n        fi\n", "location":"https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/my-repo-2", "type":"CODECOMMIT"}}
<{%reset%}>)
I0621 14:08:34.211348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.187322      25 schema.go:502] Terraform input tags = map[string]interface {}{"ManagedBy":"Pulumi"}
<{%reset%}>)
I0621 14:08:34.211418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.187379      25 schema.go:502] Terraform input build_timeout = 60
<{%reset%}>)
I0621 14:08:34.211464   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.187392      25 schema.go:502] Terraform input project_visibility = "PUBLIC_READ"
<{%reset%}>)
I0621 14:08:34.211493   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.187402      25 schema.go:502] Terraform input artifacts = []interface {}{map[string]interface {}{"encryption_disabled":false, "override_artifact_name":false, "type":"NO_ARTIFACTS"}}
<{%reset%}>)
I0621 14:08:34.498247   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.498300   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:34.498299   31957 log.go:80] ResourceMonitor.RegisterResourceOutputs operation finished: urn=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, #outs=2
I0621 14:08:34.498331   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.498418   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy) executing (#olds=5,#news=4)
I0621 14:08:34.498445   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: __defaults={[]}
I0621 14:08:34.498462   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.498476   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.498490   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: path={/}
I0621 14:08:34.498508   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).olds]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:08:34.498525   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.498539   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.498553   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: path={/}
I0621 14:08:34.498578   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).news]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:08:34.499120   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499058      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:08:34.499187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499091      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.499217   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499107      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.499241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499120      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.499265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499133      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:08:34.499288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499145      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policy={{
<{%reset%}>)
I0621 14:08:34.499324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.499355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.499379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.499406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.499429   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.499449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.499465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.499482   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.499499   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.499515   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.499531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.499546   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.499562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:08:34.499579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499161      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.499605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499173      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.499628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499186      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:08:34.499647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499198      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: policy={{
<{%reset%}>)
I0621 14:08:34.499663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.499678   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.499692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.499709   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.499723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.499740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.499754   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.499770   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.499786   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.499801   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.499816   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.499837   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.499868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:08:34.499891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499222      25 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:08:34.499914   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499253      25 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:08:34.499934   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499295      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:34.499959   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499317      25 schema.go:492] Created Terraform input: policy = {
<{%reset%}>)
I0621 14:08:34.499984   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.500009   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.500036   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.500060   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.500062   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: __defaults={[]}
I0621 14:08:34.500110   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.500142   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.500192   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: path={/}
I0621 14:08:34.500086   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.500219   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy).inputs]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:08:34.500241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.500255   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy) success: inputs=#5 failures=#0
I0621 14:08:34.500272   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.500295   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2): executing (#olds=10,#news=5)
I0621 14:08:34.500333   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.500354   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.500377   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.500303   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.500393   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.500488   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: namePrefix={}
I0621 14:08:34.500513   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: path={/}
I0621 14:08:34.500530   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
I0621 14:08:34.500548   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: policyId={ANPARQFHF5MIRDHDGFWK6}
I0621 14:08:34.500570   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: tags={map[]}
I0621 14:08:34.500590   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).olds]: tagsAll={map[]}
I0621 14:08:34.500613   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: __defaults={[]}
I0621 14:08:34.500629   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.500644   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.500659   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: path={/}
I0621 14:08:34.500677   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2).news]: policy={{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}
I0621 14:08:34.500460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.500858   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.500879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.500896   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.500912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }
<{%reset%}>)
I0621 14:08:34.500930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499352      25 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:08:34.500954   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499366      25 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:08:34.500989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499376      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.501017   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499514      25 schema.go:502] Terraform input policy = "{\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"codebuild:StartBuild\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"\n                ]\n            }\n        ]\n    }"
<{%reset%}>)
I0621 14:08:34.501047   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499550      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:34.501073   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499696      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:34.501099   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499708      25 schema.go:881] Terraform output description = {Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.501119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499716      25 schema.go:881] Terraform output name = {CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.501135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499723      25 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:08:34.501153   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499730      25 schema.go:881] Terraform output policy = {{
<{%reset%}>)
I0621 14:08:34.501169   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.501186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.501202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.501219   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.501237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.501253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.501268   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.501281   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.501302   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.501318   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.501335   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.501350   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.501366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:08:34.501384   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499749      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.501401   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499758      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.501418   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499765      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.501435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499772      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: path={/}
<{%reset%}>)
I0621 14:08:34.501453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.499779      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).inputs]: policy={{
<{%reset%}>)
I0621 14:08:34.501477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.501504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.501541   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.501562   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.501578   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.501593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.501609   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.501624   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.501641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.501657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.501673   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.501688   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.501705   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:08:34.501740   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501089      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy) executing
<{%reset%}>)
I0621 14:08:34.501764   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501116      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.501782   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501127      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.501801   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501135      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.501818   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501143      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.501834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501150      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: namePrefix={}
<{%reset%}>)
I0621 14:08:34.501859   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501157      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: path={/}
<{%reset%}>)
I0621 14:08:34.501878   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501164      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:34.501973   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501179      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: policyId={ANPARQFHF5MIRDHDGFWK6}
<{%reset%}>)
I0621 14:08:34.501996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501193      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:34.502013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501201      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:34.502034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501214      25 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:08:34.502061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501223      25 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:08:34.502098   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501238      25 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:08:34.502118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501247      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:34.502135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501271      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:34.502151   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501282      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:34.502168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501293      25 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:08:34.502186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501315      25 schema.go:492] Created Terraform input: policy = {"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:34.502203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501326      25 schema.go:492] Created Terraform input: policy_id = ANPARQFHF5MIRDHDGFWK6
<{%reset%}>)
I0621 14:08:34.502218   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501338      25 schema.go:492] Created Terraform input: id = arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:08:34.502233   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501345      25 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:08:34.502250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501352      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.502271   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501359      25 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:08:34.502291   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501367      25 schema.go:502] Terraform input policy = "{\"Statement\":[{\"Action\":[\"codebuild:StartBuild\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"]}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:34.502310   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501377      25 schema.go:502] Terraform input policy_id = "ANPARQFHF5MIRDHDGFWK6"
<{%reset%}>)
I0621 14:08:34.502328   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501385      25 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:08:34.502345   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501392      25 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:08:34.502360   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501399      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.502387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501405      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.502410   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501411      25 schema.go:502] Terraform input id = "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:08:34.502435   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501455      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.502453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501476      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
<{%reset%}>)
I0621 14:08:34.502470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501490      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
<{%reset%}>)
I0621 14:08:34.502487   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501520      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: path={/}
<{%reset%}>)
I0621 14:08:34.502502   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501535      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy/aws_iam_policy).news]: policy={{
<{%reset%}>)
I0621 14:08:34.502521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.502536   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.502553   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.502567   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.502587   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.502612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.502653   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.502698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.502722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.502739   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.502755   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.502769   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.502785   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }}
<{%reset%}>)
I0621 14:08:34.502804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501579      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:34.502825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501593      25 schema.go:492] Created Terraform input: policy = {
<{%reset%}>)
I0621 14:08:34.502842   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.502866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        "Statement": [
<{%reset%}>)
I0621 14:08:34.502882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            {
<{%reset%}>)
I0621 14:08:34.502898   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.502913   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Action": [
<{%reset%}>)
I0621 14:08:34.502930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "codebuild:StartBuild"
<{%reset%}>)
I0621 14:08:34.502945   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ],
<{%reset%}>)
I0621 14:08:34.502961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Resource": [
<{%reset%}>)
I0621 14:08:34.502978   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.502997   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                ]
<{%reset%}>)
I0621 14:08:34.503012   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            }
<{%reset%}>)
I0621 14:08:34.503028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        ]
<{%reset%}>)
I0621 14:08:34.503043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    }
<{%reset%}>)
I0621 14:08:34.503063   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501605      25 schema.go:492] Created Terraform input: description = Policy to allow CodeBuild to be invoked by Cloudwatch Events.
<{%reset%}>)
I0621 14:08:34.503081   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501612      25 schema.go:492] Created Terraform input: name = CodeBuild-Invoke-Role-For-Cloudwatch-Events2
<{%reset%}>)
I0621 14:08:34.503099   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501622      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.503118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501631      25 schema.go:502] Terraform input policy = "{\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"codebuild:StartBuild\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild\"\n                ]\n            }\n        ]\n    }"
<{%reset%}>)
I0621 14:08:34.503119   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy,arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2) success: changes=1 #replaces=[] #stables=[description namePrefix path name] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:34.503213   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy' after diff (same) (inputs=map[__defaults:{[]} description:{Policy to allow CodeBuild to be invoked by Cloudwatch Events.} name:{CodeBuild-Invoke-Role-For-Cloudwatch-Events2} path:{/} policy:{{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "codebuild:StartBuild"
                ],
                "Resource": [
                    "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
                ]
            }
        ]
    }}])
I0621 14:08:34.503239   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:08:34.503148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501644      25 schema.go:502] Terraform input description = "Policy to allow CodeBuild to be invoked by Cloudwatch Events."
<{%reset%}>)
I0621 14:08:34.503262   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:34.503279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.501657      25 schema.go:502] Terraform input name = "CodeBuild-Invoke-Role-For-Cloudwatch-Events2"
<{%reset%}>)
I0621 14:08:34.503294   31957 log.go:80] StepExecutor worker(6): launching oneshot worker
I0621 14:08:34.503352   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy`
I0621 14:08:34.503374   31957 log.go:80] StepExecutor worker(6): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy (preview false)
I0621 14:08:34.503425   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:34.503445   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:08:34.503459   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:08:34.503487   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:34.503502   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:34.503517   31957 log.go:80] StepExecutor worker(6): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy retired
I0621 14:08:34.503537   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy
I0621 14:08:34.503555   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/policy:Policy, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy, #outs=10
I0621 14:08:34.503572   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: arn={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.503588   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: description={Policy to allow CodeBuild to be invoked by Cloudwatch Events.}
I0621 14:08:34.503603   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: id={arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.503617   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: name={CodeBuild-Invoke-Role-For-Cloudwatch-Events2}
I0621 14:08:34.503632   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: namePrefix={}
I0621 14:08:34.503645   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: path={/}
I0621 14:08:34.503288   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:34.503697   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policy={{"Statement":[{"Action":["codebuild:StartBuild"],"Effect":"Allow","Resource":["arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"]}],"Version":"2012-10-17"}}
I0621 14:08:34.503748   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: policyId={ANPARQFHF5MIRDHDGFWK6}
I0621 14:08:34.503776   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: tags={map[]}
I0621 14:08:34.503795   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/policy:Policy,cwe-policy)]: tagsAll={map[]}
I0621 14:08:34.504722   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:34.504769   31957 log.go:80] handling default provider request for package aws
I0621 14:08:34.504800   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:34.504851   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:34.504919   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:08:34.504957   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.504994   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:iam/role:Role, name=cloudWatchRole, custom=true, #props=2, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:iam/policy:Policy::cwe-policy], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:34.505022   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:iam/role:Role,name=cloudWatchRole,#props=2
I0621 14:08:34.505040   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.505053   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:34.505079   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.505109   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole) executing (#olds=7,#news=2)
I0621 14:08:34.505132   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:34.505151   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:08:34.505165   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: forceDetachPolicies={false}
I0621 14:08:34.505197   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.505215   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: maxSessionDuration={3600}
I0621 14:08:34.505231   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: name={cloudWatchRole-4edbdf2}
I0621 14:08:34.505249   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).olds]: path={/}
I0621 14:08:34.505268   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).news]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:08:34.505285   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.505731   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505673      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:08:34.505783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505724      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:34.505807   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505734      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:34.505825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.505851   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.505876   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.505899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.505924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.505950   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.505979   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.506008   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.506033   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.506069   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.506094   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:34.506118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505743      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:34.506140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505752      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.506158   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505762      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:34.506176   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505769      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.506202   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505776      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:08:34.506223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505784      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:34.506239   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.506254   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.506269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.506284   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.506299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.506315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.506331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.506359   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.506377   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.506392   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.506408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:34.506430   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505793      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.506458   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505825      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:08:34.506476   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505842      25 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:08:34.506492   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.506508   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.506524   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.506540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.506555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.506571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.506585   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.506605   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.506621   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.506636   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.506659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.506691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505885      25 schema.go:671] Created Terraform input: name = cloudWatchRole-4edbdf2 (from old default)
<{%reset%}>)
I0621 14:08:34.506733   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505936      25 schema.go:756] Created Terraform input: force_detach_policies = false (from old default)
<{%reset%}>)
I0621 14:08:34.506768   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505953      25 schema.go:756] Created Terraform input: path = / (from old default)
<{%reset%}>)
I0621 14:08:34.506799   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.505983      25 schema.go:756] Created Terraform input: max_session_duration = 3600 (from old default)
<{%reset%}>)
I0621 14:08:34.506818   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:34.506859   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:08:34.506878   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: forceDetachPolicies={false}
I0621 14:08:34.506896   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.506913   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: maxSessionDuration={3600}
I0621 14:08:34.506927   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: name={cloudWatchRole-4edbdf2}
I0621 14:08:34.506942   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole).inputs]: path={/}
I0621 14:08:34.506958   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole) success: inputs=#7 failures=#0
I0621 14:08:34.506980   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2): executing (#olds=16,#news=7)
I0621 14:08:34.507002   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.507019   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
I0621 14:08:34.507034   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: createDate={2023-06-21T12:44:38Z}
I0621 14:08:34.507048   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: description={}
I0621 14:08:34.507063   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: forceDetachPolicies={false}
I0621 14:08:34.507081   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: id={cloudWatchRole-4edbdf2}
I0621 14:08:34.507099   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: inlinePolicies={[]}
I0621 14:08:34.507116   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.507131   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: maxSessionDuration={3600}
I0621 14:08:34.507151   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: name={cloudWatchRole-4edbdf2}
I0621 14:08:34.507165   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: namePrefix={}
I0621 14:08:34.507179   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: path={/}
I0621 14:08:34.507200   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:08:34.507216   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: lastUsedDate={}
I0621 14:08:34.507235   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: region={}
I0621 14:08:34.507254   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: tags={map[]}
I0621 14:08:34.506824   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506006      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:34.507433   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506014      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.507475   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506026      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:34.507359   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: tagsAll={map[]}
I0621 14:08:34.507540   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).olds]: uniqueId={AROARQFHF5MIS3HNFHGDU}
I0621 14:08:34.507570   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
I0621 14:08:34.507591   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: assumeRolePolicy={{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}}
I0621 14:08:34.507610   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: forceDetachPolicies={false}
I0621 14:08:34.507631   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.507648   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: maxSessionDuration={3600}
I0621 14:08:34.507662   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: name={cloudWatchRole-4edbdf2}
I0621 14:08:34.507677   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2).news]: path={/}
I0621 14:08:34.507505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506095      25 schema.go:502] Terraform input __defaults = []interface {}{"forceDetachPolicies", "maxSessionDuration", "name", "path"}
<{%reset%}>)
I0621 14:08:34.507888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506137      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:08:34.507926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506151      25 schema.go:502] Terraform input assume_role_policy = "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"events.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}"
<{%reset%}>)
I0621 14:08:34.507967   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506163      25 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.508002   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506297      25 schema.go:881] Terraform output __defaults = {[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:34.508034   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506311      25 schema.go:881] Terraform output managedPolicyArns = {[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.508059   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506320      25 schema.go:881] Terraform output assumeRolePolicy = {{
<{%reset%}>)
I0621 14:08:34.508080   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.508109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.508173   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.508208   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.508237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.508285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.508314   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.508338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.508354   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.508372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.508387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:34.508405   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506326      25 schema.go:881] Terraform output name = {cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.508421   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506333      25 schema.go:881] Terraform output forceDetachPolicies = {false}
<{%reset%}>)
I0621 14:08:34.508439   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506339      25 schema.go:881] Terraform output path = {/}
<{%reset%}>)
I0621 14:08:34.508460   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506345      25 schema.go:881] Terraform output maxSessionDuration = {3600}
<{%reset%}>)
I0621 14:08:34.508500   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506359      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:34.508543   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506376      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:34.508564   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.508579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.508597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.508612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.508631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.508647   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.508671   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.508686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.508703   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.508718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.508734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:34.508750   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506384      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:34.508777   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506392      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.508804   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506407      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:34.508828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506415      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.508848   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.506422      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).inputs]: path={/}
<{%reset%}>)
I0621 14:08:34.508873   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508171      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role) executing
<{%reset%}>)
I0621 14:08:34.508891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508218      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.508919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508240      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
<{%reset%}>)
I0621 14:08:34.508944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508252      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: createDate={2023-06-21T12:44:38Z}
<{%reset%}>)
I0621 14:08:34.508966   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508263      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: description={}
<{%reset%}>)
I0621 14:08:34.508982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508281      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:34.509001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508322      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: id={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.509023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508334      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: inlinePolicies={[]}
<{%reset%}>)
I0621 14:08:34.509064   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508345      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.509084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508355      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:34.509102   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508364      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.509126   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508371      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: namePrefix={}
<{%reset%}>)
I0621 14:08:34.509148   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508379      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: path={/}
<{%reset%}>)
I0621 14:08:34.509182   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508400      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: lastUsedDate={}
<{%reset%}>)
I0621 14:08:34.509212   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508410      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: region={}
<{%reset%}>)
I0621 14:08:34.509230   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508457      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
<{%reset%}>)
I0621 14:08:34.509248   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508477      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:34.509265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508496      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:34.509288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508527      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).olds]: uniqueId={AROARQFHF5MIS3HNFHGDU}
<{%reset%}>)
I0621 14:08:34.509305   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508555      25 schema.go:492] Created Terraform input: assume_role_policy = {"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}
<{%reset%}>)
I0621 14:08:34.509324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508580      25 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:08:34.509340   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508607      25 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:08:34.509358   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508635      25 schema.go:492] Created Terraform input: last_used_date = 
<{%reset%}>)
I0621 14:08:34.509374   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508642      25 schema.go:492] Created Terraform input: region = 
<{%reset%}>)
I0621 14:08:34.509393   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508648      25 schema.go:502] Terraform input region = ""
<{%reset%}>)
I0621 14:08:34.509408   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508655      25 schema.go:502] Terraform input last_used_date = ""
<{%reset%}>)
I0621 14:08:34.509426   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508661      25 schema.go:492] Created Terraform input: role_last_used = [map[last_used_date: region:]]
<{%reset%}>)
I0621 14:08:34.509443   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508689      25 schema.go:492] Created Terraform input: arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.509461   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508709      25 schema.go:492] Created Terraform input: inline_policy = []
<{%reset%}>)
I0621 14:08:34.509483   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508738      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:08:34.509505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508757      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:34.509522   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508791      25 schema.go:492] Created Terraform input: create_date = 2023-06-21T12:44:38Z
<{%reset%}>)
I0621 14:08:34.509538   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508818      25 schema.go:492] Created Terraform input: description = 
<{%reset%}>)
I0621 14:08:34.509555   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508845      25 schema.go:492] Created Terraform input: id = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.509590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508852      25 schema.go:492] Created Terraform input: name = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.509623   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508873      25 schema.go:492] Created Terraform input: unique_id = AROARQFHF5MIS3HNFHGDU
<{%reset%}>)
I0621 14:08:34.509641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508887      25 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:08:34.509656   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508911      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:34.509670   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508933      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:34.509687   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508940      25 schema.go:502] Terraform input assume_role_policy = "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}"
<{%reset%}>)
I0621 14:08:34.509756   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508949      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.509775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508956      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:34.509792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508962      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:34.509814   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508968      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:08:34.509833   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508977      25 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.509861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508983      25 schema.go:502] Terraform input unique_id = "AROARQFHF5MIS3HNFHGDU"
<{%reset%}>)
I0621 14:08:34.509882   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.508995      25 schema.go:502] Terraform input role_last_used = []interface {}{map[string]interface {}{"last_used_date":"", "region":""}}
<{%reset%}>)
I0621 14:08:34.509897   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509012      25 schema.go:502] Terraform input inline_policy = []interface {}(nil)
<{%reset%}>)
I0621 14:08:34.509915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509023      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.509935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509036      25 schema.go:502] Terraform input description = ""
<{%reset%}>)
I0621 14:08:34.509956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509046      25 schema.go:502] Terraform input id = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.509972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509058      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.509989   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509071      25 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:08:34.510005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509077      25 schema.go:502] Terraform input arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.510029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509087      25 schema.go:502] Terraform input create_date = "2023-06-21T12:44:38Z"
<{%reset%}>)
I0621 14:08:34.510048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509214      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: __defaults={[{forceDetachPolicies} {maxSessionDuration} {name} {path}]}
<{%reset%}>)
I0621 14:08:34.510065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509229      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: assumeRolePolicy={{
<{%reset%}>)
I0621 14:08:34.510082   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.510099   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.510118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.510149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.510182   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.510203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.510220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.510235   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.510250   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.510267   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.510282   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}}
<{%reset%}>)
I0621 14:08:34.510299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509238      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: forceDetachPolicies={false}
<{%reset%}>)
I0621 14:08:34.510316   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509247      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
<{%reset%}>)
I0621 14:08:34.510338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509255      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: maxSessionDuration={3600}
<{%reset%}>)
I0621 14:08:34.510355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509262      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: name={cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.510375   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509269      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole/aws_iam_role).news]: path={/}
<{%reset%}>)
I0621 14:08:34.510394   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509276      25 schema.go:492] Created Terraform input: name = cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.510413   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509296      25 schema.go:492] Created Terraform input: path = /
<{%reset%}>)
I0621 14:08:34.510428   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509317      25 schema.go:492] Created Terraform input: assume_role_policy = {
<{%reset%}>)
I0621 14:08:34.510447   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Version": "2012-10-17",
<{%reset%}>)
I0621 14:08:34.510461   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    "Statement": [
<{%reset%}>)
I0621 14:08:34.510477   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        {
<{%reset%}>)
I0621 14:08:34.510491   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Effect": "Allow",
<{%reset%}>)
I0621 14:08:34.510510   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Principal": {
<{%reset%}>)
I0621 14:08:34.510525   31957 log.go:80] eventSink::Infoerr(<{%reset%}>                "Service": "events.amazonaws.com"
<{%reset%}>)
I0621 14:08:34.510542   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            },
<{%reset%}>)
I0621 14:08:34.510557   31957 log.go:80] eventSink::Infoerr(<{%reset%}>            "Action": "sts:AssumeRole"
<{%reset%}>)
I0621 14:08:34.510574   31957 log.go:80] eventSink::Infoerr(<{%reset%}>        }
<{%reset%}>)
I0621 14:08:34.510589   31957 log.go:80] eventSink::Infoerr(<{%reset%}>    ]
<{%reset%}>)
I0621 14:08:34.510606   31957 log.go:80] eventSink::Infoerr(<{%reset%}>}
<{%reset%}>)
I0621 14:08:34.510622   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509330      25 schema.go:492] Created Terraform input: force_detach_policies = false
<{%reset%}>)
I0621 14:08:34.510646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509354      25 schema.go:492] Created Terraform input: managed_policy_arns = [arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2]
<{%reset%}>)
I0621 14:08:34.510679   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509375      25 schema.go:492] Created Terraform input: max_session_duration = 3600
<{%reset%}>)
I0621 14:08:34.510715   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509393      25 schema.go:502] Terraform input assume_role_policy = "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"events.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}"
<{%reset%}>)
I0621 14:08:34.510775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509405      25 schema.go:502] Terraform input force_detach_policies = false
<{%reset%}>)
I0621 14:08:34.510815   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509412      25 schema.go:502] Terraform input managed_policy_arns = []interface {}{"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess", "arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2"}
<{%reset%}>)
I0621 14:08:34.510843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509421      25 schema.go:502] Terraform input max_session_duration = 3600
<{%reset%}>)
I0621 14:08:34.510860   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509427      25 schema.go:502] Terraform input name = "cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.510879   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.509433      25 schema.go:502] Terraform input path = "/"
<{%reset%}>)
I0621 14:08:34.512735   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole,cloudWatchRole-4edbdf2) success: changes=1 #replaces=[] #stables=[name path namePrefix] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:34.512804   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole' after diff (same) (inputs=map[__defaults:{[{forceDetachPolicies} {maxSessionDuration} {name} {path}]} assumeRolePolicy:{{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "events.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}} forceDetachPolicies:{false} managedPolicyArns:{[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]} maxSessionDuration:{3600} name:{cloudWatchRole-4edbdf2} path:{/}])
I0621 14:08:34.512835   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:08:34.512865   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:34.512932   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:34.512955   31957 log.go:80] StepExecutor worker(7): launching oneshot worker
I0621 14:08:34.513051   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole`
I0621 14:08:34.513072   31957 log.go:80] StepExecutor worker(7): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole (preview false)
I0621 14:08:34.513139   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:34.513159   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:08:34.513174   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:08:34.513210   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:34.513223   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:34.513240   31957 log.go:80] StepExecutor worker(7): step same on urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole retired
I0621 14:08:34.513259   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole
I0621 14:08:34.513279   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:iam/role:Role, urn=urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole, #outs=16
I0621 14:08:34.513300   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: arn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.513317   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: assumeRolePolicy={{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"events.amazonaws.com"}}],"Version":"2012-10-17"}}
I0621 14:08:34.513332   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: createDate={2023-06-21T12:44:38Z}
I0621 14:08:34.513349   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: description={}
I0621 14:08:34.513363   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: forceDetachPolicies={false}
I0621 14:08:34.513378   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: id={cloudWatchRole-4edbdf2}
I0621 14:08:34.513396   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: inlinePolicies={[]}
I0621 14:08:34.513417   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: managedPolicyArns={[{arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess} {arn:aws:iam::103429827345:policy/CodeBuild-Invoke-Role-For-Cloudwatch-Events2}]}
I0621 14:08:34.513435   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: maxSessionDuration={3600}
I0621 14:08:34.513451   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: name={cloudWatchRole-4edbdf2}
I0621 14:08:34.513471   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: namePrefix={}
I0621 14:08:34.513499   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: path={/}
I0621 14:08:34.513527   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: roleLastUseds={[{map[lastUsedDate:{} region:{}]}]}
I0621 14:08:34.513543   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: lastUsedDate={}
I0621 14:08:34.513557   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: region={}
I0621 14:08:34.513573   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: tags={map[]}
I0621 14:08:34.513592   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: tagsAll={map[]}
I0621 14:08:34.513607   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:iam/role:Role,cloudWatchRole)]: uniqueId={AROARQFHF5MIS3HNFHGDU}
I0621 14:08:34.514464   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:34.514516   31957 log.go:80] handling default provider request for package aws
I0621 14:08:34.514548   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:34.514584   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:34.514627   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.514672   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:08:34.514691   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.514716   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.514753   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:cloudwatch/eventRule:EventRule, name=pull-request-event-rule, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:codecommit/repository:Repository::my-repo urn:pulumi:sandbox::pulumi-trigger::aws:iam/role:Role::cloudWatchRole], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:34.514788   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:cloudwatch/eventRule:EventRule,name=pull-request-event-rule,#props=4
I0621 14:08:34.514809   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.514824   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:34.514856   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.514885   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule) executing (#olds=7,#news=4)
I0621 14:08:34.514908   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:08:34.514925   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.514940   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: eventBusName={default}
I0621 14:08:34.514956   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:08:34.514970   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: isEnabled={true}
I0621 14:08:34.514984   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.514999   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.515018   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.515035   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:08:34.515049   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.515066   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.515575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515523      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule) executing
<{%reset%}>)
I0621 14:08:34.515631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515603      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:08:34.515662   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515618      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.515691   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515628      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.515723   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515636      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventPattern={{
<{%reset%}>)
I0621 14:08:34.515743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.515758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.515775   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.515791   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.515809   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.515824   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.515840   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.515856   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.515873   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.515890   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.515906   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.515922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.515939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.515955   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.515972   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.515987   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.516008   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:08:34.516029   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515653      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: isEnabled={true}
<{%reset%}>)
I0621 14:08:34.516051   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515662      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.516072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515690      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.516096   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515717      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.516114   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515734      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventPattern={{
<{%reset%}>)
I0621 14:08:34.516132   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.516147   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.516164   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516178   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.516197   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.516216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516249   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.516285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.516311   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516338   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.516356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.516373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.516388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.516404   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.516419   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.516436   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.516451   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:08:34.516468   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515745      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.516486   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515756      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.516505   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515837      25 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:08:34.516523   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515856      25 schema.go:492] Created Terraform input: event_pattern = {
<{%reset%}>)
I0621 14:08:34.516547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.516565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.516583   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516597   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.516614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.516629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516637   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:08:34.516677   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.516696   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: eventBusName={default}
I0621 14:08:34.516713   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:08:34.516728   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: isEnabled={true}
I0621 14:08:34.516742   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.516822   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule).inputs]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.516646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.516891   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.516924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.516850   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule) success: inputs=#7 failures=#0
I0621 14:08:34.516991   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule): executing (#olds=12,#news=7)
I0621 14:08:34.516953   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.517025   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
I0621 14:08:34.517043   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.517071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.517093   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.517109   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.517126   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.517140   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.517158   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}
<{%reset%}>)
I0621 14:08:34.517175   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515864      25 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.517193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515879      25 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.517209   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515901      25 schema.go:756] Created Terraform input: is_enabled = true (from old default)
<{%reset%}>)
I0621 14:08:34.517226   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515929      25 schema.go:756] Created Terraform input: event_bus_name = default (from old default)
<{%reset%}>)
I0621 14:08:34.517241   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515942      25 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:08:34.517257   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515953      25 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:08:34.517273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515960      25 schema.go:502] Terraform input __defaults = []interface {}{"eventBusName", "isEnabled"}
<{%reset%}>)
I0621 14:08:34.517302   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515971      25 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:08:34.517330   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.515983      25 schema.go:502] Terraform input event_pattern = "{\n\t\t\"source\": [\n\t\t  \"aws.codecommit\"\n\t\t],\n\t\t\"detail-type\": [\n\t\t  \"CodeCommit Pull Request State Change\"\n\t\t],\n\t\t\"resources\": [\n\t\t\t\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"\n\t\t],\n\t\t\"detail\": {\n\t\t\t\"event\": [\n\t\t\t\t\"pullRequestCreated\",\n\t\t\t\t\"pullRequestUpdated\",\n\t\t\t\t\"pullRequestSourceBranchUpdated\"\n\t\t\t]\n\t\t}\n\t}"
<{%reset%}>)
I0621 14:08:34.517049   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.517413   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: eventBusName={default}
I0621 14:08:34.517438   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
I0621 14:08:34.517455   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: id={pull-request-Codebuild-event-rule}
I0621 14:08:34.517474   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: isEnabled={true}
I0621 14:08:34.517492   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.517508   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: namePrefix={}
I0621 14:08:34.517528   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.517545   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: scheduleExpression={}
I0621 14:08:34.517563   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: tags={map[]}
I0621 14:08:34.517580   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).olds]: tagsAll={map[]}
I0621 14:08:34.517599   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: __defaults={[{eventBusName} {isEnabled}]}
I0621 14:08:34.517617   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.517634   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: eventBusName={default}
I0621 14:08:34.517651   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: eventPattern={{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}}
I0621 14:08:34.517665   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: isEnabled={true}
I0621 14:08:34.517679   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.517694   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.517361   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516005      25 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.517927   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516014      25 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.517956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516123      25 schema.go:881] Terraform output eventBusName = {default}
<{%reset%}>)
I0621 14:08:34.517986   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516136      25 schema.go:881] Terraform output __defaults = {[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:08:34.518008   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516144      25 schema.go:881] Terraform output description = {Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.518025   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516151      25 schema.go:881] Terraform output eventPattern = {{
<{%reset%}>)
I0621 14:08:34.518041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.518057   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.518076   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518091   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.518108   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.518123   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518139   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.518156   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.518174   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518189   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.518206   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.518220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.518237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.518252   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.518271   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.518285   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.518302   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:08:34.518317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516157      25 schema.go:881] Terraform output name = {pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.518337   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516163      25 schema.go:881] Terraform output roleArn = {arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.518362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516169      25 schema.go:881] Terraform output isEnabled = {true}
<{%reset%}>)
I0621 14:08:34.518382   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516187      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:08:34.518403   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516198      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.518448   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516234      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.518509   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516261      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: eventPattern={{
<{%reset%}>)
I0621 14:08:34.518527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.518544   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.518563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.518595   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.518612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.518644   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.518661   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.518676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.518692   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.518708   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.518725   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.518741   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.518758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.518772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.518789   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:08:34.518806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516277      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: isEnabled={true}
<{%reset%}>)
I0621 14:08:34.518825   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516288      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.518843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.516295      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).inputs]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.518868   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518153      25 provider.go:731] tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule) executing
<{%reset%}>)
I0621 14:08:34.518887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518200      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.518919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518215      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.518940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518290      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.518962   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518317      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
<{%reset%}>)
I0621 14:08:34.519013   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518327      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: id={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.519071   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518336      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: isEnabled={true}
<{%reset%}>)
I0621 14:08:34.519097   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518347      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.519115   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518374      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: namePrefix={}
<{%reset%}>)
I0621 14:08:34.519135   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518396      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.519151   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518408      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: scheduleExpression={}
<{%reset%}>)
I0621 14:08:34.519172   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518426      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: tags={map[]}
<{%reset%}>)
I0621 14:08:34.519193   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518437      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).olds]: tagsAll={map[]}
<{%reset%}>)
I0621 14:08:34.519216   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518492      25 schema.go:492] Created Terraform input: tags = map[]
<{%reset%}>)
I0621 14:08:34.519235   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518514      25 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:08:34.519253   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518522      25 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.519269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518563      25 schema.go:492] Created Terraform input: schedule_expression = 
<{%reset%}>)
I0621 14:08:34.519287   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518588      25 schema.go:492] Created Terraform input: id = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.519309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518597      25 schema.go:492] Created Terraform input: is_enabled = true
<{%reset%}>)
I0621 14:08:34.519327   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518606      25 schema.go:492] Created Terraform input: name_prefix = 
<{%reset%}>)
I0621 14:08:34.519344   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518617      25 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.519362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518637      25 schema.go:492] Created Terraform input: tags_all = map[]
<{%reset%}>)
I0621 14:08:34.519379   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518648      25 schema.go:492] Created Terraform input: arn = arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.519398   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518655      25 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:08:34.519416   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518669      25 schema.go:492] Created Terraform input: event_pattern = {"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}
<{%reset%}>)
I0621 14:08:34.519437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518676      25 schema.go:502] Terraform input tags = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.519452   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518684      25 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:08:34.519470   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518692      25 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.519486   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518703      25 schema.go:502] Terraform input schedule_expression = ""
<{%reset%}>)
I0621 14:08:34.519521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518710      25 schema.go:502] Terraform input id = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.519561   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518716      25 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:08:34.519581   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518722      25 schema.go:502] Terraform input name_prefix = ""
<{%reset%}>)
I0621 14:08:34.519598   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518728      25 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.519616   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518735      25 schema.go:502] Terraform input tags_all = map[string]interface {}{}
<{%reset%}>)
I0621 14:08:34.519639   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518741      25 schema.go:502] Terraform input arn = "arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.519660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518748      25 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:08:34.519678   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518756      25 schema.go:502] Terraform input event_pattern = "{\"detail\":{\"event\":[\"pullRequestCreated\",\"pullRequestUpdated\",\"pullRequestSourceBranchUpdated\"]},\"detail-type\":[\"CodeCommit Pull Request State Change\"],\"resources\":[\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"],\"source\":[\"aws.codecommit\"]}"
<{%reset%}>)
I0621 14:08:34.519697   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518833      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: __defaults={[{eventBusName} {isEnabled}]}
<{%reset%}>)
I0621 14:08:34.519714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518843      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: description={Trigger CodeBuild project on pull request events from CodeCommit}
<{%reset%}>)
I0621 14:08:34.519734   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518850      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.519753   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518857      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: eventPattern={{
<{%reset%}>)
I0621 14:08:34.519772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.519786   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.519803   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.519818   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.519836   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.519850   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.519867   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.519887   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.519905   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.519919   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.519936   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.519950   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.519967   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.519982   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.520000   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.520015   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.520031   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}}
<{%reset%}>)
I0621 14:08:34.520092   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518864      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: isEnabled={true}
<{%reset%}>)
I0621 14:08:34.520119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518872      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: name={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.520141   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518886      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule/aws_cloudwatch_event_rule).news]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
<{%reset%}>)
I0621 14:08:34.520159   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518910      25 schema.go:492] Created Terraform input: description = Trigger CodeBuild project on pull request events from CodeCommit
<{%reset%}>)
I0621 14:08:34.520179   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518920      25 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:08:34.520194   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518933      25 schema.go:492] Created Terraform input: event_pattern = {
<{%reset%}>)
I0621 14:08:34.520211   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"source": [
<{%reset%}>)
I0621 14:08:34.520225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "aws.codecommit"
<{%reset%}>)
I0621 14:08:34.520243   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.520258   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail-type": [
<{%reset%}>)
I0621 14:08:34.520277   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		  "CodeCommit Pull Request State Change"
<{%reset%}>)
I0621 14:08:34.520291   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.520309   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"resources": [
<{%reset%}>)
I0621 14:08:34.520324   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
<{%reset%}>)
I0621 14:08:34.520341   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		],
<{%reset%}>)
I0621 14:08:34.520355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		"detail": {
<{%reset%}>)
I0621 14:08:34.520372   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			"event": [
<{%reset%}>)
I0621 14:08:34.520388   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestCreated",
<{%reset%}>)
I0621 14:08:34.520406   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestUpdated",
<{%reset%}>)
I0621 14:08:34.520422   31957 log.go:80] eventSink::Infoerr(<{%reset%}>				"pullRequestSourceBranchUpdated"
<{%reset%}>)
I0621 14:08:34.520437   31957 log.go:80] eventSink::Infoerr(<{%reset%}>			]
<{%reset%}>)
I0621 14:08:34.520453   31957 log.go:80] eventSink::Infoerr(<{%reset%}>		}
<{%reset%}>)
I0621 14:08:34.520469   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	}
<{%reset%}>)
I0621 14:08:34.520485   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518947      25 schema.go:492] Created Terraform input: is_enabled = true
<{%reset%}>)
I0621 14:08:34.520504   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518953      25 schema.go:492] Created Terraform input: name = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.520521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518960      25 schema.go:492] Created Terraform input: role_arn = arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2
<{%reset%}>)
I0621 14:08:34.520540   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518967      25 schema.go:502] Terraform input is_enabled = true
<{%reset%}>)
I0621 14:08:34.520559   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518977      25 schema.go:502] Terraform input name = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.520577   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.518988      25 schema.go:502] Terraform input role_arn = "arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2"
<{%reset%}>)
I0621 14:08:34.520628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.519023      25 schema.go:502] Terraform input description = "Trigger CodeBuild project on pull request events from CodeCommit"
<{%reset%}>)
I0621 14:08:34.520665   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.519042      25 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:08:34.520694   31957 log.go:80] Provider[aws, 0xc000ef0500].Diff(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule,pull-request-Codebuild-event-rule) success: changes=1 #replaces=[] #stables=[eventBusName name namePrefix] delbefrepl=false, diffs=#[], detaileddiff=map[]
I0621 14:08:34.520718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.519053      25 schema.go:502] Terraform input event_pattern = "{\n\t\t\"source\": [\n\t\t  \"aws.codecommit\"\n\t\t],\n\t\t\"detail-type\": [\n\t\t  \"CodeCommit Pull Request State Change\"\n\t\t],\n\t\t\"resources\": [\n\t\t\t\"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2\"\n\t\t],\n\t\t\"detail\": {\n\t\t\t\"event\": [\n\t\t\t\t\"pullRequestCreated\",\n\t\t\t\t\"pullRequestUpdated\",\n\t\t\t\t\"pullRequestSourceBranchUpdated\"\n\t\t\t]\n\t\t}\n\t}"
<{%reset%}>)
I0621 14:08:34.520734   31957 log.go:80] Planner decided not to update 'urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule' after diff (same) (inputs=map[__defaults:{[{eventBusName} {isEnabled}]} description:{Trigger CodeBuild project on pull request events from CodeCommit} eventBusName:{default} eventPattern:{{
		"source": [
		  "aws.codecommit"
		],
		"detail-type": [
		  "CodeCommit Pull Request State Change"
		],
		"resources": [
			"arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"
		],
		"detail": {
			"event": [
				"pullRequestCreated",
				"pullRequestUpdated",
				"pullRequestSourceBranchUpdated"
			]
		}
	}} isEnabled:{true} name:{pull-request-Codebuild-event-rule} roleArn:{arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}])
I0621 14:08:34.520756   31957 log.go:80] Checking step same for urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:08:34.520776   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:34.520797   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:34.520818   31957 log.go:80] StepExecutor worker(8): launching oneshot worker
I0621 14:08:34.520910   31957 log.go:80] SnapshotManager: Beginning mutation for step `same` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule`
I0621 14:08:34.520933   31957 log.go:80] StepExecutor worker(8): applying step same on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule (preview false)
I0621 14:08:34.520994   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End(..., true)
I0621 14:08:34.521015   31957 log.go:80] Marked old state snapshot as done: urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:08:34.521031   31957 log.go:80] Appended new state snapshot to be written: urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:08:34.521060   31957 log.go:80] SnapshotManager: mustWrite() false
I0621 14:08:34.521074   31957 log.go:80] SnapshotManager: sameSnapshotMutation.End() eliding write
I0621 14:08:34.521090   31957 log.go:80] StepExecutor worker(8): step same on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule retired
I0621 14:08:34.521115   31957 log.go:80] stripping unknowns from RegisterResource response for urn urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule
I0621 14:08:34.521172   31957 log.go:80] ResourceMonitor.RegisterResource operation finished: t=aws:cloudwatch/eventRule:EventRule, urn=urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule, #outs=12
I0621 14:08:34.521195   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: arn={arn:aws:events:eu-west-1:103429827345:rule/pull-request-Codebuild-event-rule}
I0621 14:08:34.521211   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: description={Trigger CodeBuild project on pull request events from CodeCommit}
I0621 14:08:34.521228   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventBusName={default}
I0621 14:08:34.521245   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: eventPattern={{"detail":{"event":["pullRequestCreated","pullRequestUpdated","pullRequestSourceBranchUpdated"]},"detail-type":["CodeCommit Pull Request State Change"],"resources":["arn:aws:codecommit:eu-west-1:103429827345:my-repo-2"],"source":["aws.codecommit"]}}
I0621 14:08:34.521259   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: id={pull-request-Codebuild-event-rule}
I0621 14:08:34.521276   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: isEnabled={true}
I0621 14:08:34.521291   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: name={pull-request-Codebuild-event-rule}
I0621 14:08:34.521306   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: namePrefix={}
I0621 14:08:34.521321   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: roleArn={arn:aws:iam::103429827345:role/cloudWatchRole-4edbdf2}
I0621 14:08:34.521336   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: scheduleExpression={}
I0621 14:08:34.521352   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: tags={map[]}
I0621 14:08:34.521367   31957 log.go:80] Marshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventRule:EventRule,pull-request-event-rule)]: tagsAll={map[]}
I0621 14:08:34.522219   31957 log.go:80] parseProviderRequest(aws): semver version is the empty string
I0621 14:08:34.522265   31957 log.go:80] handling default provider request for package aws
I0621 14:08:34.522287   31957 log.go:80] checking if providers.ProviderRequest{version:(*semver.Version)(nil), pkg:"aws", pluginDownloadURL:""} should be denied
I0621 14:08:34.522301   31957 log.go:80] Did not find a config for 'pulumi'
I0621 14:08:34.522342   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.522365   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: account={$.account}
I0621 14:08:34.522379   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: destinationCommit={$.detail.destinationCommit}
I0621 14:08:34.522507   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: id={$.id}
I0621 14:08:34.522528   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: pullRequestId={$.detail.pullRequestId}
I0621 14:08:34.522542   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: region={$.region}
I0621 14:08:34.522556   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:08:34.522570   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: revisionId={$.detail.revisionId}
I0621 14:08:34.522583   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceCommit={$.detail.sourceCommit}
I0621 14:08:34.522597   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceReference={$.detail.sourceReference}
I0621 14:08:34.522613   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: sourceVersion={$.detail.sourceCommit}
I0621 14:08:34.522657   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:08:34.522678   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:08:34.522715   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:08:34.522740   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.522756   31957 log.go:80] Unmarshaling property for RPC[ResourceMonitor.RegisterResource(aws:cloudwatch/eventTarget:EventTarget,codebuild-trigger)]: rule={pull-request-Codebuild-event-rule}
I0621 14:08:34.522880   31957 log.go:80] ResourceMonitor.RegisterResource received: t=aws:cloudwatch/eventTarget:EventTarget, name=codebuild-trigger, custom=true, #props=4, parent=urn:pulumi:sandbox::pulumi-trigger::pulumi:pulumi:Stack::pulumi-trigger-sandbox, protect=false, provider=urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177, deps=[urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventRule:EventRule::pull-request-event-rule urn:pulumi:sandbox::pulumi-trigger::aws:codebuild/project:Project::my-codebuild], deleteBeforeReplace=<nil>, ignoreChanges=[], aliases=[], customTimeouts=, providers=map[], replaceOnChanges=[], retainOnDelete=false, deletedWith=
I0621 14:08:34.522957   31957 log.go:80] EvalSourceIterator produced a registration: t=aws:cloudwatch/eventTarget:EventTarget,name=codebuild-trigger,#props=4
I0621 14:08:34.523013   31957 log.go:80] deploymentExecutor.Execute(...): incoming event (nil? false, <nil>)
I0621 14:08:34.523032   31957 log.go:80] deploymentExecutor.handleSingleEvent(...): received RegisterResourceEvent
I0621 14:08:34.523059   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.523091   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) executing (#olds=0,#news=4)
I0621 14:08:34.523115   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.523152   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:08:34.523178   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:08:34.523200   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: account={$.account}
I0621 14:08:34.523218   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: destinationCommit={$.detail.destinationCommit}
I0621 14:08:34.523234   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: id={$.id}
I0621 14:08:34.523251   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: pullRequestId={$.detail.pullRequestId}
I0621 14:08:34.523265   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: region={$.region}
I0621 14:08:34.523279   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:08:34.523295   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: revisionId={$.detail.revisionId}
I0621 14:08:34.523309   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceCommit={$.detail.sourceCommit}
I0621 14:08:34.523323   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceReference={$.detail.sourceReference}
I0621 14:08:34.523340   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: sourceVersion={$.detail.sourceCommit}
I0621 14:08:34.523358   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:08:34.523413   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.523433   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).news]: rule={pull-request-Codebuild-event-rule}
I0621 14:08:34.524129   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524029      25 provider.go:663] tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target) executing
<{%reset%}>)
I0621 14:08:34.524172   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524055      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.524201   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524068      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: account={$.account}
<{%reset%}>)
I0621 14:08:34.524223   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524085      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:08:34.524242   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524093      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: id={$.id}
<{%reset%}>)
I0621 14:08:34.524265   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524118      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:08:34.524300   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524127      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: region={$.region}
<{%reset%}>)
I0621 14:08:34.524329   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524134      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:08:34.524352   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524141      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:08:34.524368   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524148      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.524389   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524155      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:08:34.524413   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524163      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.524441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524204      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputPaths={map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:08:34.524464   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524216      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.524488   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.524512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.524550   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.524570   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.524589   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.524604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.524624   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.524641   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.524659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.524674   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:08:34.524712   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524251      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTransformer={map[inputPaths:{map[account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.524732   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.524751   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.524772   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.524790   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.524806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.524822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.524839   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.524856   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.524871   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.524915   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:08:34.524935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524261      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.524956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524273      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.524974   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524290      25 schema.go:492] Created Terraform input: rule = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.525001   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524309      25 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.525026   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524351      25 schema.go:492] Created Terraform input: id = $.id
<{%reset%}>)
I0621 14:08:34.525072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524358      25 schema.go:492] Created Terraform input: repositoryName = $.detail.repositoryNames[0]
<{%reset%}>)
I0621 14:08:34.525118   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524364      25 schema.go:492] Created Terraform input: revisionId = $.detail.revisionId
<{%reset%}>)
I0621 14:08:34.525155   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524370      25 schema.go:492] Created Terraform input: sourceReference = $.detail.sourceReference
<{%reset%}>)
I0621 14:08:34.525207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524376      25 schema.go:492] Created Terraform input: account = $.account
<{%reset%}>)
I0621 14:08:34.525237   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524381      25 schema.go:492] Created Terraform input: pullRequestId = $.detail.pullRequestId
<{%reset%}>)
I0621 14:08:34.525257   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524387      25 schema.go:492] Created Terraform input: region = $.region
<{%reset%}>)
I0621 14:08:34.525275   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524393      25 schema.go:492] Created Terraform input: sourceCommit = $.detail.sourceCommit
<{%reset%}>)
I0621 14:08:34.525294   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524405      25 schema.go:492] Created Terraform input: sourceVersion = $.detail.sourceCommit
<{%reset%}>)
I0621 14:08:34.525313   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524411      25 schema.go:492] Created Terraform input: destinationCommit = $.detail.destinationCommit
<{%reset%}>)
I0621 14:08:34.525331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524420      25 schema.go:502] Terraform input sourceReference = "$.detail.sourceReference"
<{%reset%}>)
I0621 14:08:34.525355   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524427      25 schema.go:502] Terraform input pullRequestId = "$.detail.pullRequestId"
<{%reset%}>)
I0621 14:08:34.525373   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524433      25 schema.go:502] Terraform input sourceVersion = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:08:34.525390   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524439      25 schema.go:502] Terraform input destinationCommit = "$.detail.destinationCommit"
<{%reset%}>)
I0621 14:08:34.525412   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524446      25 schema.go:502] Terraform input id = "$.id"
<{%reset%}>)
I0621 14:08:34.525439   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524451      25 schema.go:502] Terraform input revisionId = "$.detail.revisionId"
<{%reset%}>)
I0621 14:08:34.525463   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524458      25 schema.go:502] Terraform input account = "$.account"
<{%reset%}>)
I0621 14:08:34.525486   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524464      25 schema.go:502] Terraform input region = "$.region"
<{%reset%}>)
I0621 14:08:34.525506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524470      25 schema.go:502] Terraform input sourceCommit = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:08:34.525522   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524500      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:34.525539   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524509      25 schema.go:502] Terraform input repositoryName = "$.detail.repositoryNames[0]"
<{%reset%}>)
I0621 14:08:34.525575   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524524      25 schema.go:492] Created Terraform input: input_paths = map[__defaults:[] account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit]
<{%reset%}>)
I0621 14:08:34.525629   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524557      25 schema.go:492] Created Terraform input: input_template = {"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.525655   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.525672   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.525714   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.525758   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.525792   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.525822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.525861   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.525904   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.525924   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.525940   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }
<{%reset%}>)
I0621 14:08:34.525961   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524568      25 schema.go:502] Terraform input input_template = "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"
<{%reset%}>)
I0621 14:08:34.525980   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524585      25 schema.go:502] Terraform input __defaults = []interface {}{}
<{%reset%}>)
I0621 14:08:34.526005   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524592      25 schema.go:502] Terraform input input_paths = map[string]interface {}{"__defaults":[]interface {}{}, "account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}
<{%reset%}>)
I0621 14:08:34.526028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524610      25 schema.go:492] Created Terraform input: input_transformer = [map[__defaults:[] input_paths:map[__defaults:[] account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit] input_template:{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.526049   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.525876   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[{eventBusName} {targetId}]}
I0621 14:08:34.526095   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.526121   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: eventBusName={default}
I0621 14:08:34.526153   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:08:34.526065   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.526207   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.526232   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.526249   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.526269   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.526284   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.526299   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.526315   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.526331   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }]]
<{%reset%}>)
I0621 14:08:34.526348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524635      25 schema.go:492] Created Terraform input: role_arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.526366   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524665      25 schema.go:671] Created Terraform input: target_id = codebuild-trigger-bcb0dee (from func)
<{%reset%}>)
I0621 14:08:34.526387   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524685      25 schema.go:756] Created Terraform input: event_bus_name = default (from Terraform schema)
<{%reset%}>)
I0621 14:08:34.526410   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524696      25 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.526441   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524703      25 schema.go:502] Terraform input input_transformer = []interface {}{map[string]interface {}{"__defaults":[]interface {}{}, "input_paths":map[string]interface {}{"__defaults":[]interface {}{}, "account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}, "input_template":"{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"}}
<{%reset%}>)
I0621 14:08:34.526465   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524746      25 schema.go:502] Terraform input role_arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.526483   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524754      25 schema.go:502] Terraform input target_id = "codebuild-trigger-bcb0dee"
<{%reset%}>)
I0621 14:08:34.526501   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524760      25 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:08:34.526516   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524766      25 schema.go:502] Terraform input __defaults = []interface {}{"eventBusName", "targetId"}
<{%reset%}>)
I0621 14:08:34.526532   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524774      25 schema.go:502] Terraform input rule = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.526547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524956      25 schema.go:881] Terraform output sourceVersion = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.526563   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524972      25 schema.go:881] Terraform output destinationCommit = {$.detail.destinationCommit}
<{%reset%}>)
I0621 14:08:34.526578   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524979      25 schema.go:881] Terraform output pullRequestId = {$.detail.pullRequestId}
<{%reset%}>)
I0621 14:08:34.526612   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524985      25 schema.go:881] Terraform output sourceCommit = {$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.526628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.524996      25 schema.go:881] Terraform output repositoryName = {$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:08:34.526643   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525003      25 schema.go:881] Terraform output id = {$.id}
<{%reset%}>)
I0621 14:08:34.526659   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525009      25 schema.go:881] Terraform output revisionId = {$.detail.revisionId}
<{%reset%}>)
I0621 14:08:34.526681   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525015      25 schema.go:881] Terraform output account = {$.account}
<{%reset%}>)
I0621 14:08:34.526702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525021      25 schema.go:881] Terraform output sourceReference = {$.detail.sourceReference}
<{%reset%}>)
I0621 14:08:34.526720   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525043      25 schema.go:881] Terraform output region = {$.region}
<{%reset%}>)
I0621 14:08:34.526176   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:08:34.526771   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: account={$.account}
I0621 14:08:34.526743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525049      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:34.526793   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: destinationCommit={$.detail.destinationCommit}
I0621 14:08:34.526835   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: id={$.id}
I0621 14:08:34.526851   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: pullRequestId={$.detail.pullRequestId}
I0621 14:08:34.526865   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: region={$.region}
I0621 14:08:34.526879   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:08:34.526893   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: revisionId={$.detail.revisionId}
I0621 14:08:34.526908   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceCommit={$.detail.sourceCommit}
I0621 14:08:34.526924   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceReference={$.detail.sourceReference}
I0621 14:08:34.526938   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceVersion={$.detail.sourceCommit}
I0621 14:08:34.526985   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:08:34.527007   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:08:34.527057   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:08:34.527079   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.527095   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: rule={pull-request-Codebuild-event-rule}
I0621 14:08:34.527109   31957 log.go:80] Unmarshaling property for RPC[Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: targetId={codebuild-trigger-bcb0dee}
I0621 14:08:34.527127   31957 log.go:80] Provider[aws, 0xc000ef0500].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) success: inputs=#7 failures=#0
I0621 14:08:34.527173   31957 log.go:80] Planner decided to create 'urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger' (inputs=map[__defaults:{[{eventBusName} {targetId}]} arn:{arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild} eventBusName:{default} inputTransformer:{map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]} roleArn:{arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild} rule:{pull-request-Codebuild-event-rule} targetId:{codebuild-trigger-bcb0dee}])
I0621 14:08:34.527197   31957 log.go:80] Checking step create for urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger
I0621 14:08:34.527220   31957 log.go:80] StepExecutor worker(-2): worker received chain for execution
I0621 14:08:34.527255   31957 log.go:80] StepExecutor worker(-2): worker waiting for incoming chains
I0621 14:08:34.526834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525077      25 schema.go:881] Terraform output inputPaths = {map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:08:34.527283   31957 log.go:80] StepExecutor worker(9): launching oneshot worker
I0621 14:08:34.527393   31957 log.go:80] SnapshotManager: Beginning mutation for step `create` on resource `urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger`
I0621 14:08:34.527415   31957 log.go:80] SnapshotManager.doCreate(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger)
I0621 14:08:34.527434   31957 log.go:80] SnapshotManager.markPendingOperation(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger, creating)
I0621 14:08:34.527307   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525101      25 schema.go:881] Terraform output inputTemplate = {{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.527888   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.527920   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.527939   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.527957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.527975   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.527993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.528011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.528028   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.528044   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.528061   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:08:34.528083   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525133      25 schema.go:881] Terraform output __defaults = {[]}
<{%reset%}>)
I0621 14:08:34.528103   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525160      25 schema.go:881] Terraform output rule = {pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.528119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525174      25 schema.go:881] Terraform output arn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.528142   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525185      25 schema.go:881] Terraform output inputTransformer = {map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.528163   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.528186   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.528204   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.528222   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.528238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.528256   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.528270   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.528288   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.528302   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.528321   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:08:34.528336   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525216      25 schema.go:881] Terraform output roleArn = {arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.528356   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525224      25 schema.go:881] Terraform output targetId = {codebuild-trigger-bcb0dee}
<{%reset%}>)
I0621 14:08:34.528378   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525230      25 schema.go:881] Terraform output eventBusName = {default}
<{%reset%}>)
I0621 14:08:34.528396   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525243      25 schema.go:881] Terraform output __defaults = {[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:08:34.528432   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525271      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:08:34.528464   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525288      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.528484   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525296      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.528506   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525320      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.528529   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.528547   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.528565   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.528580   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.528599   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.528614   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.528631   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.528646   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.528663   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.528679   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:08:34.528702   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525336      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.528722   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525352      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:08:34.528749   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525361      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.528767   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525368      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: account={$.account}
<{%reset%}>)
I0621 14:08:34.528788   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525375      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:08:34.528805   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525382      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: id={$.id}
<{%reset%}>)
I0621 14:08:34.528834   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525389      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:08:34.528854   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525403      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: region={$.region}
<{%reset%}>)
I0621 14:08:34.528875   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525416      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:08:34.528893   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525424      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:08:34.528912   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525431      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.528930   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525439      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:08:34.528957   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525450      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.528995   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525464      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.529023   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.529041   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.529066   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.529083   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.529099   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.529116   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.529134   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.529149   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.529168   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.529185   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:08:34.529203   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525472      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.529220   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525485      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.529238   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.525496      25 log.go:75] Marshaling property for RPC[tf.Provider[aws].Check(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).inputs]: targetId={codebuild-trigger-bcb0dee}
<{%reset%}>)
I0621 14:08:34.793486   31957 log.go:80] StepExecutor worker(9): applying step create on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger (preview false)
I0621 14:08:34.793579   31957 log.go:80] GetProvider(urn:pulumi:sandbox::pulumi-trigger::pulumi:providers:aws::default::c83b66f5-de02-42d0-a6eb-d3dd96164177)
I0621 14:08:34.793619   31957 log.go:80] Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) executing (#props=7)
I0621 14:08:34.793660   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[{eventBusName} {targetId}]}
I0621 14:08:34.793682   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.793699   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: eventBusName={default}
I0621 14:08:34.793799   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}]}
I0621 14:08:34.793836   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:08:34.793971   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
I0621 14:08:34.794001   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: __defaults={[]}
I0621 14:08:34.794020   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: account={$.account}
I0621 14:08:34.794035   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: destinationCommit={$.detail.destinationCommit}
I0621 14:08:34.794051   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: id={$.id}
I0621 14:08:34.794066   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: pullRequestId={$.detail.pullRequestId}
I0621 14:08:34.794081   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: region={$.region}
I0621 14:08:34.794096   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: repositoryName={$.detail.repositoryNames[0]}
I0621 14:08:34.794110   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: revisionId={$.detail.revisionId}
I0621 14:08:34.794131   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceCommit={$.detail.sourceCommit}
I0621 14:08:34.794157   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceReference={$.detail.sourceReference}
I0621 14:08:34.794184   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: sourceVersion={$.detail.sourceCommit}
I0621 14:08:34.794212   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: inputTemplate={{"environmentVariablesOverride": [
	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
	{"name":"region","type":"PLAINTEXT","value":<region>},
	{"name":"account","type":"PLAINTEXT","value":<account>},
	{"name":"id","type":"PLAINTEXT","value":<id>}]
  }}
I0621 14:08:34.794230   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
I0621 14:08:34.794260   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: rule={pull-request-Codebuild-event-rule}
I0621 14:08:34.794288   31957 log.go:80] Marshaling property for RPC[Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger).inputs]: targetId={codebuild-trigger-bcb0dee}
I0621 14:08:34.795317   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795135      25 provider.go:831] tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target) executing
<{%reset%}>)
I0621 14:08:34.795417   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795237      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[{eventBusName} {targetId}]}
<{%reset%}>)
I0621 14:08:34.795449   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795312      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: arn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.795487   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795329      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: eventBusName={default}
<{%reset%}>)
I0621 14:08:34.795527   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795343      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.795548   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795355      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: __defaults={[]}
<{%reset%}>)
I0621 14:08:34.795572   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795406      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: account={$.account}
<{%reset%}>)
I0621 14:08:34.795593   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795430      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: destinationCommit={$.detail.destinationCommit}
<{%reset%}>)
I0621 14:08:34.795615   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795444      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: id={$.id}
<{%reset%}>)
I0621 14:08:34.795635   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795457      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: pullRequestId={$.detail.pullRequestId}
<{%reset%}>)
I0621 14:08:34.795660   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795466      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: region={$.region}
<{%reset%}>)
I0621 14:08:34.795686   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795483      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: repositoryName={$.detail.repositoryNames[0]}
<{%reset%}>)
I0621 14:08:34.795705   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795492      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: revisionId={$.detail.revisionId}
<{%reset%}>)
I0621 14:08:34.795726   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795499      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceCommit={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.795744   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795508      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceReference={$.detail.sourceReference}
<{%reset%}>)
I0621 14:08:34.795766   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795515      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: sourceVersion={$.detail.sourceCommit}
<{%reset%}>)
I0621 14:08:34.795787   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795557      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputPaths={map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]}
<{%reset%}>)
I0621 14:08:34.795822   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795567      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTemplate={{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.795843   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.795866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.795886   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.795910   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.795935   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.795977   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.796011   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.796072   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.796119   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.796141   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}
<{%reset%}>)
I0621 14:08:34.796194   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795601      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: inputTransformer={map[__defaults:{[]} inputPaths:{map[__defaults:{[]} account:{$.account} destinationCommit:{$.detail.destinationCommit} id:{$.id} pullRequestId:{$.detail.pullRequestId} region:{$.region} repositoryName:{$.detail.repositoryNames[0]} revisionId:{$.detail.revisionId} sourceCommit:{$.detail.sourceCommit} sourceReference:{$.detail.sourceReference} sourceVersion:{$.detail.sourceCommit}]} inputTemplate:{{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.796225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.796279   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.796342   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.796407   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.796473   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.796531   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.796579   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.796657   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.796783   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.796853   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }}]}
<{%reset%}>)
I0621 14:08:34.796923   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795615      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: roleArn={arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild}
<{%reset%}>)
I0621 14:08:34.796996   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795624      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: rule={pull-request-Codebuild-event-rule}
<{%reset%}>)
I0621 14:08:34.797131   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795631      25 log.go:75] Unmarshaling property for RPC[tf.Provider[aws].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger/aws_cloudwatch_event_target).news]: targetId={codebuild-trigger-bcb0dee}
<{%reset%}>)
I0621 14:08:34.797204   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795762      25 schema.go:492] Created Terraform input: account = $.account
<{%reset%}>)
I0621 14:08:34.797273   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795772      25 schema.go:492] Created Terraform input: sourceReference = $.detail.sourceReference
<{%reset%}>)
I0621 14:08:34.797348   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795778      25 schema.go:492] Created Terraform input: region = $.region
<{%reset%}>)
I0621 14:08:34.797423   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795785      25 schema.go:492] Created Terraform input: repositoryName = $.detail.repositoryNames[0]
<{%reset%}>)
I0621 14:08:34.797521   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795791      25 schema.go:492] Created Terraform input: revisionId = $.detail.revisionId
<{%reset%}>)
I0621 14:08:34.797571   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795798      25 schema.go:492] Created Terraform input: sourceCommit = $.detail.sourceCommit
<{%reset%}>)
I0621 14:08:34.797590   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795804      25 schema.go:492] Created Terraform input: destinationCommit = $.detail.destinationCommit
<{%reset%}>)
I0621 14:08:34.797619   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795812      25 schema.go:492] Created Terraform input: id = $.id
<{%reset%}>)
I0621 14:08:34.797638   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795832      25 schema.go:492] Created Terraform input: pullRequestId = $.detail.pullRequestId
<{%reset%}>)
I0621 14:08:34.797658   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795841      25 schema.go:492] Created Terraform input: sourceVersion = $.detail.sourceCommit
<{%reset%}>)
I0621 14:08:34.797676   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795849      25 schema.go:502] Terraform input account = "$.account"
<{%reset%}>)
I0621 14:08:34.797698   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795858      25 schema.go:502] Terraform input repositoryName = "$.detail.repositoryNames[0]"
<{%reset%}>)
I0621 14:08:34.797718   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795866      25 schema.go:502] Terraform input sourceCommit = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:08:34.797743   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795873      25 schema.go:502] Terraform input id = "$.id"
<{%reset%}>)
I0621 14:08:34.797760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795880      25 schema.go:502] Terraform input sourceReference = "$.detail.sourceReference"
<{%reset%}>)
I0621 14:08:34.797785   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795887      25 schema.go:502] Terraform input region = "$.region"
<{%reset%}>)
I0621 14:08:34.797806   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795893      25 schema.go:502] Terraform input revisionId = "$.detail.revisionId"
<{%reset%}>)
I0621 14:08:34.797827   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795900      25 schema.go:502] Terraform input destinationCommit = "$.detail.destinationCommit"
<{%reset%}>)
I0621 14:08:34.797846   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795907      25 schema.go:502] Terraform input pullRequestId = "$.detail.pullRequestId"
<{%reset%}>)
I0621 14:08:34.797866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795914      25 schema.go:502] Terraform input sourceVersion = "$.detail.sourceCommit"
<{%reset%}>)
I0621 14:08:34.797896   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795923      25 schema.go:492] Created Terraform input: input_paths = map[account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit]
<{%reset%}>)
I0621 14:08:34.797926   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.795982      25 schema.go:492] Created Terraform input: input_template = {"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.797956   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.798016   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.798084   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.798195   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.798362   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.798404   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.798450   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.798512   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.798604   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.798628   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }
<{%reset%}>)
I0621 14:08:34.798690   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796003      25 schema.go:502] Terraform input input_paths = map[string]interface {}{"account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}
<{%reset%}>)
I0621 14:08:34.798760   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796039      25 schema.go:502] Terraform input input_template = "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"
<{%reset%}>)
I0621 14:08:34.798803   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796105      25 schema.go:492] Created Terraform input: input_transformer = [map[input_paths:map[account:$.account destinationCommit:$.detail.destinationCommit id:$.id pullRequestId:$.detail.pullRequestId region:$.region repositoryName:$.detail.repositoryNames[0] revisionId:$.detail.revisionId sourceCommit:$.detail.sourceCommit sourceReference:$.detail.sourceReference sourceVersion:$.detail.sourceCommit] input_template:{"environmentVariablesOverride": [
<{%reset%}>)
I0621 14:08:34.798828   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"pullRequestId","type":"PLAINTEXT","value":<pullRequestId>},
<{%reset%}>)
I0621 14:08:34.798849   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceCommit","type":"PLAINTEXT","value":<sourceCommit>},
<{%reset%}>)
I0621 14:08:34.798866   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"destinationCommit","type":"PLAINTEXT","value":<destinationCommit>},
<{%reset%}>)
I0621 14:08:34.798883   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"repositoryName","type":"PLAINTEXT","value":<repositoryName>},
<{%reset%}>)
I0621 14:08:34.798899   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"revisionId","type":"PLAINTEXT","value":<revisionId>},
<{%reset%}>)
I0621 14:08:34.798922   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"sourceReference","type":"PLAINTEXT","value":<sourceReference>},
<{%reset%}>)
I0621 14:08:34.798944   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"region","type":"PLAINTEXT","value":<region>},
<{%reset%}>)
I0621 14:08:34.798968   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"account","type":"PLAINTEXT","value":<account>},
<{%reset%}>)
I0621 14:08:34.798993   31957 log.go:80] eventSink::Infoerr(<{%reset%}>	{"name":"id","type":"PLAINTEXT","value":<id>}]
<{%reset%}>)
I0621 14:08:34.799021   31957 log.go:80] eventSink::Infoerr(<{%reset%}>  }]]
<{%reset%}>)
I0621 14:08:34.799048   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796195      25 schema.go:492] Created Terraform input: role_arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.799068   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796229      25 schema.go:492] Created Terraform input: rule = pull-request-Codebuild-event-rule
<{%reset%}>)
I0621 14:08:34.799088   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796258      25 schema.go:492] Created Terraform input: target_id = codebuild-trigger-bcb0dee
<{%reset%}>)
I0621 14:08:34.799107   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796378      25 schema.go:492] Created Terraform input: arn = arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild
<{%reset%}>)
I0621 14:08:34.799124   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796425      25 schema.go:492] Created Terraform input: event_bus_name = default
<{%reset%}>)
I0621 14:08:34.799141   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796455      25 schema.go:502] Terraform input event_bus_name = "default"
<{%reset%}>)
I0621 14:08:34.799187   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796476      25 schema.go:502] Terraform input input_transformer = []interface {}{map[string]interface {}{"input_paths":map[string]interface {}{"account":"$.account", "destinationCommit":"$.detail.destinationCommit", "id":"$.id", "pullRequestId":"$.detail.pullRequestId", "region":"$.region", "repositoryName":"$.detail.repositoryNames[0]", "revisionId":"$.detail.revisionId", "sourceCommit":"$.detail.sourceCommit", "sourceReference":"$.detail.sourceReference", "sourceVersion":"$.detail.sourceCommit"}, "input_template":"{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"}}
<{%reset%}>)
I0621 14:08:34.799225   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796550      25 schema.go:502] Terraform input role_arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.799247   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796565      25 schema.go:502] Terraform input rule = "pull-request-Codebuild-event-rule"
<{%reset%}>)
I0621 14:08:34.799267   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796574      25 schema.go:502] Terraform input target_id = "codebuild-trigger-bcb0dee"
<{%reset%}>)
I0621 14:08:34.799284   31957 log.go:80] eventSink::Infoerr(<{%reset%}>I0621 14:08:34.796583      25 schema.go:502] Terraform input arn = "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
<{%reset%}>)
I0621 14:08:34.808550   31957 log.go:80] Creating EventBridge Target: {
I0621 14:08:34.808608   31957 log.go:80] eventSink::Debug(<{%reset%}>Creating EventBridge Target: {<{%reset%}>)
I0621 14:08:34.809333   31957 log.go:80]   EventBusName: "default",
I0621 14:08:34.809394   31957 log.go:80] eventSink::Debug(<{%reset%}>  EventBusName: "default",<{%reset%}>)
I0621 14:08:34.810107   31957 log.go:80]   Rule: "pull-request-Codebuild-event-rule",
I0621 14:08:34.810170   31957 log.go:80] eventSink::Debug(<{%reset%}>  Rule: "pull-request-Codebuild-event-rule",<{%reset%}>)
I0621 14:08:34.810653   31957 log.go:80]   Targets: [{
I0621 14:08:34.810700   31957 log.go:80] eventSink::Debug(<{%reset%}>  Targets: [{<{%reset%}>)
I0621 14:08:34.811397   31957 log.go:80]       Arn: "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild",
I0621 14:08:34.811469   31957 log.go:80] eventSink::Debug(<{%reset%}>      Arn: "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild",<{%reset%}>)
I0621 14:08:34.812403   31957 log.go:80]       Id: "codebuild-trigger-bcb0dee",
I0621 14:08:34.812447   31957 log.go:80] eventSink::Debug(<{%reset%}>      Id: "codebuild-trigger-bcb0dee",<{%reset%}>)
I0621 14:08:34.812930   31957 log.go:80]       InputTransformer: {
I0621 14:08:34.812974   31957 log.go:80] eventSink::Debug(<{%reset%}>      InputTransformer: {<{%reset%}>)
I0621 14:08:34.863740   31957 log.go:80]         InputPathsMap: {
I0621 14:08:34.863865   31957 log.go:80] eventSink::Debug(<{%reset%}>        InputPathsMap: {<{%reset%}>)
I0621 14:08:34.865611   31957 log.go:80]           revisionId: "$.detail.revisionId",
I0621 14:08:34.865666   31957 log.go:80] eventSink::Debug(<{%reset%}>          revisionId: "$.detail.revisionId",<{%reset%}>)
I0621 14:08:34.866279   31957 log.go:80]           region: "$.region",
I0621 14:08:34.866332   31957 log.go:80] eventSink::Debug(<{%reset%}>          region: "$.region",<{%reset%}>)
I0621 14:08:34.867100   31957 log.go:80]           pullRequestId: "$.detail.pullRequestId",
I0621 14:08:34.867153   31957 log.go:80] eventSink::Debug(<{%reset%}>          pullRequestId: "$.detail.pullRequestId",<{%reset%}>)
I0621 14:08:34.867622   31957 log.go:80]           repositoryName: "$.detail.repositoryNames[0]",
I0621 14:08:34.867682   31957 log.go:80] eventSink::Debug(<{%reset%}>          repositoryName: "$.detail.repositoryNames[0]",<{%reset%}>)
I0621 14:08:34.868339   31957 log.go:80]           id: "$.id",
I0621 14:08:34.868380   31957 log.go:80] eventSink::Debug(<{%reset%}>          id: "$.id",<{%reset%}>)
I0621 14:08:34.869369   31957 log.go:80]           sourceReference: "$.detail.sourceReference",
I0621 14:08:34.869409   31957 log.go:80] eventSink::Debug(<{%reset%}>          sourceReference: "$.detail.sourceReference",<{%reset%}>)
I0621 14:08:34.869985   31957 log.go:80]           account: "$.account",
I0621 14:08:34.870021   31957 log.go:80] eventSink::Debug(<{%reset%}>          account: "$.account",<{%reset%}>)
I0621 14:08:34.870924   31957 log.go:80]           destinationCommit: "$.detail.destinationCommit",
I0621 14:08:34.870967   31957 log.go:80] eventSink::Debug(<{%reset%}>          destinationCommit: "$.detail.destinationCommit",<{%reset%}>)
I0621 14:08:34.871718   31957 log.go:80]           sourceCommit: "$.detail.sourceCommit",
I0621 14:08:34.871772   31957 log.go:80] eventSink::Debug(<{%reset%}>          sourceCommit: "$.detail.sourceCommit",<{%reset%}>)
I0621 14:08:34.872368   31957 log.go:80]           sourceVersion: "$.detail.sourceCommit"
I0621 14:08:34.872404   31957 log.go:80] eventSink::Debug(<{%reset%}>          sourceVersion: "$.detail.sourceCommit"<{%reset%}>)
I0621 14:08:34.872983   31957 log.go:80]         },
I0621 14:08:34.873018   31957 log.go:80] eventSink::Debug(<{%reset%}>        },<{%reset%}>)
I0621 14:08:34.873512   31957 log.go:80]         InputTemplate: "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"
I0621 14:08:34.873556   31957 log.go:80] eventSink::Debug(<{%reset%}>        InputTemplate: "{\"environmentVariablesOverride\": [\n\t{\"name\":\"pullRequestId\",\"type\":\"PLAINTEXT\",\"value\":<pullRequestId>},\n\t{\"name\":\"sourceCommit\",\"type\":\"PLAINTEXT\",\"value\":<sourceCommit>},\n\t{\"name\":\"destinationCommit\",\"type\":\"PLAINTEXT\",\"value\":<destinationCommit>},\n\t{\"name\":\"repositoryName\",\"type\":\"PLAINTEXT\",\"value\":<repositoryName>},\n\t{\"name\":\"revisionId\",\"type\":\"PLAINTEXT\",\"value\":<revisionId>},\n\t{\"name\":\"sourceReference\",\"type\":\"PLAINTEXT\",\"value\":<sourceReference>},\n\t{\"name\":\"region\",\"type\":\"PLAINTEXT\",\"value\":<region>},\n\t{\"name\":\"account\",\"type\":\"PLAINTEXT\",\"value\":<account>},\n\t{\"name\":\"id\",\"type\":\"PLAINTEXT\",\"value\":<id>}]\n  }"<{%reset%}>)
I0621 14:08:34.874206   31957 log.go:80]       },
I0621 14:08:34.874255   31957 log.go:80] eventSink::Debug(<{%reset%}>      },<{%reset%}>)
I0621 14:08:34.874837   31957 log.go:80]       RoleArn: "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"
I0621 14:08:34.874878   31957 log.go:80] eventSink::Debug(<{%reset%}>      RoleArn: "arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild"<{%reset%}>)
I0621 14:08:34.875581   31957 log.go:80]     }]
I0621 14:08:34.875634   31957 log.go:80] eventSink::Debug(<{%reset%}>    }]<{%reset%}>)
I0621 14:08:34.876214   31957 log.go:80] }
I0621 14:08:34.876303   31957 log.go:80] eventSink::Debug(<{%reset%}>}<{%reset%}>)
I0621 14:08:35.045447   31957 log.go:80] provider received rpc error `Unknown`: `1 error occurred:
	* creating EventBridge Target (pull-request-Codebuild-event-rule-codebuild-trigger-bcb0dee): ValidationException: Parameter arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild is not valid. Reason: Provided Arn is not in correct format.
	status code: 400, request id: ec4eeb29-2bc4-450d-a861-74e92316f70a

`
I0621 14:08:35.045588   31957 log.go:80] rpc error kind `Unknown` may not be recoverable
I0621 14:08:35.045626   31957 log.go:80] Provider[aws, 0xc000ef0500].Create(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger) failed: 1 error occurred:
	* creating EventBridge Target (pull-request-Codebuild-event-rule-codebuild-trigger-bcb0dee): ValidationException: Parameter arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild is not valid. Reason: Provided Arn is not in correct format.
	status code: 400, request id: ec4eeb29-2bc4-450d-a861-74e92316f70a

I0621 14:08:35.045658   31957 log.go:80] eventSink::Error(<{%reset%}>1 error occurred:
	* creating EventBridge Target (pull-request-Codebuild-event-rule-codebuild-trigger-bcb0dee): ValidationException: Parameter arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild is not valid. Reason: Provided Arn is not in correct format.
	status code: 400, request id: ec4eeb29-2bc4-450d-a861-74e92316f70a

<{%reset%}>)
I0621 14:08:35.045726   31957 log.go:80] SnapshotManager: createSnapshotMutation.End(..., false)
I0621 14:08:35.045749   31957 log.go:80] SnapshotManager.markOperationComplete(urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger)
I0621 14:08:35.297274   31957 log.go:80] StepExecutor worker(9): step create on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger failed with an error: 1 error occurred:
	* creating EventBridge Target (pull-request-Codebuild-event-rule-codebuild-trigger-bcb0dee): ValidationException: Parameter arn:aws:codebuild:eu-west-1:103429827345:project/my-codebuild is not valid. Reason: Provided Arn is not in correct format.
	status code: 400, request id: ec4eeb29-2bc4-450d-a861-74e92316f70a

I0621 14:08:35.297337   31957 log.go:80] StepExecutor worker(9): step create on urn:pulumi:sandbox::pulumi-trigger::aws:cloudwatch/eventTarget:EventTarget::codebuild-trigger failed, signalling cancellation
I0621 14:08:35.297379   31957 log.go:80] deploymentExecutor.Execute(...): context finished: context canceled
I0621 14:08:35.297405   31957 log.go:80] StepExecutor worker(-1): StepExecutor.waitForCompletion(): waiting for worker threads to exit
I0621 14:08:35.297410   31957 log.go:80] StepExecutor worker(-2): worker exiting due to cancellation
I0621 14:08:35.297471   31957 log.go:80] StepExecutor worker(-1): StepExecutor.waitForCompletion(): worker threads all exited
I0621 14:08:35.297493   31957 log.go:80] deploymentExecutor.Execute(...): step executor has completed
I0621 14:08:35.297511   31957 log.go:80] eventSink::Error(<{%reset%}>update failed<{%reset%}>)
I0621 14:08:35.297560   31957 log.go:80] deploymentExecutor.Execute(...): exiting provider canceller
I0621 14:08:35.298760   31957 log.go:80] langhost[go].Run(pwd=/mnt/c/Projects/pulumi-trigger,program=.,...,dryrun=false) failed: err=error reading from server: read tcp 127.0.0.1:61963->127.0.0.1:61961: use of closed network connection
I0621 14:08:35.299045   31957 log.go:80] Explicitly ignoring and discarding error: rpc error: code = Canceled desc = grpc: the client connection is closing
I0621 14:08:35.299393   31957 log.go:80] EvalSourceIterator ended with an error: error reading from server: read tcp 127.0.0.1:61963->127.0.0.1:61961: use of closed network connection
I0621 14:08:35.299424   31957 log.go:80] deploymentExecutor.Execute(...): incoming events goroutine exiting
I0621 14:08:35.299628   31957 log.go:80] *** Update(preview=false) complete ***
