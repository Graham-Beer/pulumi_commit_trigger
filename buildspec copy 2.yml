version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  variables:
    WEB_HOOK: https://sgngas.webhook.office.com/webhookb2/9db2101b-bc08-428f-a55a-cf4fbbf51c07@b9563cbc-9874-41ab-b448-7e0f61aff3eb/IncomingWebhook/3437e9534629497ca635c3bd7d9dea6a/d31e10bd-b756-4d5c-a578-7055463d4f23
phases:
  install:
    runtime-versions:
      golang: 1.20
  pre_build:
    commands:
      - echo "Pre-build started on $(date)"
      - export CI_NAME="AWS CodeBuild"
      - export CI_BUILD_ID=$CODEBUILD_BUILD_NUMBER
      - export GIT_BRANCH=$CODEBUILD_WEBHOOK_HEAD_REF
      - git config --global user.email "CodeBuild"
      - git config --global user.name "CodeBuild CI Process"
      - export SOURCEHEAD="$(echo "$sourceReference" | cut -d '/' -f3-)"
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - if [[ "$SOURCEHEAD" != *"RC"* ]]; then exit 1; fi
      - git checkout $SOURCEHEAD
      - go version
      - go get -t ./...
  build:
    commands:
      - echo "Post-build started on $(date)"
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
          go vet
          go test ./... -v
        fi
  post_build:
    commands:
      - export date=$(date '+%d-%m-%Y-%H%M%S')
      - export TAG="${SOURCEHEAD}-${date}"
      - |
        export pay='{
          "type": "message",
          "attachments": [
            {
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "type": "AdaptiveCard",
                "version": "1.3",
                "body": [
                  {
                    "type": "TextBlock",
                    "text": "subject",
                    "weight": "Bolder",
                    "size": "Large",
                    "color": "shade",
                    "horizontalAlignment": "center"
                  },
                  {
                    "type": "FactSet",
                    "facts": [
                      {
                        "title": "Repository",
                        "value": "repositoryName",
                      },
                      {
                        "title": "Branch",
                        "value": "SOURCEHEAD"
                      },
                      {
                        "title": "Build run",
                        "value": "CODEBUILD_BUILD_ID"
                      },
                      {
                        "title": "Status",
                        "value": "status"
                      },
                      {
                        "title": "Merged",
                        "value": "IsMerged"
                      },
                      {
                        "title": "Comment",
                        "value": "comment"
                      }
                    ]
                  },
                  {
                    "type": "Container",
                    "items": [
                      {
                        "type": "TextBlock",
                        "text": "Error Message",
                        "weight": "Bolder",
                        "size": "Medium"
                      },
                      {
                        "type": "TextBlock",
                        "text": "error",
                        "wrap": true,
                        "weight": "lighter"
                      }
                    ],
                    "style": "attention",
                    "bleed": true,
                    "padding": "Default"
                  }
                ],
                "actions": [
                  {
                    "type": "Action.OpenUrl",
                    "title": "View Build Log",
                    "url": "CODEBUILD_PUBLIC_BUILD_URL"
                  }
                ]
              }
            }
          ]
        }'
      - >
        if [[ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]]; then
          content="✔️  Pull request build SUCCEEDED! ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Passed: $SOURCEHEAD" 2> err.txt
          git push origin $TAG 2> err.txt
          aws codecommit update-pull-request-approval-state --pull-request-id $pullRequestId --approval-state APPROVE --revision-id $revisionId 2> err.txt
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content" 2> err.txt
          export IsMerged=$(aws codecommit merge-pull-request-by-fast-forward --pull-request-id $pullRequestId --source-commit-id $sourceCommit --repository-name $repositoryName --query 'pullRequest.pullRequestTargets[].mergeMetadata[].isMerged' --output text 2> err.txt)  
          if [[ "$IsMerged" == "true" ]]; then
            aws codecommit delete-branch --repository-name $repositoryName --branch-name $SOURCEHEAD 2> err.txt
            export activityTitle="Pull Request Build Tests SUCCEEDED!"
            export status="SUCCEEDED"
            export comment="No action required"
            export colour="good"
          fi
          if [[ "$IsMerged" == "" ]]; then
            export IsMerged="false"
            export status="Action Required"
            export comment="Check CodeCommit repository pull request for failed merge. Manual Merge required."
            export activityTitle="Pull Request Build not completed!"
            export colour="warning"
          fi
        else
          content="❌ Pull request build FAILED! ![View Build]($CODEBUILD_PUBLIC_BUILD_URL)"
          git tag -a $TAG -m "CI Tests Failed!: $SOURCEHEAD"
          git push origin $TAG
          aws codecommit post-comment-for-pull-request --pull-request-id $pullRequestId --repository-name $repositoryName --before-commit-id $destinationCommit --after-commit-id $sourceCommit --content "$content" 2> err.txt
          export activityTitle="Pull Request Build FAILED!"
          export status="FAILED"
          export comment="Check CodeCommit repository pull request failure"
          export colour="attention"
        fi
      - if [ -s err.txt ]; then error=$(fmt -w 70 err.txt); else error="None"; fi
      - export pay="${pay//'shade'/$colour}"
      - export pay="${pay//'subject'/$activityTitle}"
      - export pay="${pay//'repositoryName'/$repositoryName}"
      - export pay="${pay//'SOURCEHEAD'/$SOURCEHEAD}"
      - export pay="${pay//'CODEBUILD_BUILD_ID'/$CODEBUILD_BUILD_ID}"
      - export pay="${pay//'status'/$status}"
      - export pay="${pay//'CODEBUILD_PUBLIC_BUILD_URL'/$CODEBUILD_PUBLIC_BUILD_URL}"
      - export pay="${pay//'IsMerged'/$IsMerged}"
      - export pay="${pay//'error'/"$error"}"
      - export pay="${pay//'comment'/$comment}"
      - echo "$pay"
      - rm err.txt
      - >
        curl -X POST -H 'Content-Type: application/json' -d "$pay" "$WEB_HOOK"
